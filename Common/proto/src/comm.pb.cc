// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class CommSvrRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommSvrRegister>
      _instance;
} _CommSvrRegister_default_instance_;
class CommSvrUnregisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommSvrUnregister>
      _instance;
} _CommSvrUnregister_default_instance_;
class CommKeepAliveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommKeepAlive>
      _instance;
} _CommKeepAlive_default_instance_;
class AllocServerReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocServerReq>
      _instance;
} _AllocServerReq_default_instance_;
class AllocServerRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocServerResp>
      _instance;
} _AllocServerResp_default_instance_;
class ServerReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerReport>
      _instance;
} _ServerReport_default_instance_;
class GameDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameDef>
      _instance;
} _GameDef_default_instance_;
class MatchDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchDef>
      _instance;
} _MatchDef_default_instance_;
class QueryGameConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryGameConfig>
      _instance;
} _QueryGameConfig_default_instance_;
class ListenDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenDef>
      _instance;
} _ListenDef_default_instance_;
class QueryListenServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryListenServer>
      _instance;
} _QueryListenServer_default_instance_;
class TpaRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TpaRole>
      _instance;
} _TpaRole_default_instance_;
class TpaUserLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TpaUserLogin>
      _instance;
} _TpaUserLogin_default_instance_;
}  // namespace Pb
namespace protobuf_comm_2eproto {
void InitDefaultsCommSvrRegisterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsServerID();
  {
    void* ptr = &::Pb::_CommSvrRegister_default_instance_;
    new (ptr) ::Pb::CommSvrRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::CommSvrRegister::InitAsDefaultInstance();
}

void InitDefaultsCommSvrRegister() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommSvrRegisterImpl);
}

void InitDefaultsCommSvrUnregisterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsServerID();
  {
    void* ptr = &::Pb::_CommSvrUnregister_default_instance_;
    new (ptr) ::Pb::CommSvrUnregister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::CommSvrUnregister::InitAsDefaultInstance();
}

void InitDefaultsCommSvrUnregister() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommSvrUnregisterImpl);
}

void InitDefaultsCommKeepAliveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_CommKeepAlive_default_instance_;
    new (ptr) ::Pb::CommKeepAlive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::CommKeepAlive::InitAsDefaultInstance();
}

void InitDefaultsCommKeepAlive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommKeepAliveImpl);
}

void InitDefaultsAllocServerReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AllocServerReq_default_instance_;
    new (ptr) ::Pb::AllocServerReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AllocServerReq::InitAsDefaultInstance();
}

void InitDefaultsAllocServerReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAllocServerReqImpl);
}

void InitDefaultsAllocServerRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AllocServerResp_default_instance_;
    new (ptr) ::Pb::AllocServerResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AllocServerResp::InitAsDefaultInstance();
}

void InitDefaultsAllocServerResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAllocServerRespImpl);
}

void InitDefaultsServerReportImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_ServerReport_default_instance_;
    new (ptr) ::Pb::ServerReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ServerReport::InitAsDefaultInstance();
}

void InitDefaultsServerReport() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerReportImpl);
}

void InitDefaultsGameDefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_GameDef_default_instance_;
    new (ptr) ::Pb::GameDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::GameDef::InitAsDefaultInstance();
}

void InitDefaultsGameDef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameDefImpl);
}

void InitDefaultsMatchDefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_MatchDef_default_instance_;
    new (ptr) ::Pb::MatchDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::MatchDef::InitAsDefaultInstance();
}

void InitDefaultsMatchDef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMatchDefImpl);
}

void InitDefaultsQueryGameConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_comm_2eproto::InitDefaultsGameDef();
  protobuf_comm_2eproto::InitDefaultsMatchDef();
  {
    void* ptr = &::Pb::_QueryGameConfig_default_instance_;
    new (ptr) ::Pb::QueryGameConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::QueryGameConfig::InitAsDefaultInstance();
}

void InitDefaultsQueryGameConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryGameConfigImpl);
}

void InitDefaultsListenDefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsServerID();
  {
    void* ptr = &::Pb::_ListenDef_default_instance_;
    new (ptr) ::Pb::ListenDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ListenDef::InitAsDefaultInstance();
}

void InitDefaultsListenDef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListenDefImpl);
}

void InitDefaultsQueryListenServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsServerID();
  protobuf_comm_2eproto::InitDefaultsListenDef();
  {
    void* ptr = &::Pb::_QueryListenServer_default_instance_;
    new (ptr) ::Pb::QueryListenServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::QueryListenServer::InitAsDefaultInstance();
}

void InitDefaultsQueryListenServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryListenServerImpl);
}

void InitDefaultsTpaRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_TpaRole_default_instance_;
    new (ptr) ::Pb::TpaRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::TpaRole::InitAsDefaultInstance();
}

void InitDefaultsTpaRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTpaRoleImpl);
}

void InitDefaultsTpaUserLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_comm_2eproto::InitDefaultsTpaRole();
  {
    void* ptr = &::Pb::_TpaUserLogin_default_instance_;
    new (ptr) ::Pb::TpaUserLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::TpaUserLogin::InitAsDefaultInstance();
}

void InitDefaultsTpaUserLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTpaUserLoginImpl);
}

::google::protobuf::Metadata file_level_metadata[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, svr_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, s_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrRegister, c_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrUnregister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommSvrUnregister, svr_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommKeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CommKeepAlive, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerReq, server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerResp, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerResp, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AllocServerResp, server_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerReport, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerReport, room_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerReport, robot_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, betting_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, numplayers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, numrounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, stack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, blind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, firstplayer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, numsuits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, numranks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, numholecards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, numboardcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, raisesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::GameDef, maxraises_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::MatchDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::MatchDef, match_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::MatchDef, match_hands_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryGameConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryGameConfig, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryGameConfig, source_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryGameConfig, game_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryGameConfig, betting_control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryGameConfig, match_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ListenDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ListenDef, svr_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ListenDef, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ListenDef, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryListenServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryListenServer, req_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryListenServer, acpc_servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRole, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRole, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRole, seat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, tpa_role_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, acpc_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, acpc_server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaUserLogin, acpc_server_port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::CommSvrRegister)},
  { 11, -1, sizeof(::Pb::CommSvrUnregister)},
  { 17, -1, sizeof(::Pb::CommKeepAlive)},
  { 23, -1, sizeof(::Pb::AllocServerReq)},
  { 30, -1, sizeof(::Pb::AllocServerResp)},
  { 39, -1, sizeof(::Pb::ServerReport)},
  { 47, -1, sizeof(::Pb::GameDef)},
  { 64, -1, sizeof(::Pb::MatchDef)},
  { 71, -1, sizeof(::Pb::QueryGameConfig)},
  { 81, -1, sizeof(::Pb::ListenDef)},
  { 89, -1, sizeof(::Pb::QueryListenServer)},
  { 96, -1, sizeof(::Pb::TpaRole)},
  { 104, -1, sizeof(::Pb::TpaUserLogin)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_CommSvrRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_CommSvrUnregister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_CommKeepAlive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AllocServerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AllocServerResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ServerReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_GameDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_MatchDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_QueryGameConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ListenDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_QueryListenServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_TpaRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_TpaUserLogin_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "comm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ncomm.proto\022\002Pb\032\014system.proto\"\212\001\n\017CommS"
      "vrRegister\022\034\n\006svr_id\030\001 \001(\0132\014.Pb.ServerID"
      "\022\023\n\013server_name\030\002 \001(\t\022\014\n\004addr\030\003 \001(\t\022\014\n\004p"
      "ort\030\004 \001(\r\022\023\n\013s_server_id\030\005 \001(\r\022\023\n\013c_serv"
      "er_id\030\006 \001(\r\"1\n\021CommSvrUnregister\022\034\n\006svr_"
      "id\030\001 \001(\0132\014.Pb.ServerID\"\034\n\rCommKeepAlive\022"
      "\013\n\003msg\030\001 \001(\t\"4\n\016AllocServerReq\022\017\n\007role_i"
      "d\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\"]\n\017AllocServe"
      "rResp\022\017\n\007role_id\030\001 \001(\r\022\021\n\tserver_id\030\002 \001("
      "\r\022\021\n\tserver_ip\030\003 \001(\t\022\023\n\013server_port\030\004 \001("
      "\r\"F\n\014ServerReport\022\021\n\tserver_id\030\001 \001(\r\022\020\n\010"
      "room_cnt\030\002 \001(\r\022\021\n\trobot_cnt\030\003 \001(\r\"\360\001\n\007Ga"
      "meDef\022\024\n\014betting_type\030\001 \001(\r\022\022\n\nnumPlayer"
      "s\030\002 \001(\r\022\021\n\tnumRounds\030\003 \001(\r\022\r\n\005stack\030\004 \003("
      "\r\022\r\n\005blind\030\005 \003(\r\022\023\n\013firstPlayer\030\006 \003(\r\022\020\n"
      "\010numSuits\030\007 \001(\r\022\020\n\010numRanks\030\010 \001(\r\022\024\n\014num"
      "HoleCards\030\t \001(\r\022\025\n\rnumBoardCards\030\n \003(\r\022\021"
      "\n\traiseSize\030\013 \003(\r\022\021\n\tmaxRaises\030\014 \003(\r\"5\n\010"
      "MatchDef\022\024\n\014match_enable\030\001 \001(\r\022\023\n\013match_"
      "hands\030\002 \001(\r\"\227\001\n\017QueryGameConfig\022\021\n\tgame_"
      "type\030\001 \001(\r\022\022\n\nsource_msg\030\002 \001(\t\022 \n\013game_c"
      "onfig\030\003 \003(\0132\013.Pb.GameDef\022\027\n\017betting_cont"
      "rol\030\004 \001(\t\022\"\n\014match_config\030\005 \001(\0132\014.Pb.Mat"
      "chDef\"E\n\tListenDef\022\034\n\006svr_id\030\001 \001(\0132\014.Pb."
      "ServerID\022\014\n\004addr\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\"]\n\021"
      "QueryListenServer\022#\n\rreq_server_id\030\001 \001(\013"
      "2\014.Pb.ServerID\022#\n\014acpc_servers\030\002 \003(\0132\r.P"
      "b.ListenDef\";\n\007TpaRole\022\017\n\007role_id\030\001 \001(\r\022"
      "\021\n\tplayer_id\030\002 \001(\004\022\014\n\004seat\030\003 \001(\005\"\244\001\n\014Tpa"
      "UserLogin\022\023\n\013tpa_room_id\030\001 \001(\r\022\021\n\tgame_t"
      "ype\030\002 \001(\r\022\"\n\rtpa_role_list\030\003 \003(\0132\013.Pb.Tp"
      "aRole\022\026\n\016acpc_server_id\030\004 \001(\r\022\026\n\016acpc_se"
      "rver_ip\030\005 \001(\t\022\030\n\020acpc_server_port\030\006 \001(\rb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_comm_2eproto
namespace Pb {

// ===================================================================

void CommSvrRegister::InitAsDefaultInstance() {
  ::Pb::_CommSvrRegister_default_instance_._instance.get_mutable()->svr_id_ = const_cast< ::Pb::ServerID*>(
      ::Pb::ServerID::internal_default_instance());
}
void CommSvrRegister::clear_svr_id() {
  if (GetArenaNoVirtual() == NULL && svr_id_ != NULL) {
    delete svr_id_;
  }
  svr_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommSvrRegister::kSvrIdFieldNumber;
const int CommSvrRegister::kServerNameFieldNumber;
const int CommSvrRegister::kAddrFieldNumber;
const int CommSvrRegister::kPortFieldNumber;
const int CommSvrRegister::kSServerIdFieldNumber;
const int CommSvrRegister::kCServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommSvrRegister::CommSvrRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCommSvrRegister();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.CommSvrRegister)
}
CommSvrRegister::CommSvrRegister(const CommSvrRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.has_svr_id()) {
    svr_id_ = new ::Pb::ServerID(*from.svr_id_);
  } else {
    svr_id_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_server_id_) -
    reinterpret_cast<char*>(&port_)) + sizeof(c_server_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.CommSvrRegister)
}

void CommSvrRegister::SharedCtor() {
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&svr_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_server_id_) -
      reinterpret_cast<char*>(&svr_id_)) + sizeof(c_server_id_));
  _cached_size_ = 0;
}

CommSvrRegister::~CommSvrRegister() {
  // @@protoc_insertion_point(destructor:Pb.CommSvrRegister)
  SharedDtor();
}

void CommSvrRegister::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete svr_id_;
}

void CommSvrRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommSvrRegister::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommSvrRegister& CommSvrRegister::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCommSvrRegister();
  return *internal_default_instance();
}

CommSvrRegister* CommSvrRegister::New(::google::protobuf::Arena* arena) const {
  CommSvrRegister* n = new CommSvrRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommSvrRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.CommSvrRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && svr_id_ != NULL) {
    delete svr_id_;
  }
  svr_id_ = NULL;
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_server_id_) -
      reinterpret_cast<char*>(&port_)) + sizeof(c_server_id_));
  _internal_metadata_.Clear();
}

bool CommSvrRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.CommSvrRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Pb.ServerID svr_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_svr_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.CommSvrRegister.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.CommSvrRegister.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 s_server_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 c_server_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.CommSvrRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.CommSvrRegister)
  return false;
#undef DO_
}

void CommSvrRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.CommSvrRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->svr_id_, output);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.CommSvrRegister.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_name(), output);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.CommSvrRegister.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->addr(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // uint32 s_server_id = 5;
  if (this->s_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->s_server_id(), output);
  }

  // uint32 c_server_id = 6;
  if (this->c_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->c_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.CommSvrRegister)
}

::google::protobuf::uint8* CommSvrRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.CommSvrRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->svr_id_, deterministic, target);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.CommSvrRegister.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.CommSvrRegister.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // uint32 s_server_id = 5;
  if (this->s_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->s_server_id(), target);
  }

  // uint32 c_server_id = 6;
  if (this->c_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->c_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.CommSvrRegister)
  return target;
}

size_t CommSvrRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.CommSvrRegister)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->svr_id_);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 s_server_id = 5;
  if (this->s_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->s_server_id());
  }

  // uint32 c_server_id = 6;
  if (this->c_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommSvrRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.CommSvrRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const CommSvrRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommSvrRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.CommSvrRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.CommSvrRegister)
    MergeFrom(*source);
  }
}

void CommSvrRegister::MergeFrom(const CommSvrRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.CommSvrRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.has_svr_id()) {
    mutable_svr_id()->::Pb::ServerID::MergeFrom(from.svr_id());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.s_server_id() != 0) {
    set_s_server_id(from.s_server_id());
  }
  if (from.c_server_id() != 0) {
    set_c_server_id(from.c_server_id());
  }
}

void CommSvrRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.CommSvrRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommSvrRegister::CopyFrom(const CommSvrRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.CommSvrRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommSvrRegister::IsInitialized() const {
  return true;
}

void CommSvrRegister::Swap(CommSvrRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommSvrRegister::InternalSwap(CommSvrRegister* other) {
  using std::swap;
  server_name_.Swap(&other->server_name_);
  addr_.Swap(&other->addr_);
  swap(svr_id_, other->svr_id_);
  swap(port_, other->port_);
  swap(s_server_id_, other->s_server_id_);
  swap(c_server_id_, other->c_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommSvrRegister::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommSvrUnregister::InitAsDefaultInstance() {
  ::Pb::_CommSvrUnregister_default_instance_._instance.get_mutable()->svr_id_ = const_cast< ::Pb::ServerID*>(
      ::Pb::ServerID::internal_default_instance());
}
void CommSvrUnregister::clear_svr_id() {
  if (GetArenaNoVirtual() == NULL && svr_id_ != NULL) {
    delete svr_id_;
  }
  svr_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommSvrUnregister::kSvrIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommSvrUnregister::CommSvrUnregister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCommSvrUnregister();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.CommSvrUnregister)
}
CommSvrUnregister::CommSvrUnregister(const CommSvrUnregister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_svr_id()) {
    svr_id_ = new ::Pb::ServerID(*from.svr_id_);
  } else {
    svr_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Pb.CommSvrUnregister)
}

void CommSvrUnregister::SharedCtor() {
  svr_id_ = NULL;
  _cached_size_ = 0;
}

CommSvrUnregister::~CommSvrUnregister() {
  // @@protoc_insertion_point(destructor:Pb.CommSvrUnregister)
  SharedDtor();
}

void CommSvrUnregister::SharedDtor() {
  if (this != internal_default_instance()) delete svr_id_;
}

void CommSvrUnregister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommSvrUnregister::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommSvrUnregister& CommSvrUnregister::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCommSvrUnregister();
  return *internal_default_instance();
}

CommSvrUnregister* CommSvrUnregister::New(::google::protobuf::Arena* arena) const {
  CommSvrUnregister* n = new CommSvrUnregister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommSvrUnregister::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.CommSvrUnregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && svr_id_ != NULL) {
    delete svr_id_;
  }
  svr_id_ = NULL;
  _internal_metadata_.Clear();
}

bool CommSvrUnregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.CommSvrUnregister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Pb.ServerID svr_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_svr_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.CommSvrUnregister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.CommSvrUnregister)
  return false;
#undef DO_
}

void CommSvrUnregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.CommSvrUnregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->svr_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.CommSvrUnregister)
}

::google::protobuf::uint8* CommSvrUnregister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.CommSvrUnregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->svr_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.CommSvrUnregister)
  return target;
}

size_t CommSvrUnregister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.CommSvrUnregister)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->svr_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommSvrUnregister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.CommSvrUnregister)
  GOOGLE_DCHECK_NE(&from, this);
  const CommSvrUnregister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommSvrUnregister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.CommSvrUnregister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.CommSvrUnregister)
    MergeFrom(*source);
  }
}

void CommSvrUnregister::MergeFrom(const CommSvrUnregister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.CommSvrUnregister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_svr_id()) {
    mutable_svr_id()->::Pb::ServerID::MergeFrom(from.svr_id());
  }
}

void CommSvrUnregister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.CommSvrUnregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommSvrUnregister::CopyFrom(const CommSvrUnregister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.CommSvrUnregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommSvrUnregister::IsInitialized() const {
  return true;
}

void CommSvrUnregister::Swap(CommSvrUnregister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommSvrUnregister::InternalSwap(CommSvrUnregister* other) {
  using std::swap;
  swap(svr_id_, other->svr_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommSvrUnregister::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommKeepAlive::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommKeepAlive::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommKeepAlive::CommKeepAlive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCommKeepAlive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.CommKeepAlive)
}
CommKeepAlive::CommKeepAlive(const CommKeepAlive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:Pb.CommKeepAlive)
}

void CommKeepAlive::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CommKeepAlive::~CommKeepAlive() {
  // @@protoc_insertion_point(destructor:Pb.CommKeepAlive)
  SharedDtor();
}

void CommKeepAlive::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommKeepAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommKeepAlive::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommKeepAlive& CommKeepAlive::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCommKeepAlive();
  return *internal_default_instance();
}

CommKeepAlive* CommKeepAlive::New(::google::protobuf::Arena* arena) const {
  CommKeepAlive* n = new CommKeepAlive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommKeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.CommKeepAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CommKeepAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.CommKeepAlive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.CommKeepAlive.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.CommKeepAlive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.CommKeepAlive)
  return false;
#undef DO_
}

void CommKeepAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.CommKeepAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.CommKeepAlive.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.CommKeepAlive)
}

::google::protobuf::uint8* CommKeepAlive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.CommKeepAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.CommKeepAlive.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.CommKeepAlive)
  return target;
}

size_t CommKeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.CommKeepAlive)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommKeepAlive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.CommKeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommKeepAlive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommKeepAlive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.CommKeepAlive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.CommKeepAlive)
    MergeFrom(*source);
  }
}

void CommKeepAlive::MergeFrom(const CommKeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.CommKeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void CommKeepAlive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.CommKeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommKeepAlive::CopyFrom(const CommKeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.CommKeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommKeepAlive::IsInitialized() const {
  return true;
}

void CommKeepAlive::Swap(CommKeepAlive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommKeepAlive::InternalSwap(CommKeepAlive* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommKeepAlive::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocServerReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocServerReq::kRoleIdFieldNumber;
const int AllocServerReq::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocServerReq::AllocServerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsAllocServerReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AllocServerReq)
}
AllocServerReq::AllocServerReq(const AllocServerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AllocServerReq)
}

void AllocServerReq::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(server_id_));
  _cached_size_ = 0;
}

AllocServerReq::~AllocServerReq() {
  // @@protoc_insertion_point(destructor:Pb.AllocServerReq)
  SharedDtor();
}

void AllocServerReq::SharedDtor() {
}

void AllocServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocServerReq::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocServerReq& AllocServerReq::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsAllocServerReq();
  return *internal_default_instance();
}

AllocServerReq* AllocServerReq::New(::google::protobuf::Arena* arena) const {
  AllocServerReq* n = new AllocServerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AllocServerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

bool AllocServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AllocServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AllocServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AllocServerReq)
  return false;
#undef DO_
}

void AllocServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AllocServerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 server_id = 2;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AllocServerReq)
}

::google::protobuf::uint8* AllocServerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AllocServerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 server_id = 2;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AllocServerReq)
  return target;
}

size_t AllocServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AllocServerReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocServerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AllocServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocServerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocServerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AllocServerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AllocServerReq)
    MergeFrom(*source);
  }
}

void AllocServerReq::MergeFrom(const AllocServerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AllocServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void AllocServerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AllocServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocServerReq::CopyFrom(const AllocServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AllocServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocServerReq::IsInitialized() const {
  return true;
}

void AllocServerReq::Swap(AllocServerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocServerReq::InternalSwap(AllocServerReq* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(server_id_, other->server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocServerReq::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocServerResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocServerResp::kRoleIdFieldNumber;
const int AllocServerResp::kServerIdFieldNumber;
const int AllocServerResp::kServerIpFieldNumber;
const int AllocServerResp::kServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocServerResp::AllocServerResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsAllocServerResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AllocServerResp)
}
AllocServerResp::AllocServerResp(const AllocServerResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_ip().size() > 0) {
    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:Pb.AllocServerResp)
}

void AllocServerResp::SharedCtor() {
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(server_port_));
  _cached_size_ = 0;
}

AllocServerResp::~AllocServerResp() {
  // @@protoc_insertion_point(destructor:Pb.AllocServerResp)
  SharedDtor();
}

void AllocServerResp::SharedDtor() {
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllocServerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocServerResp::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocServerResp& AllocServerResp::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsAllocServerResp();
  return *internal_default_instance();
}

AllocServerResp* AllocServerResp::New(::google::protobuf::Arena* arena) const {
  AllocServerResp* n = new AllocServerResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocServerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AllocServerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(server_port_));
  _internal_metadata_.Clear();
}

bool AllocServerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AllocServerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_ip().data(), static_cast<int>(this->server_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AllocServerResp.server_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AllocServerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AllocServerResp)
  return false;
#undef DO_
}

void AllocServerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AllocServerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 server_id = 2;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // string server_ip = 3;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AllocServerResp.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_ip(), output);
  }

  // uint32 server_port = 4;
  if (this->server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AllocServerResp)
}

::google::protobuf::uint8* AllocServerResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AllocServerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 server_id = 2;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // string server_ip = 3;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AllocServerResp.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_ip(), target);
  }

  // uint32 server_port = 4;
  if (this->server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AllocServerResp)
  return target;
}

size_t AllocServerResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AllocServerResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_ip = 3;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ip());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  // uint32 server_port = 4;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocServerResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AllocServerResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocServerResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocServerResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AllocServerResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AllocServerResp)
    MergeFrom(*source);
  }
}

void AllocServerResp::MergeFrom(const AllocServerResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AllocServerResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
}

void AllocServerResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AllocServerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocServerResp::CopyFrom(const AllocServerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AllocServerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocServerResp::IsInitialized() const {
  return true;
}

void AllocServerResp::Swap(AllocServerResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocServerResp::InternalSwap(AllocServerResp* other) {
  using std::swap;
  server_ip_.Swap(&other->server_ip_);
  swap(role_id_, other->role_id_);
  swap(server_id_, other->server_id_);
  swap(server_port_, other->server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocServerResp::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerReport::kServerIdFieldNumber;
const int ServerReport::kRoomCntFieldNumber;
const int ServerReport::kRobotCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerReport::ServerReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsServerReport();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ServerReport)
}
ServerReport::ServerReport(const ServerReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_cnt_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(robot_cnt_));
  // @@protoc_insertion_point(copy_constructor:Pb.ServerReport)
}

void ServerReport::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_cnt_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(robot_cnt_));
  _cached_size_ = 0;
}

ServerReport::~ServerReport() {
  // @@protoc_insertion_point(destructor:Pb.ServerReport)
  SharedDtor();
}

void ServerReport::SharedDtor() {
}

void ServerReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerReport::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerReport& ServerReport::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsServerReport();
  return *internal_default_instance();
}

ServerReport* ServerReport::New(::google::protobuf::Arena* arena) const {
  ServerReport* n = new ServerReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ServerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_cnt_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(robot_cnt_));
  _internal_metadata_.Clear();
}

bool ServerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ServerReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 room_cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ServerReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ServerReport)
  return false;
#undef DO_
}

void ServerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ServerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // uint32 room_cnt = 2;
  if (this->room_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_cnt(), output);
  }

  // uint32 robot_cnt = 3;
  if (this->robot_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robot_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ServerReport)
}

::google::protobuf::uint8* ServerReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ServerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // uint32 room_cnt = 2;
  if (this->room_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_cnt(), target);
  }

  // uint32 robot_cnt = 3;
  if (this->robot_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robot_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ServerReport)
  return target;
}

size_t ServerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ServerReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  // uint32 room_cnt = 2;
  if (this->room_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_cnt());
  }

  // uint32 robot_cnt = 3;
  if (this->robot_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ServerReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ServerReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ServerReport)
    MergeFrom(*source);
  }
}

void ServerReport::MergeFrom(const ServerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ServerReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.room_cnt() != 0) {
    set_room_cnt(from.room_cnt());
  }
  if (from.robot_cnt() != 0) {
    set_robot_cnt(from.robot_cnt());
  }
}

void ServerReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ServerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerReport::CopyFrom(const ServerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ServerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReport::IsInitialized() const {
  return true;
}

void ServerReport::Swap(ServerReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerReport::InternalSwap(ServerReport* other) {
  using std::swap;
  swap(server_id_, other->server_id_);
  swap(room_cnt_, other->room_cnt_);
  swap(robot_cnt_, other->robot_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerReport::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameDef::kBettingTypeFieldNumber;
const int GameDef::kNumPlayersFieldNumber;
const int GameDef::kNumRoundsFieldNumber;
const int GameDef::kStackFieldNumber;
const int GameDef::kBlindFieldNumber;
const int GameDef::kFirstPlayerFieldNumber;
const int GameDef::kNumSuitsFieldNumber;
const int GameDef::kNumRanksFieldNumber;
const int GameDef::kNumHoleCardsFieldNumber;
const int GameDef::kNumBoardCardsFieldNumber;
const int GameDef::kRaiseSizeFieldNumber;
const int GameDef::kMaxRaisesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameDef::GameDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsGameDef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.GameDef)
}
GameDef::GameDef(const GameDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stack_(from.stack_),
      blind_(from.blind_),
      firstplayer_(from.firstplayer_),
      numboardcards_(from.numboardcards_),
      raisesize_(from.raisesize_),
      maxraises_(from.maxraises_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&betting_type_, &from.betting_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&numholecards_) -
    reinterpret_cast<char*>(&betting_type_)) + sizeof(numholecards_));
  // @@protoc_insertion_point(copy_constructor:Pb.GameDef)
}

void GameDef::SharedCtor() {
  ::memset(&betting_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numholecards_) -
      reinterpret_cast<char*>(&betting_type_)) + sizeof(numholecards_));
  _cached_size_ = 0;
}

GameDef::~GameDef() {
  // @@protoc_insertion_point(destructor:Pb.GameDef)
  SharedDtor();
}

void GameDef::SharedDtor() {
}

void GameDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDef::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameDef& GameDef::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsGameDef();
  return *internal_default_instance();
}

GameDef* GameDef::New(::google::protobuf::Arena* arena) const {
  GameDef* n = new GameDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameDef::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.GameDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  blind_.Clear();
  firstplayer_.Clear();
  numboardcards_.Clear();
  raisesize_.Clear();
  maxraises_.Clear();
  ::memset(&betting_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numholecards_) -
      reinterpret_cast<char*>(&betting_type_)) + sizeof(numholecards_));
  _internal_metadata_.Clear();
}

bool GameDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.GameDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 betting_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betting_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numPlayers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numRounds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numrounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stack())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_stack())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 blind = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blind())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_blind())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 firstPlayer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_firstplayer())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_firstplayer())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numSuits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numsuits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numRanks = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numranks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numHoleCards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numholecards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 numBoardCards = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_numboardcards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_numboardcards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 raiseSize = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_raisesize())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_raisesize())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 maxRaises = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_maxraises())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_maxraises())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.GameDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.GameDef)
  return false;
#undef DO_
}

void GameDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.GameDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 betting_type = 1;
  if (this->betting_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->betting_type(), output);
  }

  // uint32 numPlayers = 2;
  if (this->numplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numplayers(), output);
  }

  // uint32 numRounds = 3;
  if (this->numrounds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numrounds(), output);
  }

  // repeated uint32 stack = 4;
  if (this->stack_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stack_cached_byte_size_));
  }
  for (int i = 0, n = this->stack_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->stack(i), output);
  }

  // repeated uint32 blind = 5;
  if (this->blind_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _blind_cached_byte_size_));
  }
  for (int i = 0, n = this->blind_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->blind(i), output);
  }

  // repeated uint32 firstPlayer = 6;
  if (this->firstplayer_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _firstplayer_cached_byte_size_));
  }
  for (int i = 0, n = this->firstplayer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->firstplayer(i), output);
  }

  // uint32 numSuits = 7;
  if (this->numsuits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numsuits(), output);
  }

  // uint32 numRanks = 8;
  if (this->numranks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numranks(), output);
  }

  // uint32 numHoleCards = 9;
  if (this->numholecards() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->numholecards(), output);
  }

  // repeated uint32 numBoardCards = 10;
  if (this->numboardcards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _numboardcards_cached_byte_size_));
  }
  for (int i = 0, n = this->numboardcards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->numboardcards(i), output);
  }

  // repeated uint32 raiseSize = 11;
  if (this->raisesize_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _raisesize_cached_byte_size_));
  }
  for (int i = 0, n = this->raisesize_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->raisesize(i), output);
  }

  // repeated uint32 maxRaises = 12;
  if (this->maxraises_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _maxraises_cached_byte_size_));
  }
  for (int i = 0, n = this->maxraises_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->maxraises(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.GameDef)
}

::google::protobuf::uint8* GameDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.GameDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 betting_type = 1;
  if (this->betting_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->betting_type(), target);
  }

  // uint32 numPlayers = 2;
  if (this->numplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numplayers(), target);
  }

  // uint32 numRounds = 3;
  if (this->numrounds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->numrounds(), target);
  }

  // repeated uint32 stack = 4;
  if (this->stack_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _stack_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->stack_, target);
  }

  // repeated uint32 blind = 5;
  if (this->blind_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _blind_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->blind_, target);
  }

  // repeated uint32 firstPlayer = 6;
  if (this->firstplayer_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _firstplayer_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->firstplayer_, target);
  }

  // uint32 numSuits = 7;
  if (this->numsuits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numsuits(), target);
  }

  // uint32 numRanks = 8;
  if (this->numranks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numranks(), target);
  }

  // uint32 numHoleCards = 9;
  if (this->numholecards() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->numholecards(), target);
  }

  // repeated uint32 numBoardCards = 10;
  if (this->numboardcards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _numboardcards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->numboardcards_, target);
  }

  // repeated uint32 raiseSize = 11;
  if (this->raisesize_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _raisesize_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->raisesize_, target);
  }

  // repeated uint32 maxRaises = 12;
  if (this->maxraises_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _maxraises_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->maxraises_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.GameDef)
  return target;
}

size_t GameDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.GameDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 stack = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stack_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stack_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 blind = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->blind_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _blind_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 firstPlayer = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->firstplayer_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _firstplayer_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 numBoardCards = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->numboardcards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _numboardcards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 raiseSize = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->raisesize_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _raisesize_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 maxRaises = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->maxraises_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _maxraises_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 betting_type = 1;
  if (this->betting_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->betting_type());
  }

  // uint32 numPlayers = 2;
  if (this->numplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numplayers());
  }

  // uint32 numRounds = 3;
  if (this->numrounds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numrounds());
  }

  // uint32 numSuits = 7;
  if (this->numsuits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numsuits());
  }

  // uint32 numRanks = 8;
  if (this->numranks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numranks());
  }

  // uint32 numHoleCards = 9;
  if (this->numholecards() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numholecards());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.GameDef)
  GOOGLE_DCHECK_NE(&from, this);
  const GameDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.GameDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.GameDef)
    MergeFrom(*source);
  }
}

void GameDef::MergeFrom(const GameDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.GameDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  blind_.MergeFrom(from.blind_);
  firstplayer_.MergeFrom(from.firstplayer_);
  numboardcards_.MergeFrom(from.numboardcards_);
  raisesize_.MergeFrom(from.raisesize_);
  maxraises_.MergeFrom(from.maxraises_);
  if (from.betting_type() != 0) {
    set_betting_type(from.betting_type());
  }
  if (from.numplayers() != 0) {
    set_numplayers(from.numplayers());
  }
  if (from.numrounds() != 0) {
    set_numrounds(from.numrounds());
  }
  if (from.numsuits() != 0) {
    set_numsuits(from.numsuits());
  }
  if (from.numranks() != 0) {
    set_numranks(from.numranks());
  }
  if (from.numholecards() != 0) {
    set_numholecards(from.numholecards());
  }
}

void GameDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.GameDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDef::CopyFrom(const GameDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.GameDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDef::IsInitialized() const {
  return true;
}

void GameDef::Swap(GameDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameDef::InternalSwap(GameDef* other) {
  using std::swap;
  stack_.InternalSwap(&other->stack_);
  blind_.InternalSwap(&other->blind_);
  firstplayer_.InternalSwap(&other->firstplayer_);
  numboardcards_.InternalSwap(&other->numboardcards_);
  raisesize_.InternalSwap(&other->raisesize_);
  maxraises_.InternalSwap(&other->maxraises_);
  swap(betting_type_, other->betting_type_);
  swap(numplayers_, other->numplayers_);
  swap(numrounds_, other->numrounds_);
  swap(numsuits_, other->numsuits_);
  swap(numranks_, other->numranks_);
  swap(numholecards_, other->numholecards_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameDef::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchDef::kMatchEnableFieldNumber;
const int MatchDef::kMatchHandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchDef::MatchDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsMatchDef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.MatchDef)
}
MatchDef::MatchDef(const MatchDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_enable_, &from.match_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_hands_) -
    reinterpret_cast<char*>(&match_enable_)) + sizeof(match_hands_));
  // @@protoc_insertion_point(copy_constructor:Pb.MatchDef)
}

void MatchDef::SharedCtor() {
  ::memset(&match_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_hands_) -
      reinterpret_cast<char*>(&match_enable_)) + sizeof(match_hands_));
  _cached_size_ = 0;
}

MatchDef::~MatchDef() {
  // @@protoc_insertion_point(destructor:Pb.MatchDef)
  SharedDtor();
}

void MatchDef::SharedDtor() {
}

void MatchDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchDef::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchDef& MatchDef::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsMatchDef();
  return *internal_default_instance();
}

MatchDef* MatchDef::New(::google::protobuf::Arena* arena) const {
  MatchDef* n = new MatchDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchDef::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.MatchDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&match_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_hands_) -
      reinterpret_cast<char*>(&match_enable_)) + sizeof(match_hands_));
  _internal_metadata_.Clear();
}

bool MatchDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.MatchDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 match_enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 match_hands = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_hands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.MatchDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.MatchDef)
  return false;
#undef DO_
}

void MatchDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.MatchDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_enable = 1;
  if (this->match_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_enable(), output);
  }

  // uint32 match_hands = 2;
  if (this->match_hands() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->match_hands(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.MatchDef)
}

::google::protobuf::uint8* MatchDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.MatchDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_enable = 1;
  if (this->match_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_enable(), target);
  }

  // uint32 match_hands = 2;
  if (this->match_hands() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->match_hands(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.MatchDef)
  return target;
}

size_t MatchDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.MatchDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 match_enable = 1;
  if (this->match_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_enable());
  }

  // uint32 match_hands = 2;
  if (this->match_hands() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_hands());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.MatchDef)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.MatchDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.MatchDef)
    MergeFrom(*source);
  }
}

void MatchDef::MergeFrom(const MatchDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.MatchDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match_enable() != 0) {
    set_match_enable(from.match_enable());
  }
  if (from.match_hands() != 0) {
    set_match_hands(from.match_hands());
  }
}

void MatchDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.MatchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchDef::CopyFrom(const MatchDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.MatchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchDef::IsInitialized() const {
  return true;
}

void MatchDef::Swap(MatchDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchDef::InternalSwap(MatchDef* other) {
  using std::swap;
  swap(match_enable_, other->match_enable_);
  swap(match_hands_, other->match_hands_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchDef::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryGameConfig::InitAsDefaultInstance() {
  ::Pb::_QueryGameConfig_default_instance_._instance.get_mutable()->match_config_ = const_cast< ::Pb::MatchDef*>(
      ::Pb::MatchDef::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGameConfig::kGameTypeFieldNumber;
const int QueryGameConfig::kSourceMsgFieldNumber;
const int QueryGameConfig::kGameConfigFieldNumber;
const int QueryGameConfig::kBettingControlFieldNumber;
const int QueryGameConfig::kMatchConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGameConfig::QueryGameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsQueryGameConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.QueryGameConfig)
}
QueryGameConfig::QueryGameConfig(const QueryGameConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      game_config_(from.game_config_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_msg().size() > 0) {
    source_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_msg_);
  }
  betting_control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.betting_control().size() > 0) {
    betting_control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.betting_control_);
  }
  if (from.has_match_config()) {
    match_config_ = new ::Pb::MatchDef(*from.match_config_);
  } else {
    match_config_ = NULL;
  }
  game_type_ = from.game_type_;
  // @@protoc_insertion_point(copy_constructor:Pb.QueryGameConfig)
}

void QueryGameConfig::SharedCtor() {
  source_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  betting_control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&match_config_)) + sizeof(game_type_));
  _cached_size_ = 0;
}

QueryGameConfig::~QueryGameConfig() {
  // @@protoc_insertion_point(destructor:Pb.QueryGameConfig)
  SharedDtor();
}

void QueryGameConfig::SharedDtor() {
  source_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  betting_control_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_config_;
}

void QueryGameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGameConfig::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryGameConfig& QueryGameConfig::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsQueryGameConfig();
  return *internal_default_instance();
}

QueryGameConfig* QueryGameConfig::New(::google::protobuf::Arena* arena) const {
  QueryGameConfig* n = new QueryGameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryGameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.QueryGameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_config_.Clear();
  source_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  betting_control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && match_config_ != NULL) {
    delete match_config_;
  }
  match_config_ = NULL;
  game_type_ = 0u;
  _internal_metadata_.Clear();
}

bool QueryGameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.QueryGameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_msg().data(), static_cast<int>(this->source_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.QueryGameConfig.source_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.GameDef game_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_game_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string betting_control = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betting_control()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->betting_control().data(), static_cast<int>(this->betting_control().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.QueryGameConfig.betting_control"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.MatchDef match_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.QueryGameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.QueryGameConfig)
  return false;
#undef DO_
}

void QueryGameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.QueryGameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  // string source_msg = 2;
  if (this->source_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_msg().data(), static_cast<int>(this->source_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.QueryGameConfig.source_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_msg(), output);
  }

  // repeated .Pb.GameDef game_config = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_config(static_cast<int>(i)), output);
  }

  // string betting_control = 4;
  if (this->betting_control().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->betting_control().data(), static_cast<int>(this->betting_control().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.QueryGameConfig.betting_control");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->betting_control(), output);
  }

  // .Pb.MatchDef match_config = 5;
  if (this->has_match_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->match_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.QueryGameConfig)
}

::google::protobuf::uint8* QueryGameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.QueryGameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  // string source_msg = 2;
  if (this->source_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_msg().data(), static_cast<int>(this->source_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.QueryGameConfig.source_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_msg(), target);
  }

  // repeated .Pb.GameDef game_config = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->game_config(static_cast<int>(i)), deterministic, target);
  }

  // string betting_control = 4;
  if (this->betting_control().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->betting_control().data(), static_cast<int>(this->betting_control().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.QueryGameConfig.betting_control");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->betting_control(), target);
  }

  // .Pb.MatchDef match_config = 5;
  if (this->has_match_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->match_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.QueryGameConfig)
  return target;
}

size_t QueryGameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.QueryGameConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.GameDef game_config = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->game_config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_config(static_cast<int>(i)));
    }
  }

  // string source_msg = 2;
  if (this->source_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_msg());
  }

  // string betting_control = 4;
  if (this->betting_control().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->betting_control());
  }

  // .Pb.MatchDef match_config = 5;
  if (this->has_match_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->match_config_);
  }

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.QueryGameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGameConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.QueryGameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.QueryGameConfig)
    MergeFrom(*source);
  }
}

void QueryGameConfig::MergeFrom(const QueryGameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.QueryGameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_config_.MergeFrom(from.game_config_);
  if (from.source_msg().size() > 0) {

    source_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_msg_);
  }
  if (from.betting_control().size() > 0) {

    betting_control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.betting_control_);
  }
  if (from.has_match_config()) {
    mutable_match_config()->::Pb::MatchDef::MergeFrom(from.match_config());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
}

void QueryGameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.QueryGameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGameConfig::CopyFrom(const QueryGameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.QueryGameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGameConfig::IsInitialized() const {
  return true;
}

void QueryGameConfig::Swap(QueryGameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryGameConfig::InternalSwap(QueryGameConfig* other) {
  using std::swap;
  game_config_.InternalSwap(&other->game_config_);
  source_msg_.Swap(&other->source_msg_);
  betting_control_.Swap(&other->betting_control_);
  swap(match_config_, other->match_config_);
  swap(game_type_, other->game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGameConfig::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListenDef::InitAsDefaultInstance() {
  ::Pb::_ListenDef_default_instance_._instance.get_mutable()->svr_id_ = const_cast< ::Pb::ServerID*>(
      ::Pb::ServerID::internal_default_instance());
}
void ListenDef::clear_svr_id() {
  if (GetArenaNoVirtual() == NULL && svr_id_ != NULL) {
    delete svr_id_;
  }
  svr_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenDef::kSvrIdFieldNumber;
const int ListenDef::kAddrFieldNumber;
const int ListenDef::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenDef::ListenDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsListenDef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ListenDef)
}
ListenDef::ListenDef(const ListenDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.has_svr_id()) {
    svr_id_ = new ::Pb::ServerID(*from.svr_id_);
  } else {
    svr_id_ = NULL;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Pb.ListenDef)
}

void ListenDef::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&svr_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&svr_id_)) + sizeof(port_));
  _cached_size_ = 0;
}

ListenDef::~ListenDef() {
  // @@protoc_insertion_point(destructor:Pb.ListenDef)
  SharedDtor();
}

void ListenDef::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete svr_id_;
}

void ListenDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListenDef::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListenDef& ListenDef::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsListenDef();
  return *internal_default_instance();
}

ListenDef* ListenDef::New(::google::protobuf::Arena* arena) const {
  ListenDef* n = new ListenDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListenDef::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ListenDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && svr_id_ != NULL) {
    delete svr_id_;
  }
  svr_id_ = NULL;
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool ListenDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ListenDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Pb.ServerID svr_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_svr_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.ListenDef.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ListenDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ListenDef)
  return false;
#undef DO_
}

void ListenDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ListenDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->svr_id_, output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.ListenDef.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ListenDef)
}

::google::protobuf::uint8* ListenDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ListenDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->svr_id_, deterministic, target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.ListenDef.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ListenDef)
  return target;
}

size_t ListenDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ListenDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // .Pb.ServerID svr_id = 1;
  if (this->has_svr_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->svr_id_);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListenDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ListenDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListenDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ListenDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ListenDef)
    MergeFrom(*source);
  }
}

void ListenDef::MergeFrom(const ListenDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ListenDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.has_svr_id()) {
    mutable_svr_id()->::Pb::ServerID::MergeFrom(from.svr_id());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ListenDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ListenDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenDef::CopyFrom(const ListenDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ListenDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenDef::IsInitialized() const {
  return true;
}

void ListenDef::Swap(ListenDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenDef::InternalSwap(ListenDef* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(svr_id_, other->svr_id_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListenDef::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryListenServer::InitAsDefaultInstance() {
  ::Pb::_QueryListenServer_default_instance_._instance.get_mutable()->req_server_id_ = const_cast< ::Pb::ServerID*>(
      ::Pb::ServerID::internal_default_instance());
}
void QueryListenServer::clear_req_server_id() {
  if (GetArenaNoVirtual() == NULL && req_server_id_ != NULL) {
    delete req_server_id_;
  }
  req_server_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryListenServer::kReqServerIdFieldNumber;
const int QueryListenServer::kAcpcServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryListenServer::QueryListenServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsQueryListenServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.QueryListenServer)
}
QueryListenServer::QueryListenServer(const QueryListenServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      acpc_servers_(from.acpc_servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req_server_id()) {
    req_server_id_ = new ::Pb::ServerID(*from.req_server_id_);
  } else {
    req_server_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Pb.QueryListenServer)
}

void QueryListenServer::SharedCtor() {
  req_server_id_ = NULL;
  _cached_size_ = 0;
}

QueryListenServer::~QueryListenServer() {
  // @@protoc_insertion_point(destructor:Pb.QueryListenServer)
  SharedDtor();
}

void QueryListenServer::SharedDtor() {
  if (this != internal_default_instance()) delete req_server_id_;
}

void QueryListenServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryListenServer::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryListenServer& QueryListenServer::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsQueryListenServer();
  return *internal_default_instance();
}

QueryListenServer* QueryListenServer::New(::google::protobuf::Arena* arena) const {
  QueryListenServer* n = new QueryListenServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryListenServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.QueryListenServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acpc_servers_.Clear();
  if (GetArenaNoVirtual() == NULL && req_server_id_ != NULL) {
    delete req_server_id_;
  }
  req_server_id_ = NULL;
  _internal_metadata_.Clear();
}

bool QueryListenServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.QueryListenServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Pb.ServerID req_server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req_server_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.ListenDef acpc_servers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_acpc_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.QueryListenServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.QueryListenServer)
  return false;
#undef DO_
}

void QueryListenServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.QueryListenServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID req_server_id = 1;
  if (this->has_req_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->req_server_id_, output);
  }

  // repeated .Pb.ListenDef acpc_servers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acpc_servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acpc_servers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.QueryListenServer)
}

::google::protobuf::uint8* QueryListenServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.QueryListenServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb.ServerID req_server_id = 1;
  if (this->has_req_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->req_server_id_, deterministic, target);
  }

  // repeated .Pb.ListenDef acpc_servers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acpc_servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->acpc_servers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.QueryListenServer)
  return target;
}

size_t QueryListenServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.QueryListenServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.ListenDef acpc_servers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->acpc_servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acpc_servers(static_cast<int>(i)));
    }
  }

  // .Pb.ServerID req_server_id = 1;
  if (this->has_req_server_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->req_server_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryListenServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.QueryListenServer)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryListenServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryListenServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.QueryListenServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.QueryListenServer)
    MergeFrom(*source);
  }
}

void QueryListenServer::MergeFrom(const QueryListenServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.QueryListenServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acpc_servers_.MergeFrom(from.acpc_servers_);
  if (from.has_req_server_id()) {
    mutable_req_server_id()->::Pb::ServerID::MergeFrom(from.req_server_id());
  }
}

void QueryListenServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.QueryListenServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryListenServer::CopyFrom(const QueryListenServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.QueryListenServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryListenServer::IsInitialized() const {
  return true;
}

void QueryListenServer::Swap(QueryListenServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryListenServer::InternalSwap(QueryListenServer* other) {
  using std::swap;
  acpc_servers_.InternalSwap(&other->acpc_servers_);
  swap(req_server_id_, other->req_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryListenServer::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TpaRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpaRole::kRoleIdFieldNumber;
const int TpaRole::kPlayerIdFieldNumber;
const int TpaRole::kSeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpaRole::TpaRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsTpaRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.TpaRole)
}
TpaRole::TpaRole(const TpaRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seat_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(seat_));
  // @@protoc_insertion_point(copy_constructor:Pb.TpaRole)
}

void TpaRole::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(seat_));
  _cached_size_ = 0;
}

TpaRole::~TpaRole() {
  // @@protoc_insertion_point(destructor:Pb.TpaRole)
  SharedDtor();
}

void TpaRole::SharedDtor() {
}

void TpaRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpaRole::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TpaRole& TpaRole::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsTpaRole();
  return *internal_default_instance();
}

TpaRole* TpaRole::New(::google::protobuf::Arena* arena) const {
  TpaRole* n = new TpaRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpaRole::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.TpaRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(seat_));
  _internal_metadata_.Clear();
}

bool TpaRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.TpaRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.TpaRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.TpaRole)
  return false;
#undef DO_
}

void TpaRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.TpaRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.TpaRole)
}

::google::protobuf::uint8* TpaRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.TpaRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.TpaRole)
  return target;
}

size_t TpaRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.TpaRole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpaRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.TpaRole)
  GOOGLE_DCHECK_NE(&from, this);
  const TpaRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TpaRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.TpaRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.TpaRole)
    MergeFrom(*source);
  }
}

void TpaRole::MergeFrom(const TpaRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.TpaRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
}

void TpaRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.TpaRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpaRole::CopyFrom(const TpaRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.TpaRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpaRole::IsInitialized() const {
  return true;
}

void TpaRole::Swap(TpaRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpaRole::InternalSwap(TpaRole* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(role_id_, other->role_id_);
  swap(seat_, other->seat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TpaRole::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TpaUserLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpaUserLogin::kTpaRoomIdFieldNumber;
const int TpaUserLogin::kGameTypeFieldNumber;
const int TpaUserLogin::kTpaRoleListFieldNumber;
const int TpaUserLogin::kAcpcServerIdFieldNumber;
const int TpaUserLogin::kAcpcServerIpFieldNumber;
const int TpaUserLogin::kAcpcServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpaUserLogin::TpaUserLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsTpaUserLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.TpaUserLogin)
}
TpaUserLogin::TpaUserLogin(const TpaUserLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tpa_role_list_(from.tpa_role_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acpc_server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acpc_server_ip().size() > 0) {
    acpc_server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acpc_server_ip_);
  }
  ::memcpy(&tpa_room_id_, &from.tpa_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&acpc_server_port_) -
    reinterpret_cast<char*>(&tpa_room_id_)) + sizeof(acpc_server_port_));
  // @@protoc_insertion_point(copy_constructor:Pb.TpaUserLogin)
}

void TpaUserLogin::SharedCtor() {
  acpc_server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tpa_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acpc_server_port_) -
      reinterpret_cast<char*>(&tpa_room_id_)) + sizeof(acpc_server_port_));
  _cached_size_ = 0;
}

TpaUserLogin::~TpaUserLogin() {
  // @@protoc_insertion_point(destructor:Pb.TpaUserLogin)
  SharedDtor();
}

void TpaUserLogin::SharedDtor() {
  acpc_server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TpaUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpaUserLogin::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TpaUserLogin& TpaUserLogin::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsTpaUserLogin();
  return *internal_default_instance();
}

TpaUserLogin* TpaUserLogin::New(::google::protobuf::Arena* arena) const {
  TpaUserLogin* n = new TpaUserLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpaUserLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.TpaUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpa_role_list_.Clear();
  acpc_server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tpa_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acpc_server_port_) -
      reinterpret_cast<char*>(&tpa_room_id_)) + sizeof(acpc_server_port_));
  _internal_metadata_.Clear();
}

bool TpaUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.TpaUserLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tpa_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.TpaRole tpa_role_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tpa_role_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 acpc_server_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acpc_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string acpc_server_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acpc_server_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acpc_server_ip().data(), static_cast<int>(this->acpc_server_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.TpaUserLogin.acpc_server_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 acpc_server_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acpc_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.TpaUserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.TpaUserLogin)
  return false;
#undef DO_
}

void TpaUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.TpaUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tpa_room_id = 1;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tpa_room_id(), output);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // repeated .Pb.TpaRole tpa_role_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tpa_role_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tpa_role_list(static_cast<int>(i)), output);
  }

  // uint32 acpc_server_id = 4;
  if (this->acpc_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->acpc_server_id(), output);
  }

  // string acpc_server_ip = 5;
  if (this->acpc_server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acpc_server_ip().data(), static_cast<int>(this->acpc_server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.TpaUserLogin.acpc_server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->acpc_server_ip(), output);
  }

  // uint32 acpc_server_port = 6;
  if (this->acpc_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->acpc_server_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.TpaUserLogin)
}

::google::protobuf::uint8* TpaUserLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.TpaUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tpa_room_id = 1;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tpa_room_id(), target);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // repeated .Pb.TpaRole tpa_role_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tpa_role_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tpa_role_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 acpc_server_id = 4;
  if (this->acpc_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->acpc_server_id(), target);
  }

  // string acpc_server_ip = 5;
  if (this->acpc_server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acpc_server_ip().data(), static_cast<int>(this->acpc_server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.TpaUserLogin.acpc_server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->acpc_server_ip(), target);
  }

  // uint32 acpc_server_port = 6;
  if (this->acpc_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->acpc_server_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.TpaUserLogin)
  return target;
}

size_t TpaUserLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.TpaUserLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.TpaRole tpa_role_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tpa_role_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tpa_role_list(static_cast<int>(i)));
    }
  }

  // string acpc_server_ip = 5;
  if (this->acpc_server_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acpc_server_ip());
  }

  // uint32 tpa_room_id = 1;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 acpc_server_id = 4;
  if (this->acpc_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acpc_server_id());
  }

  // uint32 acpc_server_port = 6;
  if (this->acpc_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acpc_server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpaUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.TpaUserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const TpaUserLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TpaUserLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.TpaUserLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.TpaUserLogin)
    MergeFrom(*source);
  }
}

void TpaUserLogin::MergeFrom(const TpaUserLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.TpaUserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpa_role_list_.MergeFrom(from.tpa_role_list_);
  if (from.acpc_server_ip().size() > 0) {

    acpc_server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acpc_server_ip_);
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.acpc_server_id() != 0) {
    set_acpc_server_id(from.acpc_server_id());
  }
  if (from.acpc_server_port() != 0) {
    set_acpc_server_port(from.acpc_server_port());
  }
}

void TpaUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.TpaUserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpaUserLogin::CopyFrom(const TpaUserLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.TpaUserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpaUserLogin::IsInitialized() const {
  return true;
}

void TpaUserLogin::Swap(TpaUserLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpaUserLogin::InternalSwap(TpaUserLogin* other) {
  using std::swap;
  tpa_role_list_.InternalSwap(&other->tpa_role_list_);
  acpc_server_ip_.Swap(&other->acpc_server_ip_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(game_type_, other->game_type_);
  swap(acpc_server_id_, other->acpc_server_id_);
  swap(acpc_server_port_, other->acpc_server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TpaUserLogin::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
