// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ltpa.proto

#include "ltpa.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class LTPAPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTPAPlayer>
      _instance;
} _LTPAPlayer_default_instance_;
class LTPAPlayerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTPAPlayerState>
      _instance;
} _LTPAPlayerState_default_instance_;
class LTPAPlayerActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTPAPlayerAction>
      _instance;
} _LTPAPlayerAction_default_instance_;
class LTPAPlayerCardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTPAPlayerCards>
      _instance;
} _LTPAPlayerCards_default_instance_;
class LTpaEnterRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaEnterRoomReq>
      _instance;
} _LTpaEnterRoomReq_default_instance_;
class LTpaEnterRoomRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaEnterRoomResp>
      _instance;
} _LTpaEnterRoomResp_default_instance_;
class LTpaAIEnterRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaAIEnterRoomReq>
      _instance;
} _LTpaAIEnterRoomReq_default_instance_;
class LTpaAIEnterRoomRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaAIEnterRoomResp>
      _instance;
} _LTpaAIEnterRoomResp_default_instance_;
class LTpaLeaveRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaLeaveRoomReq>
      _instance;
} _LTpaLeaveRoomReq_default_instance_;
class LTpaLeaveRoomRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaLeaveRoomResp>
      _instance;
} _LTpaLeaveRoomResp_default_instance_;
class LTpaNotifyDestroyRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaNotifyDestroyRoom>
      _instance;
} _LTpaNotifyDestroyRoom_default_instance_;
class LTpaSetPlayerStateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaSetPlayerStateReq>
      _instance;
} _LTpaSetPlayerStateReq_default_instance_;
class LTpaSetPlayerStateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaSetPlayerStateResp>
      _instance;
} _LTpaSetPlayerStateResp_default_instance_;
class LTpaSetDealerReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaSetDealerReq>
      _instance;
} _LTpaSetDealerReq_default_instance_;
class LTpaSetDealerRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaSetDealerResp>
      _instance;
} _LTpaSetDealerResp_default_instance_;
class LTpaQueryCardsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryCardsReq>
      _instance;
} _LTpaQueryCardsReq_default_instance_;
class LTpaQueryCardsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryCardsResp>
      _instance;
} _LTpaQueryCardsResp_default_instance_;
class LTpaQueryAllowActionReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryAllowActionReq>
      _instance;
} _LTpaQueryAllowActionReq_default_instance_;
class LTpaQueryAllowActionRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryAllowActionResp>
      _instance;
} _LTpaQueryAllowActionResp_default_instance_;
class LTpaQueryMatchStateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryMatchStateReq>
      _instance;
} _LTpaQueryMatchStateReq_default_instance_;
class LTpaQueryMatchStateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryMatchStateResp>
      _instance;
} _LTpaQueryMatchStateResp_default_instance_;
class LTpaReportActionTokenReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaReportActionTokenReq>
      _instance;
} _LTpaReportActionTokenReq_default_instance_;
class LTpaReportActionTokenRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaReportActionTokenResp>
      _instance;
} _LTpaReportActionTokenResp_default_instance_;
class LTpaReportPlayerActionReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaReportPlayerActionReq>
      _instance;
} _LTpaReportPlayerActionReq_default_instance_;
class LTpaReportPlayerActionRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaReportPlayerActionResp>
      _instance;
} _LTpaReportPlayerActionResp_default_instance_;
class LTpaQueryAIActionReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryAIActionReq>
      _instance;
} _LTpaQueryAIActionReq_default_instance_;
class LTpaQueryAIActionRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LTpaQueryAIActionResp>
      _instance;
} _LTpaQueryAIActionResp_default_instance_;
class TpaRedisPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TpaRedisPlayer>
      _instance;
} _TpaRedisPlayer_default_instance_;
class TpaRedisPlayerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TpaRedisPlayerList>
      _instance;
} _TpaRedisPlayerList_default_instance_;
class TpaAcpcMatchStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TpaAcpcMatchState>
      _instance;
} _TpaAcpcMatchState_default_instance_;
class RoomAttrForTpaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomAttrForTpa>
      _instance;
} _RoomAttrForTpa_default_instance_;
}  // namespace Pb
namespace protobuf_ltpa_2eproto {
void InitDefaultsLTPAPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTPAPlayer_default_instance_;
    new (ptr) ::Pb::LTPAPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTPAPlayer::InitAsDefaultInstance();
}

void InitDefaultsLTPAPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTPAPlayerImpl);
}

void InitDefaultsLTPAPlayerStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTPAPlayerState_default_instance_;
    new (ptr) ::Pb::LTPAPlayerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTPAPlayerState::InitAsDefaultInstance();
}

void InitDefaultsLTPAPlayerState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTPAPlayerStateImpl);
}

void InitDefaultsLTPAPlayerActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTPAPlayerAction_default_instance_;
    new (ptr) ::Pb::LTPAPlayerAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTPAPlayerAction::InitAsDefaultInstance();
}

void InitDefaultsLTPAPlayerAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTPAPlayerActionImpl);
}

void InitDefaultsLTPAPlayerCardsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTPAPlayerCards_default_instance_;
    new (ptr) ::Pb::LTPAPlayerCards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTPAPlayerCards::InitAsDefaultInstance();
}

void InitDefaultsLTPAPlayerCards() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTPAPlayerCardsImpl);
}

void InitDefaultsLTpaEnterRoomReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaEnterRoomReq_default_instance_;
    new (ptr) ::Pb::LTpaEnterRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaEnterRoomReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaEnterRoomReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaEnterRoomReqImpl);
}

void InitDefaultsLTpaEnterRoomRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaEnterRoomResp_default_instance_;
    new (ptr) ::Pb::LTpaEnterRoomResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaEnterRoomResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaEnterRoomResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaEnterRoomRespImpl);
}

void InitDefaultsLTpaAIEnterRoomReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaAIEnterRoomReq_default_instance_;
    new (ptr) ::Pb::LTpaAIEnterRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaAIEnterRoomReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaAIEnterRoomReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaAIEnterRoomReqImpl);
}

void InitDefaultsLTpaAIEnterRoomRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaAIEnterRoomResp_default_instance_;
    new (ptr) ::Pb::LTpaAIEnterRoomResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaAIEnterRoomResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaAIEnterRoomResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaAIEnterRoomRespImpl);
}

void InitDefaultsLTpaLeaveRoomReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaLeaveRoomReq_default_instance_;
    new (ptr) ::Pb::LTpaLeaveRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaLeaveRoomReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaLeaveRoomReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaLeaveRoomReqImpl);
}

void InitDefaultsLTpaLeaveRoomRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaLeaveRoomResp_default_instance_;
    new (ptr) ::Pb::LTpaLeaveRoomResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaLeaveRoomResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaLeaveRoomResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaLeaveRoomRespImpl);
}

void InitDefaultsLTpaNotifyDestroyRoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaNotifyDestroyRoom_default_instance_;
    new (ptr) ::Pb::LTpaNotifyDestroyRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaNotifyDestroyRoom::InitAsDefaultInstance();
}

void InitDefaultsLTpaNotifyDestroyRoom() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaNotifyDestroyRoomImpl);
}

void InitDefaultsLTpaSetPlayerStateReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaSetPlayerStateReq_default_instance_;
    new (ptr) ::Pb::LTpaSetPlayerStateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaSetPlayerStateReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaSetPlayerStateReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaSetPlayerStateReqImpl);
}

void InitDefaultsLTpaSetPlayerStateRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  {
    void* ptr = &::Pb::_LTpaSetPlayerStateResp_default_instance_;
    new (ptr) ::Pb::LTpaSetPlayerStateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaSetPlayerStateResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaSetPlayerStateResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaSetPlayerStateRespImpl);
}

void InitDefaultsLTpaSetDealerReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaSetDealerReq_default_instance_;
    new (ptr) ::Pb::LTpaSetDealerReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaSetDealerReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaSetDealerReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaSetDealerReqImpl);
}

void InitDefaultsLTpaSetDealerRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerState();
  {
    void* ptr = &::Pb::_LTpaSetDealerResp_default_instance_;
    new (ptr) ::Pb::LTpaSetDealerResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaSetDealerResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaSetDealerResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaSetDealerRespImpl);
}

void InitDefaultsLTpaQueryCardsReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaQueryCardsReq_default_instance_;
    new (ptr) ::Pb::LTpaQueryCardsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryCardsReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryCardsReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryCardsReqImpl);
}

void InitDefaultsLTpaQueryCardsRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerCards();
  {
    void* ptr = &::Pb::_LTpaQueryCardsResp_default_instance_;
    new (ptr) ::Pb::LTpaQueryCardsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryCardsResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryCardsResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryCardsRespImpl);
}

void InitDefaultsLTpaQueryAllowActionReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaQueryAllowActionReq_default_instance_;
    new (ptr) ::Pb::LTpaQueryAllowActionReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryAllowActionReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryAllowActionReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryAllowActionReqImpl);
}

void InitDefaultsLTpaQueryAllowActionRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaQueryAllowActionResp_default_instance_;
    new (ptr) ::Pb::LTpaQueryAllowActionResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryAllowActionResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryAllowActionResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryAllowActionRespImpl);
}

void InitDefaultsLTpaQueryMatchStateReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaQueryMatchStateReq_default_instance_;
    new (ptr) ::Pb::LTpaQueryMatchStateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryMatchStateReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryMatchStateReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryMatchStateReqImpl);
}

void InitDefaultsLTpaQueryMatchStateRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerState();
  protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerAction();
  {
    void* ptr = &::Pb::_LTpaQueryMatchStateResp_default_instance_;
    new (ptr) ::Pb::LTpaQueryMatchStateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryMatchStateResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryMatchStateResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryMatchStateRespImpl);
}

void InitDefaultsLTpaReportActionTokenReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaReportActionTokenReq_default_instance_;
    new (ptr) ::Pb::LTpaReportActionTokenReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaReportActionTokenReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaReportActionTokenReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaReportActionTokenReqImpl);
}

void InitDefaultsLTpaReportActionTokenRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaReportActionTokenResp_default_instance_;
    new (ptr) ::Pb::LTpaReportActionTokenResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaReportActionTokenResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaReportActionTokenResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaReportActionTokenRespImpl);
}

void InitDefaultsLTpaReportPlayerActionReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaReportPlayerActionReq_default_instance_;
    new (ptr) ::Pb::LTpaReportPlayerActionReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaReportPlayerActionReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaReportPlayerActionReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaReportPlayerActionReqImpl);
}

void InitDefaultsLTpaReportPlayerActionRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaReportPlayerActionResp_default_instance_;
    new (ptr) ::Pb::LTpaReportPlayerActionResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaReportPlayerActionResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaReportPlayerActionResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaReportPlayerActionRespImpl);
}

void InitDefaultsLTpaQueryAIActionReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaQueryAIActionReq_default_instance_;
    new (ptr) ::Pb::LTpaQueryAIActionReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryAIActionReq::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryAIActionReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryAIActionReqImpl);
}

void InitDefaultsLTpaQueryAIActionRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_LTpaQueryAIActionResp_default_instance_;
    new (ptr) ::Pb::LTpaQueryAIActionResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::LTpaQueryAIActionResp::InitAsDefaultInstance();
}

void InitDefaultsLTpaQueryAIActionResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLTpaQueryAIActionRespImpl);
}

void InitDefaultsTpaRedisPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_TpaRedisPlayer_default_instance_;
    new (ptr) ::Pb::TpaRedisPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::TpaRedisPlayer::InitAsDefaultInstance();
}

void InitDefaultsTpaRedisPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTpaRedisPlayerImpl);
}

void InitDefaultsTpaRedisPlayerListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ltpa_2eproto::InitDefaultsTpaRedisPlayer();
  {
    void* ptr = &::Pb::_TpaRedisPlayerList_default_instance_;
    new (ptr) ::Pb::TpaRedisPlayerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::TpaRedisPlayerList::InitAsDefaultInstance();
}

void InitDefaultsTpaRedisPlayerList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTpaRedisPlayerListImpl);
}

void InitDefaultsTpaAcpcMatchStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcRound();
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  protobuf_system_2eproto::InitDefaultsHoleCards();
  {
    void* ptr = &::Pb::_TpaAcpcMatchState_default_instance_;
    new (ptr) ::Pb::TpaAcpcMatchState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::TpaAcpcMatchState::InitAsDefaultInstance();
}

void InitDefaultsTpaAcpcMatchState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTpaAcpcMatchStateImpl);
}

void InitDefaultsRoomAttrForTpaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RoomAttrForTpa_default_instance_;
    new (ptr) ::Pb::RoomAttrForTpa();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoomAttrForTpa::InitAsDefaultInstance();
}

void InitDefaultsRoomAttrForTpa() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomAttrForTpaImpl);
}

::google::protobuf::Metadata file_level_metadata[31];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayer, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayer, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayer, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayer, is_ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayer, money_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, fold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerState, hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerAction, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerCards, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTPAPlayerCards, hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomReq, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomReq, player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomReq, tpa_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomResp, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaEnterRoomResp, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomReq, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomReq, player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomReq, constant_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomResp, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomResp, player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaAIEnterRoomResp, constant_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomReq, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaLeaveRoomResp, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaNotifyDestroyRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaNotifyDestroyRoom, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaNotifyDestroyRoom, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaNotifyDestroyRoom, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateReq, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetPlayerStateResp, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerReq, dealer_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerReq, dealer_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerReq, dealer_seat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, dealer_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, dealer_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaSetDealerResp, player_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsReq, round_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, flop_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, turn_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, river_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, player_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryCardsResp, dealer_role_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionReq, player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionResp, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAllowActionResp, allow_raise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateReq, round_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, dealer_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, flop_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, turn_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, river_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, allow_raise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, player_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, player_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryMatchStateResp, turn_role_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenReq, player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportActionTokenResp, player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionReq, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaReportPlayerActionResp, allow_raise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionReq, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionReq, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionReq, player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::LTpaQueryAIActionResp, allow_raise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRedisPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRedisPlayer, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRedisPlayer, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRedisPlayer, seat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRedisPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaRedisPlayerList, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, local_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, role_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, little_blind_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, min_nolimit_raise_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, round_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, fold_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, board_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::TpaAcpcMatchState, player_hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttrForTpa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttrForTpa, tpa_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttrForTpa, tpa_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttrForTpa, wait_robot_aciton_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::LTPAPlayer)},
  { 10, -1, sizeof(::Pb::LTPAPlayerState)},
  { 21, -1, sizeof(::Pb::LTPAPlayerAction)},
  { 32, -1, sizeof(::Pb::LTPAPlayerCards)},
  { 39, -1, sizeof(::Pb::LTpaEnterRoomReq)},
  { 49, -1, sizeof(::Pb::LTpaEnterRoomResp)},
  { 58, -1, sizeof(::Pb::LTpaAIEnterRoomReq)},
  { 68, -1, sizeof(::Pb::LTpaAIEnterRoomResp)},
  { 78, -1, sizeof(::Pb::LTpaLeaveRoomReq)},
  { 86, -1, sizeof(::Pb::LTpaLeaveRoomResp)},
  { 94, -1, sizeof(::Pb::LTpaNotifyDestroyRoom)},
  { 102, -1, sizeof(::Pb::LTpaSetPlayerStateReq)},
  { 110, -1, sizeof(::Pb::LTpaSetPlayerStateResp)},
  { 118, -1, sizeof(::Pb::LTpaSetDealerReq)},
  { 128, -1, sizeof(::Pb::LTpaSetDealerResp)},
  { 140, -1, sizeof(::Pb::LTpaQueryCardsReq)},
  { 148, -1, sizeof(::Pb::LTpaQueryCardsResp)},
  { 162, -1, sizeof(::Pb::LTpaQueryAllowActionReq)},
  { 171, -1, sizeof(::Pb::LTpaQueryAllowActionResp)},
  { 181, -1, sizeof(::Pb::LTpaQueryMatchStateReq)},
  { 189, -1, sizeof(::Pb::LTpaQueryMatchStateResp)},
  { 208, -1, sizeof(::Pb::LTpaReportActionTokenReq)},
  { 217, -1, sizeof(::Pb::LTpaReportActionTokenResp)},
  { 226, -1, sizeof(::Pb::LTpaReportPlayerActionReq)},
  { 237, -1, sizeof(::Pb::LTpaReportPlayerActionResp)},
  { 249, -1, sizeof(::Pb::LTpaQueryAIActionReq)},
  { 258, -1, sizeof(::Pb::LTpaQueryAIActionResp)},
  { 270, -1, sizeof(::Pb::TpaRedisPlayer)},
  { 278, -1, sizeof(::Pb::TpaRedisPlayerList)},
  { 284, -1, sizeof(::Pb::TpaAcpcMatchState)},
  { 305, -1, sizeof(::Pb::RoomAttrForTpa)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTPAPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTPAPlayerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTPAPlayerAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTPAPlayerCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaEnterRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaEnterRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaAIEnterRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaAIEnterRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaLeaveRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaLeaveRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaNotifyDestroyRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaSetPlayerStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaSetPlayerStateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaSetDealerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaSetDealerResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryCardsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryCardsResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryAllowActionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryAllowActionResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryMatchStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryMatchStateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaReportActionTokenReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaReportActionTokenResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaReportPlayerActionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaReportPlayerActionResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryAIActionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_LTpaQueryAIActionResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_TpaRedisPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_TpaRedisPlayerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_TpaAcpcMatchState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoomAttrForTpa_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ltpa.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nltpa.proto\022\002Pb\032\014system.proto\"_\n\nLTPAPl"
      "ayer\022\017\n\007role_id\030\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\004"
      "\022\014\n\004seat\030\003 \001(\005\022\020\n\010is_ready\030\004 \001(\005\022\r\n\005mone"
      "y\030\005 \001(\005\"t\n\017LTPAPlayerState\022\017\n\007role_id\030\001 "
      "\001(\r\022\021\n\tplayer_id\030\002 \001(\004\022\014\n\004seat\030\003 \001(\005\022\r\n\005"
      "spent\030\004 \001(\r\022\014\n\004fold\030\005 \001(\r\022\022\n\nhole_cards\030"
      "\006 \003(\005\"o\n\020LTPAPlayerAction\022\017\n\007role_id\030\001 \001"
      "(\r\022\021\n\tplayer_id\030\002 \001(\004\022\014\n\004seat\030\003 \001(\005\022\r\n\005r"
      "ound\030\004 \001(\005\022\014\n\004type\030\005 \001(\r\022\014\n\004size\030\006 \001(\005\"6"
      "\n\017LTPAPlayerCards\022\017\n\007role_id\030\001 \001(\r\022\022\n\nho"
      "le_cards\030\002 \003(\005\"\215\001\n\020LTpaEnterRoomReq\022\025\n\rl"
      "ocal_room_id\030\001 \001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022"
      "\021\n\tgame_type\030\003 \001(\r\022#\n\013player_list\030\004 \003(\0132"
      "\016.Pb.LTPAPlayer\022\025\n\rtpa_server_id\030\005 \001(\r\"w"
      "\n\021LTpaEnterRoomResp\022\025\n\rlocal_room_id\030\001 \001"
      "(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022\021\n\tgame_type\030\003 \001"
      "(\r\022#\n\013player_list\030\004 \003(\0132\016.Pb.LTPAPlayer\""
      "\220\001\n\022LTpaAIEnterRoomReq\022\025\n\rlocal_room_id\030"
      "\001 \001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022\021\n\tgame_type\030"
      "\003 \001(\r\022#\n\013player_list\030\004 \003(\0132\016.Pb.LTPAPlay"
      "er\022\026\n\016constant_token\030\005 \001(\t\"\221\001\n\023LTpaAIEnt"
      "erRoomResp\022\025\n\rlocal_room_id\030\001 \001(\004\022\023\n\013tpa"
      "_room_id\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022#\n\013pla"
      "yer_list\030\004 \003(\0132\016.Pb.LTPAPlayer\022\026\n\016consta"
      "nt_token\030\005 \001(\t\"c\n\020LTpaLeaveRoomReq\022\025\n\rlo"
      "cal_room_id\030\001 \001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022#"
      "\n\013player_list\030\003 \003(\0132\016.Pb.LTPAPlayer\"d\n\021L"
      "TpaLeaveRoomResp\022\025\n\rlocal_room_id\030\001 \001(\004\022"
      "\023\n\013tpa_room_id\030\002 \001(\r\022#\n\013player_list\030\003 \003("
      "\0132\016.Pb.LTPAPlayer\"S\n\025LTpaNotifyDestroyRo"
      "om\022\025\n\rlocal_room_id\030\001 \001(\004\022\023\n\013tpa_room_id"
      "\030\002 \001(\r\022\016\n\006reason\030\003 \001(\r\"h\n\025LTpaSetPlayerS"
      "tateReq\022\025\n\rlocal_room_id\030\001 \001(\004\022\023\n\013tpa_ro"
      "om_id\030\002 \001(\r\022#\n\013player_list\030\003 \003(\0132\016.Pb.LT"
      "PAPlayer\"i\n\026LTpaSetPlayerStateResp\022\025\n\rlo"
      "cal_room_id\030\001 \001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022#"
      "\n\013player_list\030\003 \003(\0132\016.Pb.LTPAPlayer\"\205\001\n\020"
      "LTpaSetDealerReq\022\025\n\rlocal_room_id\030\001 \001(\004\022"
      "\026\n\016dealer_role_id\030\002 \001(\r\022\023\n\013tpa_room_id\030\003"
      " \001(\r\022\030\n\020dealer_player_id\030\004 \001(\004\022\023\n\013dealer"
      "_seat\030\005 \001(\005\"\300\001\n\021LTpaSetDealerResp\022\025\n\rloc"
      "al_room_id\030\001 \001(\004\022\026\n\016dealer_role_id\030\002 \001(\r"
      "\022\023\n\013tpa_room_id\030\003 \001(\r\022\030\n\020dealer_player_i"
      "d\030\004 \001(\004\022\017\n\007hand_id\030\005 \001(\r\022\021\n\tmax_spent\030\006 "
      "\001(\r\022)\n\014player_state\030\007 \003(\0132\023.Pb.LTPAPlaye"
      "rState\"N\n\021LTpaQueryCardsReq\022\025\n\rlocal_roo"
      "m_id\030\001 \001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022\r\n\005round"
      "\030\003 \001(\005\"\341\001\n\022LTpaQueryCardsResp\022\025\n\rlocal_r"
      "oom_id\030\001 \001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022\r\n\005rou"
      "nd\030\003 \001(\005\022\020\n\010finished\030\004 \001(\r\022\022\n\nflop_cards"
      "\030\005 \003(\005\022\022\n\nturn_cards\030\006 \003(\005\022\023\n\013river_card"
      "s\030\007 \003(\005\022)\n\014player_cards\030\010 \003(\0132\023.Pb.LTPAP"
      "layerCards\022\026\n\016dealer_role_id\030\t \001(\r\"i\n\027LT"
      "paQueryAllowActionReq\022\025\n\rlocal_room_id\030\001"
      " \001(\004\022\017\n\007role_id\030\002 \001(\r\022\023\n\013tpa_room_id\030\003 \001"
      "(\r\022\021\n\tplayer_id\030\004 \001(\004\"\177\n\030LTpaQueryAllowA"
      "ctionResp\022\025\n\rlocal_room_id\030\001 \001(\004\022\017\n\007role"
      "_id\030\002 \001(\r\022\023\n\013tpa_room_id\030\003 \001(\r\022\021\n\tplayer"
      "_id\030\004 \001(\004\022\023\n\013allow_raise\030\005 \003(\r\"S\n\026LTpaQu"
      "eryMatchStateReq\022\025\n\rlocal_room_id\030\001 \001(\004\022"
      "\023\n\013tpa_room_id\030\002 \001(\r\022\r\n\005round\030\003 \001(\005\"\342\002\n\027"
      "LTpaQueryMatchStateResp\022\025\n\rlocal_room_id"
      "\030\001 \001(\004\022\026\n\016dealer_role_id\030\002 \001(\r\022\023\n\013tpa_ro"
      "om_id\030\003 \001(\r\022\017\n\007hand_id\030\004 \001(\r\022\r\n\005round\030\005 "
      "\001(\005\022\020\n\010finished\030\006 \001(\r\022\021\n\tmax_spent\030\007 \001(\r"
      "\022\022\n\nflop_cards\030\010 \003(\005\022\022\n\nturn_cards\030\t \003(\005"
      "\022\023\n\013river_cards\030\n \003(\005\022\023\n\013allow_raise\030\013 \003"
      "(\r\022)\n\014player_state\030\014 \003(\0132\023.Pb.LTPAPlayer"
      "State\022+\n\rplayer_action\030\r \003(\0132\024.Pb.LTPAPl"
      "ayerAction\022\024\n\014turn_role_id\030\016 \001(\r\"j\n\030LTpa"
      "ReportActionTokenReq\022\025\n\rlocal_room_id\030\001 "
      "\001(\004\022\017\n\007role_id\030\002 \001(\r\022\023\n\013tpa_room_id\030\003 \001("
      "\r\022\021\n\tplayer_id\030\004 \001(\004\"k\n\031LTpaReportAction"
      "TokenResp\022\025\n\rlocal_room_id\030\001 \001(\004\022\017\n\007role"
      "_id\030\002 \001(\r\022\023\n\013tpa_room_id\030\003 \001(\r\022\021\n\tplayer"
      "_id\030\004 \001(\004\"\216\001\n\031LTpaReportPlayerActionReq\022"
      "\025\n\rlocal_room_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\r\022"
      "\023\n\013tpa_room_id\030\003 \001(\r\022\021\n\tplayer_id\030\004 \001(\004\022"
      "\023\n\013action_type\030\005 \001(\r\022\014\n\004size\030\006 \001(\r\"\244\001\n\032L"
      "TpaReportPlayerActionResp\022\025\n\rlocal_room_"
      "id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\r\022\023\n\013tpa_room_id"
      "\030\003 \001(\r\022\021\n\tplayer_id\030\004 \001(\004\022\023\n\013action_type"
      "\030\005 \001(\r\022\014\n\004size\030\006 \001(\r\022\023\n\013allow_raise\030\007 \003("
      "\r\"f\n\024LTpaQueryAIActionReq\022\025\n\rlocal_room_"
      "id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\r\022\023\n\013tpa_room_id"
      "\030\003 \001(\r\022\021\n\tplayer_id\030\004 \001(\004\"\237\001\n\025LTpaQueryA"
      "IActionResp\022\025\n\rlocal_room_id\030\001 \001(\004\022\017\n\007ro"
      "le_id\030\002 \001(\r\022\023\n\013tpa_room_id\030\003 \001(\r\022\021\n\tplay"
      "er_id\030\004 \001(\004\022\023\n\013action_type\030\005 \001(\r\022\014\n\004size"
      "\030\006 \001(\r\022\023\n\013allow_raise\030\007 \003(\r\"B\n\016TpaRedisP"
      "layer\022\021\n\tplayer_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001("
      "\r\022\014\n\004seat\030\003 \001(\r\"=\n\022TpaRedisPlayerList\022\'\n"
      "\013player_list\030\001 \003(\0132\022.Pb.TpaRedisPlayer\"\233"
      "\003\n\021TpaAcpcMatchState\022\025\n\rlocal_room_id\030\001 "
      "\001(\004\022\023\n\013tpa_room_id\030\002 \001(\r\022\017\n\007role_id\030\003 \001("
      "\r\022\021\n\trole_seat\030\004 \001(\005\022\031\n\021little_blind_sea"
      "t\030\005 \001(\005\022\017\n\007hand_id\030\006 \001(\005\022\021\n\tmax_spent\030\007 "
      "\001(\005\022\034\n\024min_nolimit_raise_to\030\010 \001(\005\022\r\n\005rou"
      "nd\030\t \001(\005\022\020\n\010finished\030\n \001(\005\022\r\n\005spent\030\013 \003("
      "\005\022$\n\rround_actions\030\014 \003(\0132\r.Pb.AcpcRound\022"
      "\024\n\014fold_players\030\r \003(\005\022!\n\013board_cards\030\016 \003"
      "(\0132\014.Pb.AcpcCard\022 \n\nhole_cards\030\017 \003(\0132\014.P"
      "b.AcpcCard\022(\n\021player_hole_cards\030\020 \003(\0132\r."
      "Pb.HoleCards\"W\n\016RoomAttrForTpa\022\023\n\013tpa_ro"
      "om_id\030\001 \001(\r\022\025\n\rtpa_server_id\030\002 \001(\r\022\031\n\021wa"
      "it_robot_aciton\030\003 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ltpa.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ltpa_2eproto
namespace Pb {

// ===================================================================

void LTPAPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTPAPlayer::kRoleIdFieldNumber;
const int LTPAPlayer::kPlayerIdFieldNumber;
const int LTPAPlayer::kSeatFieldNumber;
const int LTPAPlayer::kIsReadyFieldNumber;
const int LTPAPlayer::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTPAPlayer::LTPAPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTPAPlayer)
}
LTPAPlayer::LTPAPlayer(const LTPAPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTPAPlayer)
}

void LTPAPlayer::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(money_));
  _cached_size_ = 0;
}

LTPAPlayer::~LTPAPlayer() {
  // @@protoc_insertion_point(destructor:Pb.LTPAPlayer)
  SharedDtor();
}

void LTPAPlayer::SharedDtor() {
}

void LTPAPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTPAPlayer::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTPAPlayer& LTPAPlayer::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayer();
  return *internal_default_instance();
}

LTPAPlayer* LTPAPlayer::New(::google::protobuf::Arena* arena) const {
  LTPAPlayer* n = new LTPAPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTPAPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTPAPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(money_));
  _internal_metadata_.Clear();
}

bool LTPAPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTPAPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_ready = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTPAPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTPAPlayer)
  return false;
#undef DO_
}

void LTPAPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTPAPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // int32 is_ready = 4;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_ready(), output);
  }

  // int32 money = 5;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTPAPlayer)
}

::google::protobuf::uint8* LTPAPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTPAPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }

  // int32 is_ready = 4;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_ready(), target);
  }

  // int32 money = 5;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTPAPlayer)
  return target;
}

size_t LTPAPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTPAPlayer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  // int32 is_ready = 4;
  if (this->is_ready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_ready());
  }

  // int32 money = 5;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTPAPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTPAPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const LTPAPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTPAPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTPAPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTPAPlayer)
    MergeFrom(*source);
  }
}

void LTPAPlayer::MergeFrom(const LTPAPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTPAPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
}

void LTPAPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTPAPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTPAPlayer::CopyFrom(const LTPAPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTPAPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTPAPlayer::IsInitialized() const {
  return true;
}

void LTPAPlayer::Swap(LTPAPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTPAPlayer::InternalSwap(LTPAPlayer* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(role_id_, other->role_id_);
  swap(seat_, other->seat_);
  swap(is_ready_, other->is_ready_);
  swap(money_, other->money_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTPAPlayer::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTPAPlayerState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTPAPlayerState::kRoleIdFieldNumber;
const int LTPAPlayerState::kPlayerIdFieldNumber;
const int LTPAPlayerState::kSeatFieldNumber;
const int LTPAPlayerState::kSpentFieldNumber;
const int LTPAPlayerState::kFoldFieldNumber;
const int LTPAPlayerState::kHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTPAPlayerState::LTPAPlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTPAPlayerState)
}
LTPAPlayerState::LTPAPlayerState(const LTPAPlayerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fold_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(fold_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTPAPlayerState)
}

void LTPAPlayerState::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fold_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(fold_));
  _cached_size_ = 0;
}

LTPAPlayerState::~LTPAPlayerState() {
  // @@protoc_insertion_point(destructor:Pb.LTPAPlayerState)
  SharedDtor();
}

void LTPAPlayerState::SharedDtor() {
}

void LTPAPlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTPAPlayerState::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTPAPlayerState& LTPAPlayerState::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerState();
  return *internal_default_instance();
}

LTPAPlayerState* LTPAPlayerState::New(::google::protobuf::Arena* arena) const {
  LTPAPlayerState* n = new LTPAPlayerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTPAPlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTPAPlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fold_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(fold_));
  _internal_metadata_.Clear();
}

bool LTPAPlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTPAPlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 spent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 hole_cards = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hole_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_hole_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTPAPlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTPAPlayerState)
  return false;
#undef DO_
}

void LTPAPlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTPAPlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // uint32 spent = 4;
  if (this->spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->spent(), output);
  }

  // uint32 fold = 5;
  if (this->fold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fold(), output);
  }

  // repeated int32 hole_cards = 6;
  if (this->hole_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hole_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->hole_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hole_cards(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTPAPlayerState)
}

::google::protobuf::uint8* LTPAPlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTPAPlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }

  // uint32 spent = 4;
  if (this->spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->spent(), target);
  }

  // uint32 fold = 5;
  if (this->fold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fold(), target);
  }

  // repeated int32 hole_cards = 6;
  if (this->hole_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _hole_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->hole_cards_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTPAPlayerState)
  return target;
}

size_t LTPAPlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTPAPlayerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 hole_cards = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->hole_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hole_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  // uint32 spent = 4;
  if (this->spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spent());
  }

  // uint32 fold = 5;
  if (this->fold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTPAPlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTPAPlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const LTPAPlayerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTPAPlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTPAPlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTPAPlayerState)
    MergeFrom(*source);
  }
}

void LTPAPlayerState::MergeFrom(const LTPAPlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTPAPlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
  if (from.spent() != 0) {
    set_spent(from.spent());
  }
  if (from.fold() != 0) {
    set_fold(from.fold());
  }
}

void LTPAPlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTPAPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTPAPlayerState::CopyFrom(const LTPAPlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTPAPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTPAPlayerState::IsInitialized() const {
  return true;
}

void LTPAPlayerState::Swap(LTPAPlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTPAPlayerState::InternalSwap(LTPAPlayerState* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  swap(player_id_, other->player_id_);
  swap(role_id_, other->role_id_);
  swap(seat_, other->seat_);
  swap(spent_, other->spent_);
  swap(fold_, other->fold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTPAPlayerState::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTPAPlayerAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTPAPlayerAction::kRoleIdFieldNumber;
const int LTPAPlayerAction::kPlayerIdFieldNumber;
const int LTPAPlayerAction::kSeatFieldNumber;
const int LTPAPlayerAction::kRoundFieldNumber;
const int LTPAPlayerAction::kTypeFieldNumber;
const int LTPAPlayerAction::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTPAPlayerAction::LTPAPlayerAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTPAPlayerAction)
}
LTPAPlayerAction::LTPAPlayerAction(const LTPAPlayerAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTPAPlayerAction)
}

void LTPAPlayerAction::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(size_));
  _cached_size_ = 0;
}

LTPAPlayerAction::~LTPAPlayerAction() {
  // @@protoc_insertion_point(destructor:Pb.LTPAPlayerAction)
  SharedDtor();
}

void LTPAPlayerAction::SharedDtor() {
}

void LTPAPlayerAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTPAPlayerAction::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTPAPlayerAction& LTPAPlayerAction::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerAction();
  return *internal_default_instance();
}

LTPAPlayerAction* LTPAPlayerAction::New(::google::protobuf::Arena* arena) const {
  LTPAPlayerAction* n = new LTPAPlayerAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTPAPlayerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTPAPlayerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool LTPAPlayerAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTPAPlayerAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTPAPlayerAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTPAPlayerAction)
  return false;
#undef DO_
}

void LTPAPlayerAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTPAPlayerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // int32 round = 4;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->round(), output);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // int32 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTPAPlayerAction)
}

::google::protobuf::uint8* LTPAPlayerAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTPAPlayerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }

  // int32 round = 4;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->round(), target);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // int32 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTPAPlayerAction)
  return target;
}

size_t LTPAPlayerAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTPAPlayerAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 seat = 3;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  // int32 round = 4;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // int32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTPAPlayerAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTPAPlayerAction)
  GOOGLE_DCHECK_NE(&from, this);
  const LTPAPlayerAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTPAPlayerAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTPAPlayerAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTPAPlayerAction)
    MergeFrom(*source);
  }
}

void LTPAPlayerAction::MergeFrom(const LTPAPlayerAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTPAPlayerAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void LTPAPlayerAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTPAPlayerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTPAPlayerAction::CopyFrom(const LTPAPlayerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTPAPlayerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTPAPlayerAction::IsInitialized() const {
  return true;
}

void LTPAPlayerAction::Swap(LTPAPlayerAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTPAPlayerAction::InternalSwap(LTPAPlayerAction* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(role_id_, other->role_id_);
  swap(seat_, other->seat_);
  swap(round_, other->round_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTPAPlayerAction::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTPAPlayerCards::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTPAPlayerCards::kRoleIdFieldNumber;
const int LTPAPlayerCards::kHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTPAPlayerCards::LTPAPlayerCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerCards();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTPAPlayerCards)
}
LTPAPlayerCards::LTPAPlayerCards(const LTPAPlayerCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.LTPAPlayerCards)
}

void LTPAPlayerCards::SharedCtor() {
  role_id_ = 0u;
  _cached_size_ = 0;
}

LTPAPlayerCards::~LTPAPlayerCards() {
  // @@protoc_insertion_point(destructor:Pb.LTPAPlayerCards)
  SharedDtor();
}

void LTPAPlayerCards::SharedDtor() {
}

void LTPAPlayerCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTPAPlayerCards::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTPAPlayerCards& LTPAPlayerCards::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTPAPlayerCards();
  return *internal_default_instance();
}

LTPAPlayerCards* LTPAPlayerCards::New(::google::protobuf::Arena* arena) const {
  LTPAPlayerCards* n = new LTPAPlayerCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTPAPlayerCards::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTPAPlayerCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  role_id_ = 0u;
  _internal_metadata_.Clear();
}

bool LTPAPlayerCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTPAPlayerCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 hole_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hole_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_hole_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTPAPlayerCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTPAPlayerCards)
  return false;
#undef DO_
}

void LTPAPlayerCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTPAPlayerCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated int32 hole_cards = 2;
  if (this->hole_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hole_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->hole_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hole_cards(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTPAPlayerCards)
}

::google::protobuf::uint8* LTPAPlayerCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTPAPlayerCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated int32 hole_cards = 2;
  if (this->hole_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _hole_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->hole_cards_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTPAPlayerCards)
  return target;
}

size_t LTPAPlayerCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTPAPlayerCards)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 hole_cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->hole_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hole_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTPAPlayerCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTPAPlayerCards)
  GOOGLE_DCHECK_NE(&from, this);
  const LTPAPlayerCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTPAPlayerCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTPAPlayerCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTPAPlayerCards)
    MergeFrom(*source);
  }
}

void LTPAPlayerCards::MergeFrom(const LTPAPlayerCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTPAPlayerCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void LTPAPlayerCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTPAPlayerCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTPAPlayerCards::CopyFrom(const LTPAPlayerCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTPAPlayerCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTPAPlayerCards::IsInitialized() const {
  return true;
}

void LTPAPlayerCards::Swap(LTPAPlayerCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTPAPlayerCards::InternalSwap(LTPAPlayerCards* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTPAPlayerCards::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaEnterRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaEnterRoomReq::kLocalRoomIdFieldNumber;
const int LTpaEnterRoomReq::kTpaRoomIdFieldNumber;
const int LTpaEnterRoomReq::kGameTypeFieldNumber;
const int LTpaEnterRoomReq::kPlayerListFieldNumber;
const int LTpaEnterRoomReq::kTpaServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaEnterRoomReq::LTpaEnterRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaEnterRoomReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaEnterRoomReq)
}
LTpaEnterRoomReq::LTpaEnterRoomReq(const LTpaEnterRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_server_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_server_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaEnterRoomReq)
}

void LTpaEnterRoomReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_server_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_server_id_));
  _cached_size_ = 0;
}

LTpaEnterRoomReq::~LTpaEnterRoomReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaEnterRoomReq)
  SharedDtor();
}

void LTpaEnterRoomReq::SharedDtor() {
}

void LTpaEnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaEnterRoomReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaEnterRoomReq& LTpaEnterRoomReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaEnterRoomReq();
  return *internal_default_instance();
}

LTpaEnterRoomReq* LTpaEnterRoomReq::New(::google::protobuf::Arena* arena) const {
  LTpaEnterRoomReq* n = new LTpaEnterRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaEnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_server_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_server_id_));
  _internal_metadata_.Clear();
}

bool LTpaEnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaEnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_server_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaEnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaEnterRoomReq)
  return false;
#undef DO_
}

void LTpaEnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(static_cast<int>(i)), output);
  }

  // uint32 tpa_server_id = 5;
  if (this->tpa_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tpa_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaEnterRoomReq)
}

::google::protobuf::uint8* LTpaEnterRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 tpa_server_id = 5;
  if (this->tpa_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tpa_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaEnterRoomReq)
  return target;
}

size_t LTpaEnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaEnterRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 tpa_server_id = 5;
  if (this->tpa_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaEnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaEnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaEnterRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaEnterRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaEnterRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaEnterRoomReq)
    MergeFrom(*source);
  }
}

void LTpaEnterRoomReq::MergeFrom(const LTpaEnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaEnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.tpa_server_id() != 0) {
    set_tpa_server_id(from.tpa_server_id());
  }
}

void LTpaEnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaEnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaEnterRoomReq::CopyFrom(const LTpaEnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaEnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaEnterRoomReq::IsInitialized() const {
  return true;
}

void LTpaEnterRoomReq::Swap(LTpaEnterRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaEnterRoomReq::InternalSwap(LTpaEnterRoomReq* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(game_type_, other->game_type_);
  swap(tpa_server_id_, other->tpa_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaEnterRoomReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaEnterRoomResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaEnterRoomResp::kLocalRoomIdFieldNumber;
const int LTpaEnterRoomResp::kTpaRoomIdFieldNumber;
const int LTpaEnterRoomResp::kGameTypeFieldNumber;
const int LTpaEnterRoomResp::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaEnterRoomResp::LTpaEnterRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaEnterRoomResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaEnterRoomResp)
}
LTpaEnterRoomResp::LTpaEnterRoomResp(const LTpaEnterRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaEnterRoomResp)
}

void LTpaEnterRoomResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  _cached_size_ = 0;
}

LTpaEnterRoomResp::~LTpaEnterRoomResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaEnterRoomResp)
  SharedDtor();
}

void LTpaEnterRoomResp::SharedDtor() {
}

void LTpaEnterRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaEnterRoomResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaEnterRoomResp& LTpaEnterRoomResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaEnterRoomResp();
  return *internal_default_instance();
}

LTpaEnterRoomResp* LTpaEnterRoomResp::New(::google::protobuf::Arena* arena) const {
  LTpaEnterRoomResp* n = new LTpaEnterRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaEnterRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  _internal_metadata_.Clear();
}

bool LTpaEnterRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaEnterRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaEnterRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaEnterRoomResp)
  return false;
#undef DO_
}

void LTpaEnterRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaEnterRoomResp)
}

::google::protobuf::uint8* LTpaEnterRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaEnterRoomResp)
  return target;
}

size_t LTpaEnterRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaEnterRoomResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaEnterRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaEnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaEnterRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaEnterRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaEnterRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaEnterRoomResp)
    MergeFrom(*source);
  }
}

void LTpaEnterRoomResp::MergeFrom(const LTpaEnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaEnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
}

void LTpaEnterRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaEnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaEnterRoomResp::CopyFrom(const LTpaEnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaEnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaEnterRoomResp::IsInitialized() const {
  return true;
}

void LTpaEnterRoomResp::Swap(LTpaEnterRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaEnterRoomResp::InternalSwap(LTpaEnterRoomResp* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(game_type_, other->game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaEnterRoomResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaAIEnterRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaAIEnterRoomReq::kLocalRoomIdFieldNumber;
const int LTpaAIEnterRoomReq::kTpaRoomIdFieldNumber;
const int LTpaAIEnterRoomReq::kGameTypeFieldNumber;
const int LTpaAIEnterRoomReq::kPlayerListFieldNumber;
const int LTpaAIEnterRoomReq::kConstantTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaAIEnterRoomReq::LTpaAIEnterRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaAIEnterRoomReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaAIEnterRoomReq)
}
LTpaAIEnterRoomReq::LTpaAIEnterRoomReq(const LTpaAIEnterRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  constant_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.constant_token().size() > 0) {
    constant_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constant_token_);
  }
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaAIEnterRoomReq)
}

void LTpaAIEnterRoomReq::SharedCtor() {
  constant_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  _cached_size_ = 0;
}

LTpaAIEnterRoomReq::~LTpaAIEnterRoomReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaAIEnterRoomReq)
  SharedDtor();
}

void LTpaAIEnterRoomReq::SharedDtor() {
  constant_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LTpaAIEnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaAIEnterRoomReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaAIEnterRoomReq& LTpaAIEnterRoomReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaAIEnterRoomReq();
  return *internal_default_instance();
}

LTpaAIEnterRoomReq* LTpaAIEnterRoomReq::New(::google::protobuf::Arena* arena) const {
  LTpaAIEnterRoomReq* n = new LTpaAIEnterRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaAIEnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaAIEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  constant_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  _internal_metadata_.Clear();
}

bool LTpaAIEnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaAIEnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string constant_token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_constant_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->constant_token().data(), static_cast<int>(this->constant_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.LTpaAIEnterRoomReq.constant_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaAIEnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaAIEnterRoomReq)
  return false;
#undef DO_
}

void LTpaAIEnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaAIEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(static_cast<int>(i)), output);
  }

  // string constant_token = 5;
  if (this->constant_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->constant_token().data(), static_cast<int>(this->constant_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.LTpaAIEnterRoomReq.constant_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->constant_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaAIEnterRoomReq)
}

::google::protobuf::uint8* LTpaAIEnterRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaAIEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  // string constant_token = 5;
  if (this->constant_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->constant_token().data(), static_cast<int>(this->constant_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.LTpaAIEnterRoomReq.constant_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->constant_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaAIEnterRoomReq)
  return target;
}

size_t LTpaAIEnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaAIEnterRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // string constant_token = 5;
  if (this->constant_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->constant_token());
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaAIEnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaAIEnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaAIEnterRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaAIEnterRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaAIEnterRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaAIEnterRoomReq)
    MergeFrom(*source);
  }
}

void LTpaAIEnterRoomReq::MergeFrom(const LTpaAIEnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaAIEnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.constant_token().size() > 0) {

    constant_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constant_token_);
  }
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
}

void LTpaAIEnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaAIEnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaAIEnterRoomReq::CopyFrom(const LTpaAIEnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaAIEnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaAIEnterRoomReq::IsInitialized() const {
  return true;
}

void LTpaAIEnterRoomReq::Swap(LTpaAIEnterRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaAIEnterRoomReq::InternalSwap(LTpaAIEnterRoomReq* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  constant_token_.Swap(&other->constant_token_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(game_type_, other->game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaAIEnterRoomReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaAIEnterRoomResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaAIEnterRoomResp::kLocalRoomIdFieldNumber;
const int LTpaAIEnterRoomResp::kTpaRoomIdFieldNumber;
const int LTpaAIEnterRoomResp::kGameTypeFieldNumber;
const int LTpaAIEnterRoomResp::kPlayerListFieldNumber;
const int LTpaAIEnterRoomResp::kConstantTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaAIEnterRoomResp::LTpaAIEnterRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaAIEnterRoomResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaAIEnterRoomResp)
}
LTpaAIEnterRoomResp::LTpaAIEnterRoomResp(const LTpaAIEnterRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  constant_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.constant_token().size() > 0) {
    constant_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constant_token_);
  }
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaAIEnterRoomResp)
}

void LTpaAIEnterRoomResp::SharedCtor() {
  constant_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  _cached_size_ = 0;
}

LTpaAIEnterRoomResp::~LTpaAIEnterRoomResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaAIEnterRoomResp)
  SharedDtor();
}

void LTpaAIEnterRoomResp::SharedDtor() {
  constant_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LTpaAIEnterRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaAIEnterRoomResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaAIEnterRoomResp& LTpaAIEnterRoomResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaAIEnterRoomResp();
  return *internal_default_instance();
}

LTpaAIEnterRoomResp* LTpaAIEnterRoomResp::New(::google::protobuf::Arena* arena) const {
  LTpaAIEnterRoomResp* n = new LTpaAIEnterRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaAIEnterRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaAIEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  constant_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(game_type_));
  _internal_metadata_.Clear();
}

bool LTpaAIEnterRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaAIEnterRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string constant_token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_constant_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->constant_token().data(), static_cast<int>(this->constant_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.LTpaAIEnterRoomResp.constant_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaAIEnterRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaAIEnterRoomResp)
  return false;
#undef DO_
}

void LTpaAIEnterRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaAIEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(static_cast<int>(i)), output);
  }

  // string constant_token = 5;
  if (this->constant_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->constant_token().data(), static_cast<int>(this->constant_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.LTpaAIEnterRoomResp.constant_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->constant_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaAIEnterRoomResp)
}

::google::protobuf::uint8* LTpaAIEnterRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaAIEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  // string constant_token = 5;
  if (this->constant_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->constant_token().data(), static_cast<int>(this->constant_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.LTpaAIEnterRoomResp.constant_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->constant_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaAIEnterRoomResp)
  return target;
}

size_t LTpaAIEnterRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaAIEnterRoomResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // string constant_token = 5;
  if (this->constant_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->constant_token());
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaAIEnterRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaAIEnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaAIEnterRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaAIEnterRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaAIEnterRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaAIEnterRoomResp)
    MergeFrom(*source);
  }
}

void LTpaAIEnterRoomResp::MergeFrom(const LTpaAIEnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaAIEnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.constant_token().size() > 0) {

    constant_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constant_token_);
  }
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
}

void LTpaAIEnterRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaAIEnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaAIEnterRoomResp::CopyFrom(const LTpaAIEnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaAIEnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaAIEnterRoomResp::IsInitialized() const {
  return true;
}

void LTpaAIEnterRoomResp::Swap(LTpaAIEnterRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaAIEnterRoomResp::InternalSwap(LTpaAIEnterRoomResp* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  constant_token_.Swap(&other->constant_token_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(game_type_, other->game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaAIEnterRoomResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaLeaveRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaLeaveRoomReq::kLocalRoomIdFieldNumber;
const int LTpaLeaveRoomReq::kTpaRoomIdFieldNumber;
const int LTpaLeaveRoomReq::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaLeaveRoomReq::LTpaLeaveRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaLeaveRoomReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaLeaveRoomReq)
}
LTpaLeaveRoomReq::LTpaLeaveRoomReq(const LTpaLeaveRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_room_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaLeaveRoomReq)
}

void LTpaLeaveRoomReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _cached_size_ = 0;
}

LTpaLeaveRoomReq::~LTpaLeaveRoomReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaLeaveRoomReq)
  SharedDtor();
}

void LTpaLeaveRoomReq::SharedDtor() {
}

void LTpaLeaveRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaLeaveRoomReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaLeaveRoomReq& LTpaLeaveRoomReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaLeaveRoomReq();
  return *internal_default_instance();
}

LTpaLeaveRoomReq* LTpaLeaveRoomReq::New(::google::protobuf::Arena* arena) const {
  LTpaLeaveRoomReq* n = new LTpaLeaveRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaLeaveRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaLeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _internal_metadata_.Clear();
}

bool LTpaLeaveRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaLeaveRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaLeaveRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaLeaveRoomReq)
  return false;
#undef DO_
}

void LTpaLeaveRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaLeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaLeaveRoomReq)
}

::google::protobuf::uint8* LTpaLeaveRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaLeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaLeaveRoomReq)
  return target;
}

size_t LTpaLeaveRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaLeaveRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaLeaveRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaLeaveRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaLeaveRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaLeaveRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaLeaveRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaLeaveRoomReq)
    MergeFrom(*source);
  }
}

void LTpaLeaveRoomReq::MergeFrom(const LTpaLeaveRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaLeaveRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
}

void LTpaLeaveRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaLeaveRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaLeaveRoomReq::CopyFrom(const LTpaLeaveRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaLeaveRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaLeaveRoomReq::IsInitialized() const {
  return true;
}

void LTpaLeaveRoomReq::Swap(LTpaLeaveRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaLeaveRoomReq::InternalSwap(LTpaLeaveRoomReq* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaLeaveRoomReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaLeaveRoomResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaLeaveRoomResp::kLocalRoomIdFieldNumber;
const int LTpaLeaveRoomResp::kTpaRoomIdFieldNumber;
const int LTpaLeaveRoomResp::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaLeaveRoomResp::LTpaLeaveRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaLeaveRoomResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaLeaveRoomResp)
}
LTpaLeaveRoomResp::LTpaLeaveRoomResp(const LTpaLeaveRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_room_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaLeaveRoomResp)
}

void LTpaLeaveRoomResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _cached_size_ = 0;
}

LTpaLeaveRoomResp::~LTpaLeaveRoomResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaLeaveRoomResp)
  SharedDtor();
}

void LTpaLeaveRoomResp::SharedDtor() {
}

void LTpaLeaveRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaLeaveRoomResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaLeaveRoomResp& LTpaLeaveRoomResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaLeaveRoomResp();
  return *internal_default_instance();
}

LTpaLeaveRoomResp* LTpaLeaveRoomResp::New(::google::protobuf::Arena* arena) const {
  LTpaLeaveRoomResp* n = new LTpaLeaveRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaLeaveRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaLeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _internal_metadata_.Clear();
}

bool LTpaLeaveRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaLeaveRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaLeaveRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaLeaveRoomResp)
  return false;
#undef DO_
}

void LTpaLeaveRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaLeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaLeaveRoomResp)
}

::google::protobuf::uint8* LTpaLeaveRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaLeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaLeaveRoomResp)
  return target;
}

size_t LTpaLeaveRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaLeaveRoomResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaLeaveRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaLeaveRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaLeaveRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaLeaveRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaLeaveRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaLeaveRoomResp)
    MergeFrom(*source);
  }
}

void LTpaLeaveRoomResp::MergeFrom(const LTpaLeaveRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaLeaveRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
}

void LTpaLeaveRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaLeaveRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaLeaveRoomResp::CopyFrom(const LTpaLeaveRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaLeaveRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaLeaveRoomResp::IsInitialized() const {
  return true;
}

void LTpaLeaveRoomResp::Swap(LTpaLeaveRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaLeaveRoomResp::InternalSwap(LTpaLeaveRoomResp* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaLeaveRoomResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaNotifyDestroyRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaNotifyDestroyRoom::kLocalRoomIdFieldNumber;
const int LTpaNotifyDestroyRoom::kTpaRoomIdFieldNumber;
const int LTpaNotifyDestroyRoom::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaNotifyDestroyRoom::LTpaNotifyDestroyRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaNotifyDestroyRoom();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaNotifyDestroyRoom)
}
LTpaNotifyDestroyRoom::LTpaNotifyDestroyRoom(const LTpaNotifyDestroyRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaNotifyDestroyRoom)
}

void LTpaNotifyDestroyRoom::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(reason_));
  _cached_size_ = 0;
}

LTpaNotifyDestroyRoom::~LTpaNotifyDestroyRoom() {
  // @@protoc_insertion_point(destructor:Pb.LTpaNotifyDestroyRoom)
  SharedDtor();
}

void LTpaNotifyDestroyRoom::SharedDtor() {
}

void LTpaNotifyDestroyRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaNotifyDestroyRoom::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaNotifyDestroyRoom& LTpaNotifyDestroyRoom::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaNotifyDestroyRoom();
  return *internal_default_instance();
}

LTpaNotifyDestroyRoom* LTpaNotifyDestroyRoom::New(::google::protobuf::Arena* arena) const {
  LTpaNotifyDestroyRoom* n = new LTpaNotifyDestroyRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaNotifyDestroyRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaNotifyDestroyRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool LTpaNotifyDestroyRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaNotifyDestroyRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaNotifyDestroyRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaNotifyDestroyRoom)
  return false;
#undef DO_
}

void LTpaNotifyDestroyRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaNotifyDestroyRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaNotifyDestroyRoom)
}

::google::protobuf::uint8* LTpaNotifyDestroyRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaNotifyDestroyRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaNotifyDestroyRoom)
  return target;
}

size_t LTpaNotifyDestroyRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaNotifyDestroyRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaNotifyDestroyRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaNotifyDestroyRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaNotifyDestroyRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaNotifyDestroyRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaNotifyDestroyRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaNotifyDestroyRoom)
    MergeFrom(*source);
  }
}

void LTpaNotifyDestroyRoom::MergeFrom(const LTpaNotifyDestroyRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaNotifyDestroyRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void LTpaNotifyDestroyRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaNotifyDestroyRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaNotifyDestroyRoom::CopyFrom(const LTpaNotifyDestroyRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaNotifyDestroyRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaNotifyDestroyRoom::IsInitialized() const {
  return true;
}

void LTpaNotifyDestroyRoom::Swap(LTpaNotifyDestroyRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaNotifyDestroyRoom::InternalSwap(LTpaNotifyDestroyRoom* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaNotifyDestroyRoom::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaSetPlayerStateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaSetPlayerStateReq::kLocalRoomIdFieldNumber;
const int LTpaSetPlayerStateReq::kTpaRoomIdFieldNumber;
const int LTpaSetPlayerStateReq::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaSetPlayerStateReq::LTpaSetPlayerStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetPlayerStateReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaSetPlayerStateReq)
}
LTpaSetPlayerStateReq::LTpaSetPlayerStateReq(const LTpaSetPlayerStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_room_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaSetPlayerStateReq)
}

void LTpaSetPlayerStateReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _cached_size_ = 0;
}

LTpaSetPlayerStateReq::~LTpaSetPlayerStateReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaSetPlayerStateReq)
  SharedDtor();
}

void LTpaSetPlayerStateReq::SharedDtor() {
}

void LTpaSetPlayerStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaSetPlayerStateReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaSetPlayerStateReq& LTpaSetPlayerStateReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetPlayerStateReq();
  return *internal_default_instance();
}

LTpaSetPlayerStateReq* LTpaSetPlayerStateReq::New(::google::protobuf::Arena* arena) const {
  LTpaSetPlayerStateReq* n = new LTpaSetPlayerStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaSetPlayerStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaSetPlayerStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _internal_metadata_.Clear();
}

bool LTpaSetPlayerStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaSetPlayerStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaSetPlayerStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaSetPlayerStateReq)
  return false;
#undef DO_
}

void LTpaSetPlayerStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaSetPlayerStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaSetPlayerStateReq)
}

::google::protobuf::uint8* LTpaSetPlayerStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaSetPlayerStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaSetPlayerStateReq)
  return target;
}

size_t LTpaSetPlayerStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaSetPlayerStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaSetPlayerStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaSetPlayerStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaSetPlayerStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaSetPlayerStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaSetPlayerStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaSetPlayerStateReq)
    MergeFrom(*source);
  }
}

void LTpaSetPlayerStateReq::MergeFrom(const LTpaSetPlayerStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaSetPlayerStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
}

void LTpaSetPlayerStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaSetPlayerStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaSetPlayerStateReq::CopyFrom(const LTpaSetPlayerStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaSetPlayerStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaSetPlayerStateReq::IsInitialized() const {
  return true;
}

void LTpaSetPlayerStateReq::Swap(LTpaSetPlayerStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaSetPlayerStateReq::InternalSwap(LTpaSetPlayerStateReq* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaSetPlayerStateReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaSetPlayerStateResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaSetPlayerStateResp::kLocalRoomIdFieldNumber;
const int LTpaSetPlayerStateResp::kTpaRoomIdFieldNumber;
const int LTpaSetPlayerStateResp::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaSetPlayerStateResp::LTpaSetPlayerStateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetPlayerStateResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaSetPlayerStateResp)
}
LTpaSetPlayerStateResp::LTpaSetPlayerStateResp(const LTpaSetPlayerStateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_room_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaSetPlayerStateResp)
}

void LTpaSetPlayerStateResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _cached_size_ = 0;
}

LTpaSetPlayerStateResp::~LTpaSetPlayerStateResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaSetPlayerStateResp)
  SharedDtor();
}

void LTpaSetPlayerStateResp::SharedDtor() {
}

void LTpaSetPlayerStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaSetPlayerStateResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaSetPlayerStateResp& LTpaSetPlayerStateResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetPlayerStateResp();
  return *internal_default_instance();
}

LTpaSetPlayerStateResp* LTpaSetPlayerStateResp::New(::google::protobuf::Arena* arena) const {
  LTpaSetPlayerStateResp* n = new LTpaSetPlayerStateResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaSetPlayerStateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaSetPlayerStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(tpa_room_id_));
  _internal_metadata_.Clear();
}

bool LTpaSetPlayerStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaSetPlayerStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayer player_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaSetPlayerStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaSetPlayerStateResp)
  return false;
#undef DO_
}

void LTpaSetPlayerStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaSetPlayerStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaSetPlayerStateResp)
}

::google::protobuf::uint8* LTpaSetPlayerStateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaSetPlayerStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // repeated .Pb.LTPAPlayer player_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaSetPlayerStateResp)
  return target;
}

size_t LTpaSetPlayerStateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaSetPlayerStateResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayer player_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaSetPlayerStateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaSetPlayerStateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaSetPlayerStateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaSetPlayerStateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaSetPlayerStateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaSetPlayerStateResp)
    MergeFrom(*source);
  }
}

void LTpaSetPlayerStateResp::MergeFrom(const LTpaSetPlayerStateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaSetPlayerStateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
}

void LTpaSetPlayerStateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaSetPlayerStateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaSetPlayerStateResp::CopyFrom(const LTpaSetPlayerStateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaSetPlayerStateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaSetPlayerStateResp::IsInitialized() const {
  return true;
}

void LTpaSetPlayerStateResp::Swap(LTpaSetPlayerStateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaSetPlayerStateResp::InternalSwap(LTpaSetPlayerStateResp* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaSetPlayerStateResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaSetDealerReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaSetDealerReq::kLocalRoomIdFieldNumber;
const int LTpaSetDealerReq::kDealerRoleIdFieldNumber;
const int LTpaSetDealerReq::kTpaRoomIdFieldNumber;
const int LTpaSetDealerReq::kDealerPlayerIdFieldNumber;
const int LTpaSetDealerReq::kDealerSeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaSetDealerReq::LTpaSetDealerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetDealerReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaSetDealerReq)
}
LTpaSetDealerReq::LTpaSetDealerReq(const LTpaSetDealerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealer_seat_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(dealer_seat_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaSetDealerReq)
}

void LTpaSetDealerReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_seat_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(dealer_seat_));
  _cached_size_ = 0;
}

LTpaSetDealerReq::~LTpaSetDealerReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaSetDealerReq)
  SharedDtor();
}

void LTpaSetDealerReq::SharedDtor() {
}

void LTpaSetDealerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaSetDealerReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaSetDealerReq& LTpaSetDealerReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetDealerReq();
  return *internal_default_instance();
}

LTpaSetDealerReq* LTpaSetDealerReq::New(::google::protobuf::Arena* arena) const {
  LTpaSetDealerReq* n = new LTpaSetDealerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaSetDealerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaSetDealerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_seat_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(dealer_seat_));
  _internal_metadata_.Clear();
}

bool LTpaSetDealerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaSetDealerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dealer_player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dealer_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dealer_seat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealer_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaSetDealerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaSetDealerReq)
  return false;
#undef DO_
}

void LTpaSetDealerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaSetDealerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dealer_role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 dealer_player_id = 4;
  if (this->dealer_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dealer_player_id(), output);
  }

  // int32 dealer_seat = 5;
  if (this->dealer_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealer_seat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaSetDealerReq)
}

::google::protobuf::uint8* LTpaSetDealerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaSetDealerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dealer_role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 dealer_player_id = 4;
  if (this->dealer_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dealer_player_id(), target);
  }

  // int32 dealer_seat = 5;
  if (this->dealer_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dealer_seat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaSetDealerReq)
  return target;
}

size_t LTpaSetDealerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaSetDealerReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 dealer_player_id = 4;
  if (this->dealer_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dealer_player_id());
  }

  // int32 dealer_seat = 5;
  if (this->dealer_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dealer_seat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaSetDealerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaSetDealerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaSetDealerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaSetDealerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaSetDealerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaSetDealerReq)
    MergeFrom(*source);
  }
}

void LTpaSetDealerReq::MergeFrom(const LTpaSetDealerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaSetDealerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.dealer_role_id() != 0) {
    set_dealer_role_id(from.dealer_role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.dealer_player_id() != 0) {
    set_dealer_player_id(from.dealer_player_id());
  }
  if (from.dealer_seat() != 0) {
    set_dealer_seat(from.dealer_seat());
  }
}

void LTpaSetDealerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaSetDealerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaSetDealerReq::CopyFrom(const LTpaSetDealerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaSetDealerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaSetDealerReq::IsInitialized() const {
  return true;
}

void LTpaSetDealerReq::Swap(LTpaSetDealerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaSetDealerReq::InternalSwap(LTpaSetDealerReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(dealer_role_id_, other->dealer_role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(dealer_player_id_, other->dealer_player_id_);
  swap(dealer_seat_, other->dealer_seat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaSetDealerReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaSetDealerResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaSetDealerResp::kLocalRoomIdFieldNumber;
const int LTpaSetDealerResp::kDealerRoleIdFieldNumber;
const int LTpaSetDealerResp::kTpaRoomIdFieldNumber;
const int LTpaSetDealerResp::kDealerPlayerIdFieldNumber;
const int LTpaSetDealerResp::kHandIdFieldNumber;
const int LTpaSetDealerResp::kMaxSpentFieldNumber;
const int LTpaSetDealerResp::kPlayerStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaSetDealerResp::LTpaSetDealerResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetDealerResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaSetDealerResp)
}
LTpaSetDealerResp::LTpaSetDealerResp(const LTpaSetDealerResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_state_(from.player_state_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spent_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(max_spent_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaSetDealerResp)
}

void LTpaSetDealerResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_spent_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(max_spent_));
  _cached_size_ = 0;
}

LTpaSetDealerResp::~LTpaSetDealerResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaSetDealerResp)
  SharedDtor();
}

void LTpaSetDealerResp::SharedDtor() {
}

void LTpaSetDealerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaSetDealerResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaSetDealerResp& LTpaSetDealerResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaSetDealerResp();
  return *internal_default_instance();
}

LTpaSetDealerResp* LTpaSetDealerResp::New(::google::protobuf::Arena* arena) const {
  LTpaSetDealerResp* n = new LTpaSetDealerResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaSetDealerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaSetDealerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_state_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_spent_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(max_spent_));
  _internal_metadata_.Clear();
}

bool LTpaSetDealerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaSetDealerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dealer_player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dealer_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_spent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayerState player_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaSetDealerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaSetDealerResp)
  return false;
#undef DO_
}

void LTpaSetDealerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaSetDealerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dealer_role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 dealer_player_id = 4;
  if (this->dealer_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dealer_player_id(), output);
  }

  // uint32 hand_id = 5;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hand_id(), output);
  }

  // uint32 max_spent = 6;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_spent(), output);
  }

  // repeated .Pb.LTPAPlayerState player_state = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player_state(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaSetDealerResp)
}

::google::protobuf::uint8* LTpaSetDealerResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaSetDealerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dealer_role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 dealer_player_id = 4;
  if (this->dealer_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dealer_player_id(), target);
  }

  // uint32 hand_id = 5;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hand_id(), target);
  }

  // uint32 max_spent = 6;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_spent(), target);
  }

  // repeated .Pb.LTPAPlayerState player_state = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->player_state(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaSetDealerResp)
  return target;
}

size_t LTpaSetDealerResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaSetDealerResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.LTPAPlayerState player_state = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->player_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_state(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 dealer_player_id = 4;
  if (this->dealer_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dealer_player_id());
  }

  // uint32 hand_id = 5;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  // uint32 max_spent = 6;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_spent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaSetDealerResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaSetDealerResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaSetDealerResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaSetDealerResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaSetDealerResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaSetDealerResp)
    MergeFrom(*source);
  }
}

void LTpaSetDealerResp::MergeFrom(const LTpaSetDealerResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaSetDealerResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_state_.MergeFrom(from.player_state_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.dealer_role_id() != 0) {
    set_dealer_role_id(from.dealer_role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.dealer_player_id() != 0) {
    set_dealer_player_id(from.dealer_player_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
}

void LTpaSetDealerResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaSetDealerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaSetDealerResp::CopyFrom(const LTpaSetDealerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaSetDealerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaSetDealerResp::IsInitialized() const {
  return true;
}

void LTpaSetDealerResp::Swap(LTpaSetDealerResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaSetDealerResp::InternalSwap(LTpaSetDealerResp* other) {
  using std::swap;
  player_state_.InternalSwap(&other->player_state_);
  swap(local_room_id_, other->local_room_id_);
  swap(dealer_role_id_, other->dealer_role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(dealer_player_id_, other->dealer_player_id_);
  swap(hand_id_, other->hand_id_);
  swap(max_spent_, other->max_spent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaSetDealerResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryCardsReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryCardsReq::kLocalRoomIdFieldNumber;
const int LTpaQueryCardsReq::kTpaRoomIdFieldNumber;
const int LTpaQueryCardsReq::kRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryCardsReq::LTpaQueryCardsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryCardsReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryCardsReq)
}
LTpaQueryCardsReq::LTpaQueryCardsReq(const LTpaQueryCardsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryCardsReq)
}

void LTpaQueryCardsReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(round_));
  _cached_size_ = 0;
}

LTpaQueryCardsReq::~LTpaQueryCardsReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryCardsReq)
  SharedDtor();
}

void LTpaQueryCardsReq::SharedDtor() {
}

void LTpaQueryCardsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryCardsReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryCardsReq& LTpaQueryCardsReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryCardsReq();
  return *internal_default_instance();
}

LTpaQueryCardsReq* LTpaQueryCardsReq::New(::google::protobuf::Arena* arena) const {
  LTpaQueryCardsReq* n = new LTpaQueryCardsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryCardsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(round_));
  _internal_metadata_.Clear();
}

bool LTpaQueryCardsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryCardsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryCardsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryCardsReq)
  return false;
#undef DO_
}

void LTpaQueryCardsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryCardsReq)
}

::google::protobuf::uint8* LTpaQueryCardsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryCardsReq)
  return target;
}

size_t LTpaQueryCardsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryCardsReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // int32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryCardsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryCardsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryCardsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryCardsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryCardsReq)
    MergeFrom(*source);
  }
}

void LTpaQueryCardsReq::MergeFrom(const LTpaQueryCardsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void LTpaQueryCardsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryCardsReq::CopyFrom(const LTpaQueryCardsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryCardsReq::IsInitialized() const {
  return true;
}

void LTpaQueryCardsReq::Swap(LTpaQueryCardsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryCardsReq::InternalSwap(LTpaQueryCardsReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(round_, other->round_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryCardsReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryCardsResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryCardsResp::kLocalRoomIdFieldNumber;
const int LTpaQueryCardsResp::kTpaRoomIdFieldNumber;
const int LTpaQueryCardsResp::kRoundFieldNumber;
const int LTpaQueryCardsResp::kFinishedFieldNumber;
const int LTpaQueryCardsResp::kFlopCardsFieldNumber;
const int LTpaQueryCardsResp::kTurnCardsFieldNumber;
const int LTpaQueryCardsResp::kRiverCardsFieldNumber;
const int LTpaQueryCardsResp::kPlayerCardsFieldNumber;
const int LTpaQueryCardsResp::kDealerRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryCardsResp::LTpaQueryCardsResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryCardsResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryCardsResp)
}
LTpaQueryCardsResp::LTpaQueryCardsResp(const LTpaQueryCardsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      flop_cards_(from.flop_cards_),
      turn_cards_(from.turn_cards_),
      river_cards_(from.river_cards_),
      player_cards_(from.player_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealer_role_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(dealer_role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryCardsResp)
}

void LTpaQueryCardsResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_role_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(dealer_role_id_));
  _cached_size_ = 0;
}

LTpaQueryCardsResp::~LTpaQueryCardsResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryCardsResp)
  SharedDtor();
}

void LTpaQueryCardsResp::SharedDtor() {
}

void LTpaQueryCardsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryCardsResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryCardsResp& LTpaQueryCardsResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryCardsResp();
  return *internal_default_instance();
}

LTpaQueryCardsResp* LTpaQueryCardsResp::New(::google::protobuf::Arena* arena) const {
  LTpaQueryCardsResp* n = new LTpaQueryCardsResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryCardsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flop_cards_.Clear();
  turn_cards_.Clear();
  river_cards_.Clear();
  player_cards_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_role_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(dealer_role_id_));
  _internal_metadata_.Clear();
}

bool LTpaQueryCardsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryCardsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finished = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 flop_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flop_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_flop_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 turn_cards = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_turn_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_turn_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 river_cards = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_river_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_river_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayerCards player_cards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_role_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryCardsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryCardsResp)
  return false;
#undef DO_
}

void LTpaQueryCardsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round(), output);
  }

  // uint32 finished = 4;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finished(), output);
  }

  // repeated int32 flop_cards = 5;
  if (this->flop_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _flop_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->flop_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->flop_cards(i), output);
  }

  // repeated int32 turn_cards = 6;
  if (this->turn_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _turn_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->turn_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->turn_cards(i), output);
  }

  // repeated int32 river_cards = 7;
  if (this->river_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _river_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->river_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->river_cards(i), output);
  }

  // repeated .Pb.LTPAPlayerCards player_cards = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->player_cards(static_cast<int>(i)), output);
  }

  // uint32 dealer_role_id = 9;
  if (this->dealer_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dealer_role_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryCardsResp)
}

::google::protobuf::uint8* LTpaQueryCardsResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round(), target);
  }

  // uint32 finished = 4;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finished(), target);
  }

  // repeated int32 flop_cards = 5;
  if (this->flop_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _flop_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->flop_cards_, target);
  }

  // repeated int32 turn_cards = 6;
  if (this->turn_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _turn_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->turn_cards_, target);
  }

  // repeated int32 river_cards = 7;
  if (this->river_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _river_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->river_cards_, target);
  }

  // repeated .Pb.LTPAPlayerCards player_cards = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->player_cards(static_cast<int>(i)), deterministic, target);
  }

  // uint32 dealer_role_id = 9;
  if (this->dealer_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dealer_role_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryCardsResp)
  return target;
}

size_t LTpaQueryCardsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryCardsResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 flop_cards = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->flop_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _flop_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 turn_cards = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->turn_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _turn_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 river_cards = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->river_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _river_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.LTPAPlayerCards player_cards = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->player_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_cards(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // int32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // uint32 finished = 4;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished());
  }

  // uint32 dealer_role_id = 9;
  if (this->dealer_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryCardsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryCardsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryCardsResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryCardsResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryCardsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryCardsResp)
    MergeFrom(*source);
  }
}

void LTpaQueryCardsResp::MergeFrom(const LTpaQueryCardsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryCardsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flop_cards_.MergeFrom(from.flop_cards_);
  turn_cards_.MergeFrom(from.turn_cards_);
  river_cards_.MergeFrom(from.river_cards_);
  player_cards_.MergeFrom(from.player_cards_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.dealer_role_id() != 0) {
    set_dealer_role_id(from.dealer_role_id());
  }
}

void LTpaQueryCardsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryCardsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryCardsResp::CopyFrom(const LTpaQueryCardsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryCardsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryCardsResp::IsInitialized() const {
  return true;
}

void LTpaQueryCardsResp::Swap(LTpaQueryCardsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryCardsResp::InternalSwap(LTpaQueryCardsResp* other) {
  using std::swap;
  flop_cards_.InternalSwap(&other->flop_cards_);
  turn_cards_.InternalSwap(&other->turn_cards_);
  river_cards_.InternalSwap(&other->river_cards_);
  player_cards_.InternalSwap(&other->player_cards_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  swap(dealer_role_id_, other->dealer_role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryCardsResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryAllowActionReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryAllowActionReq::kLocalRoomIdFieldNumber;
const int LTpaQueryAllowActionReq::kRoleIdFieldNumber;
const int LTpaQueryAllowActionReq::kTpaRoomIdFieldNumber;
const int LTpaQueryAllowActionReq::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryAllowActionReq::LTpaQueryAllowActionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAllowActionReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryAllowActionReq)
}
LTpaQueryAllowActionReq::LTpaQueryAllowActionReq(const LTpaQueryAllowActionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryAllowActionReq)
}

void LTpaQueryAllowActionReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _cached_size_ = 0;
}

LTpaQueryAllowActionReq::~LTpaQueryAllowActionReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryAllowActionReq)
  SharedDtor();
}

void LTpaQueryAllowActionReq::SharedDtor() {
}

void LTpaQueryAllowActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryAllowActionReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryAllowActionReq& LTpaQueryAllowActionReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAllowActionReq();
  return *internal_default_instance();
}

LTpaQueryAllowActionReq* LTpaQueryAllowActionReq::New(::google::protobuf::Arena* arena) const {
  LTpaQueryAllowActionReq* n = new LTpaQueryAllowActionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryAllowActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryAllowActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear();
}

bool LTpaQueryAllowActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryAllowActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryAllowActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryAllowActionReq)
  return false;
#undef DO_
}

void LTpaQueryAllowActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryAllowActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryAllowActionReq)
}

::google::protobuf::uint8* LTpaQueryAllowActionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryAllowActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryAllowActionReq)
  return target;
}

size_t LTpaQueryAllowActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryAllowActionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryAllowActionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryAllowActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryAllowActionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryAllowActionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryAllowActionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryAllowActionReq)
    MergeFrom(*source);
  }
}

void LTpaQueryAllowActionReq::MergeFrom(const LTpaQueryAllowActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryAllowActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void LTpaQueryAllowActionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryAllowActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryAllowActionReq::CopyFrom(const LTpaQueryAllowActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryAllowActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryAllowActionReq::IsInitialized() const {
  return true;
}

void LTpaQueryAllowActionReq::Swap(LTpaQueryAllowActionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryAllowActionReq::InternalSwap(LTpaQueryAllowActionReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryAllowActionReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryAllowActionResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryAllowActionResp::kLocalRoomIdFieldNumber;
const int LTpaQueryAllowActionResp::kRoleIdFieldNumber;
const int LTpaQueryAllowActionResp::kTpaRoomIdFieldNumber;
const int LTpaQueryAllowActionResp::kPlayerIdFieldNumber;
const int LTpaQueryAllowActionResp::kAllowRaiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryAllowActionResp::LTpaQueryAllowActionResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAllowActionResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryAllowActionResp)
}
LTpaQueryAllowActionResp::LTpaQueryAllowActionResp(const LTpaQueryAllowActionResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allow_raise_(from.allow_raise_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryAllowActionResp)
}

void LTpaQueryAllowActionResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _cached_size_ = 0;
}

LTpaQueryAllowActionResp::~LTpaQueryAllowActionResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryAllowActionResp)
  SharedDtor();
}

void LTpaQueryAllowActionResp::SharedDtor() {
}

void LTpaQueryAllowActionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryAllowActionResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryAllowActionResp& LTpaQueryAllowActionResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAllowActionResp();
  return *internal_default_instance();
}

LTpaQueryAllowActionResp* LTpaQueryAllowActionResp::New(::google::protobuf::Arena* arena) const {
  LTpaQueryAllowActionResp* n = new LTpaQueryAllowActionResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryAllowActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryAllowActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_raise_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear();
}

bool LTpaQueryAllowActionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryAllowActionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allow_raise = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allow_raise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_allow_raise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryAllowActionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryAllowActionResp)
  return false;
#undef DO_
}

void LTpaQueryAllowActionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryAllowActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // repeated uint32 allow_raise = 5;
  if (this->allow_raise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allow_raise_cached_byte_size_));
  }
  for (int i = 0, n = this->allow_raise_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->allow_raise(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryAllowActionResp)
}

::google::protobuf::uint8* LTpaQueryAllowActionResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryAllowActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // repeated uint32 allow_raise = 5;
  if (this->allow_raise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allow_raise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->allow_raise_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryAllowActionResp)
  return target;
}

size_t LTpaQueryAllowActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryAllowActionResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 allow_raise = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allow_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allow_raise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryAllowActionResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryAllowActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryAllowActionResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryAllowActionResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryAllowActionResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryAllowActionResp)
    MergeFrom(*source);
  }
}

void LTpaQueryAllowActionResp::MergeFrom(const LTpaQueryAllowActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryAllowActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_raise_.MergeFrom(from.allow_raise_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void LTpaQueryAllowActionResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryAllowActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryAllowActionResp::CopyFrom(const LTpaQueryAllowActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryAllowActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryAllowActionResp::IsInitialized() const {
  return true;
}

void LTpaQueryAllowActionResp::Swap(LTpaQueryAllowActionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryAllowActionResp::InternalSwap(LTpaQueryAllowActionResp* other) {
  using std::swap;
  allow_raise_.InternalSwap(&other->allow_raise_);
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryAllowActionResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryMatchStateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryMatchStateReq::kLocalRoomIdFieldNumber;
const int LTpaQueryMatchStateReq::kTpaRoomIdFieldNumber;
const int LTpaQueryMatchStateReq::kRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryMatchStateReq::LTpaQueryMatchStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryMatchStateReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryMatchStateReq)
}
LTpaQueryMatchStateReq::LTpaQueryMatchStateReq(const LTpaQueryMatchStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryMatchStateReq)
}

void LTpaQueryMatchStateReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(round_));
  _cached_size_ = 0;
}

LTpaQueryMatchStateReq::~LTpaQueryMatchStateReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryMatchStateReq)
  SharedDtor();
}

void LTpaQueryMatchStateReq::SharedDtor() {
}

void LTpaQueryMatchStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryMatchStateReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryMatchStateReq& LTpaQueryMatchStateReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryMatchStateReq();
  return *internal_default_instance();
}

LTpaQueryMatchStateReq* LTpaQueryMatchStateReq::New(::google::protobuf::Arena* arena) const {
  LTpaQueryMatchStateReq* n = new LTpaQueryMatchStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryMatchStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(round_));
  _internal_metadata_.Clear();
}

bool LTpaQueryMatchStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryMatchStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryMatchStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryMatchStateReq)
  return false;
#undef DO_
}

void LTpaQueryMatchStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryMatchStateReq)
}

::google::protobuf::uint8* LTpaQueryMatchStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // int32 round = 3;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryMatchStateReq)
  return target;
}

size_t LTpaQueryMatchStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryMatchStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // int32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryMatchStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryMatchStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryMatchStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryMatchStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryMatchStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryMatchStateReq)
    MergeFrom(*source);
  }
}

void LTpaQueryMatchStateReq::MergeFrom(const LTpaQueryMatchStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryMatchStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void LTpaQueryMatchStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryMatchStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryMatchStateReq::CopyFrom(const LTpaQueryMatchStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryMatchStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryMatchStateReq::IsInitialized() const {
  return true;
}

void LTpaQueryMatchStateReq::Swap(LTpaQueryMatchStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryMatchStateReq::InternalSwap(LTpaQueryMatchStateReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(round_, other->round_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryMatchStateReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryMatchStateResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryMatchStateResp::kLocalRoomIdFieldNumber;
const int LTpaQueryMatchStateResp::kDealerRoleIdFieldNumber;
const int LTpaQueryMatchStateResp::kTpaRoomIdFieldNumber;
const int LTpaQueryMatchStateResp::kHandIdFieldNumber;
const int LTpaQueryMatchStateResp::kRoundFieldNumber;
const int LTpaQueryMatchStateResp::kFinishedFieldNumber;
const int LTpaQueryMatchStateResp::kMaxSpentFieldNumber;
const int LTpaQueryMatchStateResp::kFlopCardsFieldNumber;
const int LTpaQueryMatchStateResp::kTurnCardsFieldNumber;
const int LTpaQueryMatchStateResp::kRiverCardsFieldNumber;
const int LTpaQueryMatchStateResp::kAllowRaiseFieldNumber;
const int LTpaQueryMatchStateResp::kPlayerStateFieldNumber;
const int LTpaQueryMatchStateResp::kPlayerActionFieldNumber;
const int LTpaQueryMatchStateResp::kTurnRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryMatchStateResp::LTpaQueryMatchStateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryMatchStateResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryMatchStateResp)
}
LTpaQueryMatchStateResp::LTpaQueryMatchStateResp(const LTpaQueryMatchStateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      flop_cards_(from.flop_cards_),
      turn_cards_(from.turn_cards_),
      river_cards_(from.river_cards_),
      allow_raise_(from.allow_raise_),
      player_state_(from.player_state_),
      player_action_(from.player_action_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_role_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(turn_role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryMatchStateResp)
}

void LTpaQueryMatchStateResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_role_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(turn_role_id_));
  _cached_size_ = 0;
}

LTpaQueryMatchStateResp::~LTpaQueryMatchStateResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryMatchStateResp)
  SharedDtor();
}

void LTpaQueryMatchStateResp::SharedDtor() {
}

void LTpaQueryMatchStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryMatchStateResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryMatchStateResp& LTpaQueryMatchStateResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryMatchStateResp();
  return *internal_default_instance();
}

LTpaQueryMatchStateResp* LTpaQueryMatchStateResp::New(::google::protobuf::Arena* arena) const {
  LTpaQueryMatchStateResp* n = new LTpaQueryMatchStateResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryMatchStateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryMatchStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flop_cards_.Clear();
  turn_cards_.Clear();
  river_cards_.Clear();
  allow_raise_.Clear();
  player_state_.Clear();
  player_action_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_role_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(turn_role_id_));
  _internal_metadata_.Clear();
}

bool LTpaQueryMatchStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryMatchStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finished = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_spent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 flop_cards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flop_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_flop_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 turn_cards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_turn_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_turn_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 river_cards = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_river_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82u, input, this->mutable_river_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allow_raise = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allow_raise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_allow_raise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayerState player_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.LTPAPlayerAction player_action = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 turn_role_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryMatchStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryMatchStateResp)
  return false;
#undef DO_
}

void LTpaQueryMatchStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryMatchStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dealer_role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_id(), output);
  }

  // int32 round = 5;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->round(), output);
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->finished(), output);
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_spent(), output);
  }

  // repeated int32 flop_cards = 8;
  if (this->flop_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _flop_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->flop_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->flop_cards(i), output);
  }

  // repeated int32 turn_cards = 9;
  if (this->turn_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _turn_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->turn_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->turn_cards(i), output);
  }

  // repeated int32 river_cards = 10;
  if (this->river_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _river_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->river_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->river_cards(i), output);
  }

  // repeated uint32 allow_raise = 11;
  if (this->allow_raise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allow_raise_cached_byte_size_));
  }
  for (int i = 0, n = this->allow_raise_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->allow_raise(i), output);
  }

  // repeated .Pb.LTPAPlayerState player_state = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->player_state(static_cast<int>(i)), output);
  }

  // repeated .Pb.LTPAPlayerAction player_action = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_action_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->player_action(static_cast<int>(i)), output);
  }

  // uint32 turn_role_id = 14;
  if (this->turn_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->turn_role_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryMatchStateResp)
}

::google::protobuf::uint8* LTpaQueryMatchStateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryMatchStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dealer_role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_id(), target);
  }

  // int32 round = 5;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->round(), target);
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->finished(), target);
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_spent(), target);
  }

  // repeated int32 flop_cards = 8;
  if (this->flop_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _flop_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->flop_cards_, target);
  }

  // repeated int32 turn_cards = 9;
  if (this->turn_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _turn_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->turn_cards_, target);
  }

  // repeated int32 river_cards = 10;
  if (this->river_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _river_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->river_cards_, target);
  }

  // repeated uint32 allow_raise = 11;
  if (this->allow_raise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allow_raise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->allow_raise_, target);
  }

  // repeated .Pb.LTPAPlayerState player_state = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->player_state(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.LTPAPlayerAction player_action = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_action_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->player_action(static_cast<int>(i)), deterministic, target);
  }

  // uint32 turn_role_id = 14;
  if (this->turn_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->turn_role_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryMatchStateResp)
  return target;
}

size_t LTpaQueryMatchStateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryMatchStateResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 flop_cards = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->flop_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _flop_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 turn_cards = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->turn_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _turn_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 river_cards = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->river_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _river_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 allow_raise = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allow_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allow_raise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.LTPAPlayerState player_state = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->player_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_state(static_cast<int>(i)));
    }
  }

  // repeated .Pb.LTPAPlayerAction player_action = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->player_action_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_action(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  // int32 round = 5;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished());
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_spent());
  }

  // uint32 turn_role_id = 14;
  if (this->turn_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turn_role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryMatchStateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryMatchStateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryMatchStateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryMatchStateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryMatchStateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryMatchStateResp)
    MergeFrom(*source);
  }
}

void LTpaQueryMatchStateResp::MergeFrom(const LTpaQueryMatchStateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryMatchStateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flop_cards_.MergeFrom(from.flop_cards_);
  turn_cards_.MergeFrom(from.turn_cards_);
  river_cards_.MergeFrom(from.river_cards_);
  allow_raise_.MergeFrom(from.allow_raise_);
  player_state_.MergeFrom(from.player_state_);
  player_action_.MergeFrom(from.player_action_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.dealer_role_id() != 0) {
    set_dealer_role_id(from.dealer_role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
  if (from.turn_role_id() != 0) {
    set_turn_role_id(from.turn_role_id());
  }
}

void LTpaQueryMatchStateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryMatchStateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryMatchStateResp::CopyFrom(const LTpaQueryMatchStateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryMatchStateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryMatchStateResp::IsInitialized() const {
  return true;
}

void LTpaQueryMatchStateResp::Swap(LTpaQueryMatchStateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryMatchStateResp::InternalSwap(LTpaQueryMatchStateResp* other) {
  using std::swap;
  flop_cards_.InternalSwap(&other->flop_cards_);
  turn_cards_.InternalSwap(&other->turn_cards_);
  river_cards_.InternalSwap(&other->river_cards_);
  allow_raise_.InternalSwap(&other->allow_raise_);
  player_state_.InternalSwap(&other->player_state_);
  player_action_.InternalSwap(&other->player_action_);
  swap(local_room_id_, other->local_room_id_);
  swap(dealer_role_id_, other->dealer_role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(hand_id_, other->hand_id_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  swap(max_spent_, other->max_spent_);
  swap(turn_role_id_, other->turn_role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryMatchStateResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaReportActionTokenReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaReportActionTokenReq::kLocalRoomIdFieldNumber;
const int LTpaReportActionTokenReq::kRoleIdFieldNumber;
const int LTpaReportActionTokenReq::kTpaRoomIdFieldNumber;
const int LTpaReportActionTokenReq::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaReportActionTokenReq::LTpaReportActionTokenReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportActionTokenReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaReportActionTokenReq)
}
LTpaReportActionTokenReq::LTpaReportActionTokenReq(const LTpaReportActionTokenReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaReportActionTokenReq)
}

void LTpaReportActionTokenReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _cached_size_ = 0;
}

LTpaReportActionTokenReq::~LTpaReportActionTokenReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaReportActionTokenReq)
  SharedDtor();
}

void LTpaReportActionTokenReq::SharedDtor() {
}

void LTpaReportActionTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaReportActionTokenReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaReportActionTokenReq& LTpaReportActionTokenReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportActionTokenReq();
  return *internal_default_instance();
}

LTpaReportActionTokenReq* LTpaReportActionTokenReq::New(::google::protobuf::Arena* arena) const {
  LTpaReportActionTokenReq* n = new LTpaReportActionTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaReportActionTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaReportActionTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear();
}

bool LTpaReportActionTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaReportActionTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaReportActionTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaReportActionTokenReq)
  return false;
#undef DO_
}

void LTpaReportActionTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaReportActionTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaReportActionTokenReq)
}

::google::protobuf::uint8* LTpaReportActionTokenReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaReportActionTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaReportActionTokenReq)
  return target;
}

size_t LTpaReportActionTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaReportActionTokenReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaReportActionTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaReportActionTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaReportActionTokenReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaReportActionTokenReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaReportActionTokenReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaReportActionTokenReq)
    MergeFrom(*source);
  }
}

void LTpaReportActionTokenReq::MergeFrom(const LTpaReportActionTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaReportActionTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void LTpaReportActionTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaReportActionTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaReportActionTokenReq::CopyFrom(const LTpaReportActionTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaReportActionTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaReportActionTokenReq::IsInitialized() const {
  return true;
}

void LTpaReportActionTokenReq::Swap(LTpaReportActionTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaReportActionTokenReq::InternalSwap(LTpaReportActionTokenReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaReportActionTokenReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaReportActionTokenResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaReportActionTokenResp::kLocalRoomIdFieldNumber;
const int LTpaReportActionTokenResp::kRoleIdFieldNumber;
const int LTpaReportActionTokenResp::kTpaRoomIdFieldNumber;
const int LTpaReportActionTokenResp::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaReportActionTokenResp::LTpaReportActionTokenResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportActionTokenResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaReportActionTokenResp)
}
LTpaReportActionTokenResp::LTpaReportActionTokenResp(const LTpaReportActionTokenResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaReportActionTokenResp)
}

void LTpaReportActionTokenResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _cached_size_ = 0;
}

LTpaReportActionTokenResp::~LTpaReportActionTokenResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaReportActionTokenResp)
  SharedDtor();
}

void LTpaReportActionTokenResp::SharedDtor() {
}

void LTpaReportActionTokenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaReportActionTokenResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaReportActionTokenResp& LTpaReportActionTokenResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportActionTokenResp();
  return *internal_default_instance();
}

LTpaReportActionTokenResp* LTpaReportActionTokenResp::New(::google::protobuf::Arena* arena) const {
  LTpaReportActionTokenResp* n = new LTpaReportActionTokenResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaReportActionTokenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaReportActionTokenResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear();
}

bool LTpaReportActionTokenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaReportActionTokenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaReportActionTokenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaReportActionTokenResp)
  return false;
#undef DO_
}

void LTpaReportActionTokenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaReportActionTokenResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaReportActionTokenResp)
}

::google::protobuf::uint8* LTpaReportActionTokenResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaReportActionTokenResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaReportActionTokenResp)
  return target;
}

size_t LTpaReportActionTokenResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaReportActionTokenResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaReportActionTokenResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaReportActionTokenResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaReportActionTokenResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaReportActionTokenResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaReportActionTokenResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaReportActionTokenResp)
    MergeFrom(*source);
  }
}

void LTpaReportActionTokenResp::MergeFrom(const LTpaReportActionTokenResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaReportActionTokenResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void LTpaReportActionTokenResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaReportActionTokenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaReportActionTokenResp::CopyFrom(const LTpaReportActionTokenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaReportActionTokenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaReportActionTokenResp::IsInitialized() const {
  return true;
}

void LTpaReportActionTokenResp::Swap(LTpaReportActionTokenResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaReportActionTokenResp::InternalSwap(LTpaReportActionTokenResp* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaReportActionTokenResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaReportPlayerActionReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaReportPlayerActionReq::kLocalRoomIdFieldNumber;
const int LTpaReportPlayerActionReq::kRoleIdFieldNumber;
const int LTpaReportPlayerActionReq::kTpaRoomIdFieldNumber;
const int LTpaReportPlayerActionReq::kPlayerIdFieldNumber;
const int LTpaReportPlayerActionReq::kActionTypeFieldNumber;
const int LTpaReportPlayerActionReq::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaReportPlayerActionReq::LTpaReportPlayerActionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportPlayerActionReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaReportPlayerActionReq)
}
LTpaReportPlayerActionReq::LTpaReportPlayerActionReq(const LTpaReportPlayerActionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaReportPlayerActionReq)
}

void LTpaReportPlayerActionReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  _cached_size_ = 0;
}

LTpaReportPlayerActionReq::~LTpaReportPlayerActionReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaReportPlayerActionReq)
  SharedDtor();
}

void LTpaReportPlayerActionReq::SharedDtor() {
}

void LTpaReportPlayerActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaReportPlayerActionReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaReportPlayerActionReq& LTpaReportPlayerActionReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportPlayerActionReq();
  return *internal_default_instance();
}

LTpaReportPlayerActionReq* LTpaReportPlayerActionReq::New(::google::protobuf::Arena* arena) const {
  LTpaReportPlayerActionReq* n = new LTpaReportPlayerActionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaReportPlayerActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaReportPlayerActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool LTpaReportPlayerActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaReportPlayerActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaReportPlayerActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaReportPlayerActionReq)
  return false;
#undef DO_
}

void LTpaReportPlayerActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaReportPlayerActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->action_type(), output);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaReportPlayerActionReq)
}

::google::protobuf::uint8* LTpaReportPlayerActionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaReportPlayerActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->action_type(), target);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaReportPlayerActionReq)
  return target;
}

size_t LTpaReportPlayerActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaReportPlayerActionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_type());
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaReportPlayerActionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaReportPlayerActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaReportPlayerActionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaReportPlayerActionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaReportPlayerActionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaReportPlayerActionReq)
    MergeFrom(*source);
  }
}

void LTpaReportPlayerActionReq::MergeFrom(const LTpaReportPlayerActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaReportPlayerActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void LTpaReportPlayerActionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaReportPlayerActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaReportPlayerActionReq::CopyFrom(const LTpaReportPlayerActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaReportPlayerActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaReportPlayerActionReq::IsInitialized() const {
  return true;
}

void LTpaReportPlayerActionReq::Swap(LTpaReportPlayerActionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaReportPlayerActionReq::InternalSwap(LTpaReportPlayerActionReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  swap(action_type_, other->action_type_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaReportPlayerActionReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaReportPlayerActionResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaReportPlayerActionResp::kLocalRoomIdFieldNumber;
const int LTpaReportPlayerActionResp::kRoleIdFieldNumber;
const int LTpaReportPlayerActionResp::kTpaRoomIdFieldNumber;
const int LTpaReportPlayerActionResp::kPlayerIdFieldNumber;
const int LTpaReportPlayerActionResp::kActionTypeFieldNumber;
const int LTpaReportPlayerActionResp::kSizeFieldNumber;
const int LTpaReportPlayerActionResp::kAllowRaiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaReportPlayerActionResp::LTpaReportPlayerActionResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportPlayerActionResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaReportPlayerActionResp)
}
LTpaReportPlayerActionResp::LTpaReportPlayerActionResp(const LTpaReportPlayerActionResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allow_raise_(from.allow_raise_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaReportPlayerActionResp)
}

void LTpaReportPlayerActionResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  _cached_size_ = 0;
}

LTpaReportPlayerActionResp::~LTpaReportPlayerActionResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaReportPlayerActionResp)
  SharedDtor();
}

void LTpaReportPlayerActionResp::SharedDtor() {
}

void LTpaReportPlayerActionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaReportPlayerActionResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaReportPlayerActionResp& LTpaReportPlayerActionResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaReportPlayerActionResp();
  return *internal_default_instance();
}

LTpaReportPlayerActionResp* LTpaReportPlayerActionResp::New(::google::protobuf::Arena* arena) const {
  LTpaReportPlayerActionResp* n = new LTpaReportPlayerActionResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaReportPlayerActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaReportPlayerActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_raise_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool LTpaReportPlayerActionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaReportPlayerActionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allow_raise = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allow_raise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_allow_raise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaReportPlayerActionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaReportPlayerActionResp)
  return false;
#undef DO_
}

void LTpaReportPlayerActionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaReportPlayerActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->action_type(), output);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  // repeated uint32 allow_raise = 7;
  if (this->allow_raise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allow_raise_cached_byte_size_));
  }
  for (int i = 0, n = this->allow_raise_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->allow_raise(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaReportPlayerActionResp)
}

::google::protobuf::uint8* LTpaReportPlayerActionResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaReportPlayerActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->action_type(), target);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  // repeated uint32 allow_raise = 7;
  if (this->allow_raise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allow_raise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->allow_raise_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaReportPlayerActionResp)
  return target;
}

size_t LTpaReportPlayerActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaReportPlayerActionResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 allow_raise = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allow_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allow_raise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_type());
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaReportPlayerActionResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaReportPlayerActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaReportPlayerActionResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaReportPlayerActionResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaReportPlayerActionResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaReportPlayerActionResp)
    MergeFrom(*source);
  }
}

void LTpaReportPlayerActionResp::MergeFrom(const LTpaReportPlayerActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaReportPlayerActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_raise_.MergeFrom(from.allow_raise_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void LTpaReportPlayerActionResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaReportPlayerActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaReportPlayerActionResp::CopyFrom(const LTpaReportPlayerActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaReportPlayerActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaReportPlayerActionResp::IsInitialized() const {
  return true;
}

void LTpaReportPlayerActionResp::Swap(LTpaReportPlayerActionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaReportPlayerActionResp::InternalSwap(LTpaReportPlayerActionResp* other) {
  using std::swap;
  allow_raise_.InternalSwap(&other->allow_raise_);
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  swap(action_type_, other->action_type_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaReportPlayerActionResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryAIActionReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryAIActionReq::kLocalRoomIdFieldNumber;
const int LTpaQueryAIActionReq::kRoleIdFieldNumber;
const int LTpaQueryAIActionReq::kTpaRoomIdFieldNumber;
const int LTpaQueryAIActionReq::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryAIActionReq::LTpaQueryAIActionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAIActionReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryAIActionReq)
}
LTpaQueryAIActionReq::LTpaQueryAIActionReq(const LTpaQueryAIActionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryAIActionReq)
}

void LTpaQueryAIActionReq::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _cached_size_ = 0;
}

LTpaQueryAIActionReq::~LTpaQueryAIActionReq() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryAIActionReq)
  SharedDtor();
}

void LTpaQueryAIActionReq::SharedDtor() {
}

void LTpaQueryAIActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryAIActionReq::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryAIActionReq& LTpaQueryAIActionReq::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAIActionReq();
  return *internal_default_instance();
}

LTpaQueryAIActionReq* LTpaQueryAIActionReq::New(::google::protobuf::Arena* arena) const {
  LTpaQueryAIActionReq* n = new LTpaQueryAIActionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryAIActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryAIActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear();
}

bool LTpaQueryAIActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryAIActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryAIActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryAIActionReq)
  return false;
#undef DO_
}

void LTpaQueryAIActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryAIActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryAIActionReq)
}

::google::protobuf::uint8* LTpaQueryAIActionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryAIActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryAIActionReq)
  return target;
}

size_t LTpaQueryAIActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryAIActionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryAIActionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryAIActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryAIActionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryAIActionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryAIActionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryAIActionReq)
    MergeFrom(*source);
  }
}

void LTpaQueryAIActionReq::MergeFrom(const LTpaQueryAIActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryAIActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void LTpaQueryAIActionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryAIActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryAIActionReq::CopyFrom(const LTpaQueryAIActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryAIActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryAIActionReq::IsInitialized() const {
  return true;
}

void LTpaQueryAIActionReq::Swap(LTpaQueryAIActionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryAIActionReq::InternalSwap(LTpaQueryAIActionReq* other) {
  using std::swap;
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryAIActionReq::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LTpaQueryAIActionResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTpaQueryAIActionResp::kLocalRoomIdFieldNumber;
const int LTpaQueryAIActionResp::kRoleIdFieldNumber;
const int LTpaQueryAIActionResp::kTpaRoomIdFieldNumber;
const int LTpaQueryAIActionResp::kPlayerIdFieldNumber;
const int LTpaQueryAIActionResp::kActionTypeFieldNumber;
const int LTpaQueryAIActionResp::kSizeFieldNumber;
const int LTpaQueryAIActionResp::kAllowRaiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTpaQueryAIActionResp::LTpaQueryAIActionResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAIActionResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.LTpaQueryAIActionResp)
}
LTpaQueryAIActionResp::LTpaQueryAIActionResp(const LTpaQueryAIActionResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allow_raise_(from.allow_raise_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.LTpaQueryAIActionResp)
}

void LTpaQueryAIActionResp::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  _cached_size_ = 0;
}

LTpaQueryAIActionResp::~LTpaQueryAIActionResp() {
  // @@protoc_insertion_point(destructor:Pb.LTpaQueryAIActionResp)
  SharedDtor();
}

void LTpaQueryAIActionResp::SharedDtor() {
}

void LTpaQueryAIActionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTpaQueryAIActionResp::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LTpaQueryAIActionResp& LTpaQueryAIActionResp::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsLTpaQueryAIActionResp();
  return *internal_default_instance();
}

LTpaQueryAIActionResp* LTpaQueryAIActionResp::New(::google::protobuf::Arena* arena) const {
  LTpaQueryAIActionResp* n = new LTpaQueryAIActionResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTpaQueryAIActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.LTpaQueryAIActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_raise_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool LTpaQueryAIActionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.LTpaQueryAIActionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allow_raise = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allow_raise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_allow_raise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.LTpaQueryAIActionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.LTpaQueryAIActionResp)
  return false;
#undef DO_
}

void LTpaQueryAIActionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.LTpaQueryAIActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tpa_room_id(), output);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->action_type(), output);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  // repeated uint32 allow_raise = 7;
  if (this->allow_raise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allow_raise_cached_byte_size_));
  }
  for (int i = 0, n = this->allow_raise_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->allow_raise(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.LTpaQueryAIActionResp)
}

::google::protobuf::uint8* LTpaQueryAIActionResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.LTpaQueryAIActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tpa_room_id(), target);
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->action_type(), target);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  // repeated uint32 allow_raise = 7;
  if (this->allow_raise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allow_raise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->allow_raise_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.LTpaQueryAIActionResp)
  return target;
}

size_t LTpaQueryAIActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.LTpaQueryAIActionResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 allow_raise = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allow_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allow_raise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 tpa_room_id = 3;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint64 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 action_type = 5;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_type());
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTpaQueryAIActionResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.LTpaQueryAIActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LTpaQueryAIActionResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LTpaQueryAIActionResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.LTpaQueryAIActionResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.LTpaQueryAIActionResp)
    MergeFrom(*source);
  }
}

void LTpaQueryAIActionResp::MergeFrom(const LTpaQueryAIActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.LTpaQueryAIActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_raise_.MergeFrom(from.allow_raise_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void LTpaQueryAIActionResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.LTpaQueryAIActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTpaQueryAIActionResp::CopyFrom(const LTpaQueryAIActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.LTpaQueryAIActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTpaQueryAIActionResp::IsInitialized() const {
  return true;
}

void LTpaQueryAIActionResp::Swap(LTpaQueryAIActionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTpaQueryAIActionResp::InternalSwap(LTpaQueryAIActionResp* other) {
  using std::swap;
  allow_raise_.InternalSwap(&other->allow_raise_);
  swap(local_room_id_, other->local_room_id_);
  swap(role_id_, other->role_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(player_id_, other->player_id_);
  swap(action_type_, other->action_type_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTpaQueryAIActionResp::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TpaRedisPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpaRedisPlayer::kPlayerIdFieldNumber;
const int TpaRedisPlayer::kRoleIdFieldNumber;
const int TpaRedisPlayer::kSeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpaRedisPlayer::TpaRedisPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsTpaRedisPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.TpaRedisPlayer)
}
TpaRedisPlayer::TpaRedisPlayer(const TpaRedisPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seat_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(seat_));
  // @@protoc_insertion_point(copy_constructor:Pb.TpaRedisPlayer)
}

void TpaRedisPlayer::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(seat_));
  _cached_size_ = 0;
}

TpaRedisPlayer::~TpaRedisPlayer() {
  // @@protoc_insertion_point(destructor:Pb.TpaRedisPlayer)
  SharedDtor();
}

void TpaRedisPlayer::SharedDtor() {
}

void TpaRedisPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpaRedisPlayer::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TpaRedisPlayer& TpaRedisPlayer::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsTpaRedisPlayer();
  return *internal_default_instance();
}

TpaRedisPlayer* TpaRedisPlayer::New(::google::protobuf::Arena* arena) const {
  TpaRedisPlayer* n = new TpaRedisPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpaRedisPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.TpaRedisPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(seat_));
  _internal_metadata_.Clear();
}

bool TpaRedisPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.TpaRedisPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.TpaRedisPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.TpaRedisPlayer)
  return false;
#undef DO_
}

void TpaRedisPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.TpaRedisPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 seat = 3;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.TpaRedisPlayer)
}

::google::protobuf::uint8* TpaRedisPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.TpaRedisPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 seat = 3;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.TpaRedisPlayer)
  return target;
}

size_t TpaRedisPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.TpaRedisPlayer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 seat = 3;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpaRedisPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.TpaRedisPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const TpaRedisPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TpaRedisPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.TpaRedisPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.TpaRedisPlayer)
    MergeFrom(*source);
  }
}

void TpaRedisPlayer::MergeFrom(const TpaRedisPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.TpaRedisPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
}

void TpaRedisPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.TpaRedisPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpaRedisPlayer::CopyFrom(const TpaRedisPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.TpaRedisPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpaRedisPlayer::IsInitialized() const {
  return true;
}

void TpaRedisPlayer::Swap(TpaRedisPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpaRedisPlayer::InternalSwap(TpaRedisPlayer* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(role_id_, other->role_id_);
  swap(seat_, other->seat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TpaRedisPlayer::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TpaRedisPlayerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpaRedisPlayerList::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpaRedisPlayerList::TpaRedisPlayerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsTpaRedisPlayerList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.TpaRedisPlayerList)
}
TpaRedisPlayerList::TpaRedisPlayerList(const TpaRedisPlayerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb.TpaRedisPlayerList)
}

void TpaRedisPlayerList::SharedCtor() {
  _cached_size_ = 0;
}

TpaRedisPlayerList::~TpaRedisPlayerList() {
  // @@protoc_insertion_point(destructor:Pb.TpaRedisPlayerList)
  SharedDtor();
}

void TpaRedisPlayerList::SharedDtor() {
}

void TpaRedisPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpaRedisPlayerList::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TpaRedisPlayerList& TpaRedisPlayerList::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsTpaRedisPlayerList();
  return *internal_default_instance();
}

TpaRedisPlayerList* TpaRedisPlayerList::New(::google::protobuf::Arena* arena) const {
  TpaRedisPlayerList* n = new TpaRedisPlayerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpaRedisPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.TpaRedisPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  _internal_metadata_.Clear();
}

bool TpaRedisPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.TpaRedisPlayerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.TpaRedisPlayer player_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.TpaRedisPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.TpaRedisPlayerList)
  return false;
#undef DO_
}

void TpaRedisPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.TpaRedisPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.TpaRedisPlayer player_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.TpaRedisPlayerList)
}

::google::protobuf::uint8* TpaRedisPlayerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.TpaRedisPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.TpaRedisPlayer player_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.TpaRedisPlayerList)
  return target;
}

size_t TpaRedisPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.TpaRedisPlayerList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.TpaRedisPlayer player_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpaRedisPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.TpaRedisPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const TpaRedisPlayerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TpaRedisPlayerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.TpaRedisPlayerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.TpaRedisPlayerList)
    MergeFrom(*source);
  }
}

void TpaRedisPlayerList::MergeFrom(const TpaRedisPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.TpaRedisPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
}

void TpaRedisPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.TpaRedisPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpaRedisPlayerList::CopyFrom(const TpaRedisPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.TpaRedisPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpaRedisPlayerList::IsInitialized() const {
  return true;
}

void TpaRedisPlayerList::Swap(TpaRedisPlayerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpaRedisPlayerList::InternalSwap(TpaRedisPlayerList* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TpaRedisPlayerList::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TpaAcpcMatchState::InitAsDefaultInstance() {
}
void TpaAcpcMatchState::clear_round_actions() {
  round_actions_.Clear();
}
void TpaAcpcMatchState::clear_board_cards() {
  board_cards_.Clear();
}
void TpaAcpcMatchState::clear_hole_cards() {
  hole_cards_.Clear();
}
void TpaAcpcMatchState::clear_player_hole_cards() {
  player_hole_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpaAcpcMatchState::kLocalRoomIdFieldNumber;
const int TpaAcpcMatchState::kTpaRoomIdFieldNumber;
const int TpaAcpcMatchState::kRoleIdFieldNumber;
const int TpaAcpcMatchState::kRoleSeatFieldNumber;
const int TpaAcpcMatchState::kLittleBlindSeatFieldNumber;
const int TpaAcpcMatchState::kHandIdFieldNumber;
const int TpaAcpcMatchState::kMaxSpentFieldNumber;
const int TpaAcpcMatchState::kMinNolimitRaiseToFieldNumber;
const int TpaAcpcMatchState::kRoundFieldNumber;
const int TpaAcpcMatchState::kFinishedFieldNumber;
const int TpaAcpcMatchState::kSpentFieldNumber;
const int TpaAcpcMatchState::kRoundActionsFieldNumber;
const int TpaAcpcMatchState::kFoldPlayersFieldNumber;
const int TpaAcpcMatchState::kBoardCardsFieldNumber;
const int TpaAcpcMatchState::kHoleCardsFieldNumber;
const int TpaAcpcMatchState::kPlayerHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpaAcpcMatchState::TpaAcpcMatchState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsTpaAcpcMatchState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.TpaAcpcMatchState)
}
TpaAcpcMatchState::TpaAcpcMatchState(const TpaAcpcMatchState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spent_(from.spent_),
      round_actions_(from.round_actions_),
      fold_players_(from.fold_players_),
      board_cards_(from.board_cards_),
      hole_cards_(from.hole_cards_),
      player_hole_cards_(from.player_hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_room_id_, &from.local_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&local_room_id_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:Pb.TpaAcpcMatchState)
}

void TpaAcpcMatchState::SharedCtor() {
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(finished_));
  _cached_size_ = 0;
}

TpaAcpcMatchState::~TpaAcpcMatchState() {
  // @@protoc_insertion_point(destructor:Pb.TpaAcpcMatchState)
  SharedDtor();
}

void TpaAcpcMatchState::SharedDtor() {
}

void TpaAcpcMatchState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpaAcpcMatchState::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TpaAcpcMatchState& TpaAcpcMatchState::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsTpaAcpcMatchState();
  return *internal_default_instance();
}

TpaAcpcMatchState* TpaAcpcMatchState::New(::google::protobuf::Arena* arena) const {
  TpaAcpcMatchState* n = new TpaAcpcMatchState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpaAcpcMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.TpaAcpcMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spent_.Clear();
  round_actions_.Clear();
  fold_players_.Clear();
  board_cards_.Clear();
  hole_cards_.Clear();
  player_hole_cards_.Clear();
  ::memset(&local_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_room_id_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

bool TpaAcpcMatchState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.TpaAcpcMatchState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 local_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 role_seat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 little_blind_seat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &little_blind_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hand_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_spent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_nolimit_raise_to = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_nolimit_raise_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 finished = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 spent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcRound round_actions = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_round_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fold_players = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fold_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_fold_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.HoleCards player_hole_cards = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.TpaAcpcMatchState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.TpaAcpcMatchState)
  return false;
#undef DO_
}

void TpaAcpcMatchState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.TpaAcpcMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_room_id(), output);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_room_id(), output);
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // int32 role_seat = 4;
  if (this->role_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_seat(), output);
  }

  // int32 little_blind_seat = 5;
  if (this->little_blind_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->little_blind_seat(), output);
  }

  // int32 hand_id = 6;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hand_id(), output);
  }

  // int32 max_spent = 7;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_spent(), output);
  }

  // int32 min_nolimit_raise_to = 8;
  if (this->min_nolimit_raise_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_nolimit_raise_to(), output);
  }

  // int32 round = 9;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->round(), output);
  }

  // int32 finished = 10;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->finished(), output);
  }

  // repeated int32 spent = 11;
  if (this->spent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _spent_cached_byte_size_));
  }
  for (int i = 0, n = this->spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->spent(i), output);
  }

  // repeated .Pb.AcpcRound round_actions = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->round_actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->round_actions(static_cast<int>(i)), output);
  }

  // repeated int32 fold_players = 13;
  if (this->fold_players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fold_players_cached_byte_size_));
  }
  for (int i = 0, n = this->fold_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fold_players(i), output);
  }

  // repeated .Pb.AcpcCard board_cards = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->board_cards(static_cast<int>(i)), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->hole_cards(static_cast<int>(i)), output);
  }

  // repeated .Pb.HoleCards player_hole_cards = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->player_hole_cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.TpaAcpcMatchState)
}

::google::protobuf::uint8* TpaAcpcMatchState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.TpaAcpcMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_room_id(), target);
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_room_id(), target);
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // int32 role_seat = 4;
  if (this->role_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_seat(), target);
  }

  // int32 little_blind_seat = 5;
  if (this->little_blind_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->little_blind_seat(), target);
  }

  // int32 hand_id = 6;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hand_id(), target);
  }

  // int32 max_spent = 7;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_spent(), target);
  }

  // int32 min_nolimit_raise_to = 8;
  if (this->min_nolimit_raise_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->min_nolimit_raise_to(), target);
  }

  // int32 round = 9;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->round(), target);
  }

  // int32 finished = 10;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->finished(), target);
  }

  // repeated int32 spent = 11;
  if (this->spent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _spent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->spent_, target);
  }

  // repeated .Pb.AcpcRound round_actions = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->round_actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->round_actions(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 fold_players = 13;
  if (this->fold_players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _fold_players_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fold_players_, target);
  }

  // repeated .Pb.AcpcCard board_cards = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.AcpcCard hole_cards = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.HoleCards player_hole_cards = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->player_hole_cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.TpaAcpcMatchState)
  return target;
}

size_t TpaAcpcMatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.TpaAcpcMatchState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 spent = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->spent_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.AcpcRound round_actions = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->round_actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->round_actions(static_cast<int>(i)));
    }
  }

  // repeated int32 fold_players = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fold_players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fold_players_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.AcpcCard board_cards = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.AcpcCard hole_cards = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.HoleCards player_hole_cards = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->player_hole_cards_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_hole_cards(static_cast<int>(i)));
    }
  }

  // uint64 local_room_id = 1;
  if (this->local_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_room_id());
  }

  // uint32 tpa_room_id = 2;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 role_seat = 4;
  if (this->role_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_seat());
  }

  // int32 little_blind_seat = 5;
  if (this->little_blind_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->little_blind_seat());
  }

  // int32 hand_id = 6;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hand_id());
  }

  // int32 max_spent = 7;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_spent());
  }

  // int32 min_nolimit_raise_to = 8;
  if (this->min_nolimit_raise_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_nolimit_raise_to());
  }

  // int32 round = 9;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // int32 finished = 10;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finished());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpaAcpcMatchState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.TpaAcpcMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  const TpaAcpcMatchState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TpaAcpcMatchState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.TpaAcpcMatchState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.TpaAcpcMatchState)
    MergeFrom(*source);
  }
}

void TpaAcpcMatchState::MergeFrom(const TpaAcpcMatchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.TpaAcpcMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spent_.MergeFrom(from.spent_);
  round_actions_.MergeFrom(from.round_actions_);
  fold_players_.MergeFrom(from.fold_players_);
  board_cards_.MergeFrom(from.board_cards_);
  hole_cards_.MergeFrom(from.hole_cards_);
  player_hole_cards_.MergeFrom(from.player_hole_cards_);
  if (from.local_room_id() != 0) {
    set_local_room_id(from.local_room_id());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.role_seat() != 0) {
    set_role_seat(from.role_seat());
  }
  if (from.little_blind_seat() != 0) {
    set_little_blind_seat(from.little_blind_seat());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
  if (from.min_nolimit_raise_to() != 0) {
    set_min_nolimit_raise_to(from.min_nolimit_raise_to());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void TpaAcpcMatchState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.TpaAcpcMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpaAcpcMatchState::CopyFrom(const TpaAcpcMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.TpaAcpcMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpaAcpcMatchState::IsInitialized() const {
  return true;
}

void TpaAcpcMatchState::Swap(TpaAcpcMatchState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpaAcpcMatchState::InternalSwap(TpaAcpcMatchState* other) {
  using std::swap;
  spent_.InternalSwap(&other->spent_);
  round_actions_.InternalSwap(&other->round_actions_);
  fold_players_.InternalSwap(&other->fold_players_);
  board_cards_.InternalSwap(&other->board_cards_);
  hole_cards_.InternalSwap(&other->hole_cards_);
  player_hole_cards_.InternalSwap(&other->player_hole_cards_);
  swap(local_room_id_, other->local_room_id_);
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(role_id_, other->role_id_);
  swap(role_seat_, other->role_seat_);
  swap(little_blind_seat_, other->little_blind_seat_);
  swap(hand_id_, other->hand_id_);
  swap(max_spent_, other->max_spent_);
  swap(min_nolimit_raise_to_, other->min_nolimit_raise_to_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TpaAcpcMatchState::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomAttrForTpa::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomAttrForTpa::kTpaRoomIdFieldNumber;
const int RoomAttrForTpa::kTpaServerIdFieldNumber;
const int RoomAttrForTpa::kWaitRobotAcitonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomAttrForTpa::RoomAttrForTpa()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ltpa_2eproto::InitDefaultsRoomAttrForTpa();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoomAttrForTpa)
}
RoomAttrForTpa::RoomAttrForTpa(const RoomAttrForTpa& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tpa_room_id_, &from.tpa_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_robot_aciton_) -
    reinterpret_cast<char*>(&tpa_room_id_)) + sizeof(wait_robot_aciton_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoomAttrForTpa)
}

void RoomAttrForTpa::SharedCtor() {
  ::memset(&tpa_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_robot_aciton_) -
      reinterpret_cast<char*>(&tpa_room_id_)) + sizeof(wait_robot_aciton_));
  _cached_size_ = 0;
}

RoomAttrForTpa::~RoomAttrForTpa() {
  // @@protoc_insertion_point(destructor:Pb.RoomAttrForTpa)
  SharedDtor();
}

void RoomAttrForTpa::SharedDtor() {
}

void RoomAttrForTpa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomAttrForTpa::descriptor() {
  ::protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomAttrForTpa& RoomAttrForTpa::default_instance() {
  ::protobuf_ltpa_2eproto::InitDefaultsRoomAttrForTpa();
  return *internal_default_instance();
}

RoomAttrForTpa* RoomAttrForTpa::New(::google::protobuf::Arena* arena) const {
  RoomAttrForTpa* n = new RoomAttrForTpa;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomAttrForTpa::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoomAttrForTpa)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tpa_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_robot_aciton_) -
      reinterpret_cast<char*>(&tpa_room_id_)) + sizeof(wait_robot_aciton_));
  _internal_metadata_.Clear();
}

bool RoomAttrForTpa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoomAttrForTpa)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tpa_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wait_robot_aciton = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_robot_aciton_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoomAttrForTpa)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoomAttrForTpa)
  return false;
#undef DO_
}

void RoomAttrForTpa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoomAttrForTpa)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tpa_room_id = 1;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tpa_room_id(), output);
  }

  // uint32 tpa_server_id = 2;
  if (this->tpa_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpa_server_id(), output);
  }

  // int32 wait_robot_aciton = 3;
  if (this->wait_robot_aciton() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wait_robot_aciton(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoomAttrForTpa)
}

::google::protobuf::uint8* RoomAttrForTpa::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoomAttrForTpa)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tpa_room_id = 1;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tpa_room_id(), target);
  }

  // uint32 tpa_server_id = 2;
  if (this->tpa_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpa_server_id(), target);
  }

  // int32 wait_robot_aciton = 3;
  if (this->wait_robot_aciton() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_robot_aciton(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoomAttrForTpa)
  return target;
}

size_t RoomAttrForTpa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoomAttrForTpa)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 tpa_room_id = 1;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  // uint32 tpa_server_id = 2;
  if (this->tpa_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_server_id());
  }

  // int32 wait_robot_aciton = 3;
  if (this->wait_robot_aciton() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wait_robot_aciton());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomAttrForTpa::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoomAttrForTpa)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomAttrForTpa* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomAttrForTpa>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoomAttrForTpa)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoomAttrForTpa)
    MergeFrom(*source);
  }
}

void RoomAttrForTpa::MergeFrom(const RoomAttrForTpa& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoomAttrForTpa)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
  if (from.tpa_server_id() != 0) {
    set_tpa_server_id(from.tpa_server_id());
  }
  if (from.wait_robot_aciton() != 0) {
    set_wait_robot_aciton(from.wait_robot_aciton());
  }
}

void RoomAttrForTpa::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoomAttrForTpa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomAttrForTpa::CopyFrom(const RoomAttrForTpa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoomAttrForTpa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAttrForTpa::IsInitialized() const {
  return true;
}

void RoomAttrForTpa::Swap(RoomAttrForTpa* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomAttrForTpa::InternalSwap(RoomAttrForTpa* other) {
  using std::swap;
  swap(tpa_room_id_, other->tpa_room_id_);
  swap(tpa_server_id_, other->tpa_server_id_);
  swap(wait_robot_aciton_, other->wait_robot_aciton_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomAttrForTpa::GetMetadata() const {
  protobuf_ltpa_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ltpa_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
