// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: um.proto

#include "um.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class UmLoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmLoginReq>
      _instance;
} _UmLoginReq_default_instance_;
class UmLoginRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmLoginResp>
      _instance;
} _UmLoginResp_default_instance_;
class UmLogoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmLogout>
      _instance;
} _UmLogout_default_instance_;
class UmRechargeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmRecharge>
      _instance;
} _UmRecharge_default_instance_;
class UmOnlinePlayersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmOnlinePlayers>
      _instance;
} _UmOnlinePlayers_default_instance_;
class UmQueryUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmQueryUser>
      _instance;
} _UmQueryUser_default_instance_;
class UmUserConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmUserConfig>
      _instance;
} _UmUserConfig_default_instance_;
class UserConnExitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserConnExit>
      _instance;
} _UserConnExit_default_instance_;
class ResetCurrencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetCurrency>
      _instance;
} _ResetCurrency_default_instance_;
class ResetUserForTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetUserForTest>
      _instance;
} _ResetUserForTest_default_instance_;
class UmUserMatchInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UmUserMatchInfo>
      _instance;
} _UmUserMatchInfo_default_instance_;
}  // namespace Pb
namespace protobuf_um_2eproto {
void InitDefaultsUmLoginReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsServerID();
  {
    void* ptr = &::Pb::_UmLoginReq_default_instance_;
    new (ptr) ::Pb::UmLoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmLoginReq::InitAsDefaultInstance();
}

void InitDefaultsUmLoginReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmLoginReqImpl);
}

void InitDefaultsUmLoginRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmLoginResp_default_instance_;
    new (ptr) ::Pb::UmLoginResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmLoginResp::InitAsDefaultInstance();
}

void InitDefaultsUmLoginResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmLoginRespImpl);
}

void InitDefaultsUmLogoutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmLogout_default_instance_;
    new (ptr) ::Pb::UmLogout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmLogout::InitAsDefaultInstance();
}

void InitDefaultsUmLogout() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmLogoutImpl);
}

void InitDefaultsUmRechargeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmRecharge_default_instance_;
    new (ptr) ::Pb::UmRecharge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmRecharge::InitAsDefaultInstance();
}

void InitDefaultsUmRecharge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmRechargeImpl);
}

void InitDefaultsUmOnlinePlayersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmOnlinePlayers_default_instance_;
    new (ptr) ::Pb::UmOnlinePlayers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmOnlinePlayers::InitAsDefaultInstance();
}

void InitDefaultsUmOnlinePlayers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmOnlinePlayersImpl);
}

void InitDefaultsUmQueryUserImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmQueryUser_default_instance_;
    new (ptr) ::Pb::UmQueryUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmQueryUser::InitAsDefaultInstance();
}

void InitDefaultsUmQueryUser() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmQueryUserImpl);
}

void InitDefaultsUmUserConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmUserConfig_default_instance_;
    new (ptr) ::Pb::UmUserConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmUserConfig::InitAsDefaultInstance();
}

void InitDefaultsUmUserConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmUserConfigImpl);
}

void InitDefaultsUserConnExitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsServerID();
  {
    void* ptr = &::Pb::_UserConnExit_default_instance_;
    new (ptr) ::Pb::UserConnExit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UserConnExit::InitAsDefaultInstance();
}

void InitDefaultsUserConnExit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserConnExitImpl);
}

void InitDefaultsResetCurrencyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_ResetCurrency_default_instance_;
    new (ptr) ::Pb::ResetCurrency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ResetCurrency::InitAsDefaultInstance();
}

void InitDefaultsResetCurrency() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResetCurrencyImpl);
}

void InitDefaultsResetUserForTestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_ResetUserForTest_default_instance_;
    new (ptr) ::Pb::ResetUserForTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ResetUserForTest::InitAsDefaultInstance();
}

void InitDefaultsResetUserForTest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResetUserForTestImpl);
}

void InitDefaultsUmUserMatchInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_UmUserMatchInfo_default_instance_;
    new (ptr) ::Pb::UmUserMatchInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::UmUserMatchInfo::InitAsDefaultInstance();
}

void InitDefaultsUmUserMatchInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUmUserMatchInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, login_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginReq, tpa_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, role_currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, draw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, lose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, acpc_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, acpc_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, view_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, tpa_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLoginResp, acpc_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmLogout, role_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmRecharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmRecharge, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmRecharge, money_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmOnlinePlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmOnlinePlayers, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmOnlinePlayers, players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, draw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, lose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmQueryUser, hand_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, draw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, lose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserConfig, reset_currency_times_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UserConnExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UserConnExit, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UserConnExit, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UserConnExit, conn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetCurrency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetCurrency, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetCurrency, currency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetUserForTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetUserForTest, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetUserForTest, role_currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ResetUserForTest, cmd_password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserMatchInfo, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserMatchInfo, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserMatchInfo, hands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserMatchInfo, tickets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::UmUserMatchInfo, match_hands_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::UmLoginReq)},
  { 11, -1, sizeof(::Pb::UmLoginResp)},
  { 33, -1, sizeof(::Pb::UmLogout)},
  { 39, -1, sizeof(::Pb::UmRecharge)},
  { 46, -1, sizeof(::Pb::UmOnlinePlayers)},
  { 53, -1, sizeof(::Pb::UmQueryUser)},
  { 64, -1, sizeof(::Pb::UmUserConfig)},
  { 75, -1, sizeof(::Pb::UserConnExit)},
  { 83, -1, sizeof(::Pb::ResetCurrency)},
  { 90, -1, sizeof(::Pb::ResetUserForTest)},
  { 98, -1, sizeof(::Pb::UmUserMatchInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmLogout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmRecharge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmOnlinePlayers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmQueryUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmUserConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UserConnExit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ResetCurrency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ResetUserForTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_UmUserMatchInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "um.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\010um.proto\022\002Pb\032\014system.proto\"\222\001\n\nUmLogin"
      "Req\022\021\n\tuser_name\030\001 \001(\t\022\022\n\nlogin_type\030\002 \001"
      "(\r\022\023\n\013client_type\030\003 \001(\r\022\020\n\010password\030\004 \001("
      "\t\022\037\n\tserver_id\030\005 \001(\0132\014.Pb.ServerID\022\025\n\rtp"
      "a_player_id\030\006 \001(\004\"\315\002\n\013UmLoginResp\022\017\n\007rol"
      "e_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\020\n\010role_im"
      "g\030\003 \001(\t\022\023\n\013role_region\030\004 \001(\r\022\023\n\013role_ser"
      "ver\030\005 \001(\r\022\020\n\010role_sex\030\006 \001(\r\022\022\n\nrole_leve"
      "l\030\007 \001(\r\022\025\n\rrole_currency\030\010 \001(\003\022\014\n\004draw\030\t"
      " \001(\r\022\013\n\003win\030\n \001(\r\022\014\n\004lose\030\013 \001(\r\022\017\n\007acpc_"
      "ip\030\014 \001(\t\022\021\n\tacpc_port\030\r \001(\r\022\017\n\007room_id\030\016"
      " \001(\004\022\024\n\014view_room_id\030\017 \001(\004\022\025\n\rtpa_player"
      "_id\030\020 \001(\004\022\026\n\016acpc_server_id\030\021 \001(\r\"\033\n\010UmL"
      "ogout\022\017\n\007role_id\030\001 \001(\r\",\n\nUmRecharge\022\017\n\007"
      "role_id\030\001 \001(\r\022\r\n\005money\030\002 \001(\r\"3\n\017UmOnline"
      "Players\022\017\n\007role_id\030\001 \001(\r\022\017\n\007players\030\002 \001("
      "\r\"g\n\013UmQueryUser\022\017\n\007role_id\030\001 \001(\r\022\r\n\005mon"
      "ey\030\002 \001(\005\022\013\n\003win\030\003 \001(\r\022\014\n\004draw\030\004 \001(\r\022\014\n\004l"
      "ose\030\005 \001(\r\022\017\n\007hand_id\030\006 \001(\r\"u\n\014UmUserConf"
      "ig\022\017\n\007role_id\030\001 \001(\r\022\r\n\005money\030\002 \001(\005\022\013\n\003wi"
      "n\030\003 \001(\r\022\014\n\004draw\030\004 \001(\r\022\014\n\004lose\030\005 \001(\r\022\034\n\024r"
      "eset_currency_times\030\006 \001(\r\"Q\n\014UserConnExi"
      "t\022\017\n\007role_id\030\001 \001(\r\022\037\n\tserver_id\030\002 \001(\0132\014."
      "Pb.ServerID\022\017\n\007conn_id\030\003 \001(\r\"2\n\rResetCur"
      "rency\022\017\n\007role_id\030\001 \001(\r\022\020\n\010currency\030\002 \001(\r"
      "\"P\n\020ResetUserForTest\022\017\n\007role_id\030\001 \001(\r\022\025\n"
      "\rrole_currency\030\002 \001(\003\022\024\n\014cmd_password\030\003 \001"
      "(\t\"f\n\017UmUserMatchInfo\022\017\n\007role_id\030\001 \001(\r\022\r"
      "\n\005money\030\002 \001(\005\022\r\n\005hands\030\003 \001(\r\022\017\n\007tickets\030"
      "\004 \001(\r\022\023\n\013match_hands\030\005 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "um.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_um_2eproto
namespace Pb {

// ===================================================================

void UmLoginReq::InitAsDefaultInstance() {
  ::Pb::_UmLoginReq_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::Pb::ServerID*>(
      ::Pb::ServerID::internal_default_instance());
}
void UmLoginReq::clear_server_id() {
  if (GetArenaNoVirtual() == NULL && server_id_ != NULL) {
    delete server_id_;
  }
  server_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmLoginReq::kUserNameFieldNumber;
const int UmLoginReq::kLoginTypeFieldNumber;
const int UmLoginReq::kClientTypeFieldNumber;
const int UmLoginReq::kPasswordFieldNumber;
const int UmLoginReq::kServerIdFieldNumber;
const int UmLoginReq::kTpaPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmLoginReq::UmLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmLoginReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmLoginReq)
}
UmLoginReq::UmLoginReq(const UmLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_server_id()) {
    server_id_ = new ::Pb::ServerID(*from.server_id_);
  } else {
    server_id_ = NULL;
  }
  ::memcpy(&login_type_, &from.login_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_player_id_) -
    reinterpret_cast<char*>(&login_type_)) + sizeof(tpa_player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmLoginReq)
}

void UmLoginReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_player_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(tpa_player_id_));
  _cached_size_ = 0;
}

UmLoginReq::~UmLoginReq() {
  // @@protoc_insertion_point(destructor:Pb.UmLoginReq)
  SharedDtor();
}

void UmLoginReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_id_;
}

void UmLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmLoginReq::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmLoginReq& UmLoginReq::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmLoginReq();
  return *internal_default_instance();
}

UmLoginReq* UmLoginReq::New(::google::protobuf::Arena* arena) const {
  UmLoginReq* n = new UmLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && server_id_ != NULL) {
    delete server_id_;
  }
  server_id_ = NULL;
  ::memset(&login_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_player_id_) -
      reinterpret_cast<char*>(&login_type_)) + sizeof(tpa_player_id_));
  _internal_metadata_.Clear();
}

bool UmLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.UmLoginReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 login_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.UmLoginReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.ServerID server_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tpa_player_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tpa_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmLoginReq)
  return false;
#undef DO_
}

void UmLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // uint32 login_type = 2;
  if (this->login_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_type(), output);
  }

  // uint32 client_type = 3;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_type(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // .Pb.ServerID server_id = 5;
  if (this->has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->server_id_, output);
  }

  // uint64 tpa_player_id = 6;
  if (this->tpa_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tpa_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmLoginReq)
}

::google::protobuf::uint8* UmLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // uint32 login_type = 2;
  if (this->login_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_type(), target);
  }

  // uint32 client_type = 3;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_type(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // .Pb.ServerID server_id = 5;
  if (this->has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->server_id_, deterministic, target);
  }

  // uint64 tpa_player_id = 6;
  if (this->tpa_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tpa_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmLoginReq)
  return target;
}

size_t UmLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmLoginReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .Pb.ServerID server_id = 5;
  if (this->has_server_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->server_id_);
  }

  // uint32 login_type = 2;
  if (this->login_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->login_type());
  }

  // uint32 client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_type());
  }

  // uint64 tpa_player_id = 6;
  if (this->tpa_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tpa_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UmLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmLoginReq)
    MergeFrom(*source);
  }
}

void UmLoginReq::MergeFrom(const UmLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_server_id()) {
    mutable_server_id()->::Pb::ServerID::MergeFrom(from.server_id());
  }
  if (from.login_type() != 0) {
    set_login_type(from.login_type());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
  if (from.tpa_player_id() != 0) {
    set_tpa_player_id(from.tpa_player_id());
  }
}

void UmLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmLoginReq::CopyFrom(const UmLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmLoginReq::IsInitialized() const {
  return true;
}

void UmLoginReq::Swap(UmLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmLoginReq::InternalSwap(UmLoginReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  swap(server_id_, other->server_id_);
  swap(login_type_, other->login_type_);
  swap(client_type_, other->client_type_);
  swap(tpa_player_id_, other->tpa_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmLoginReq::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmLoginResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmLoginResp::kRoleIdFieldNumber;
const int UmLoginResp::kRoleNameFieldNumber;
const int UmLoginResp::kRoleImgFieldNumber;
const int UmLoginResp::kRoleRegionFieldNumber;
const int UmLoginResp::kRoleServerFieldNumber;
const int UmLoginResp::kRoleSexFieldNumber;
const int UmLoginResp::kRoleLevelFieldNumber;
const int UmLoginResp::kRoleCurrencyFieldNumber;
const int UmLoginResp::kDrawFieldNumber;
const int UmLoginResp::kWinFieldNumber;
const int UmLoginResp::kLoseFieldNumber;
const int UmLoginResp::kAcpcIpFieldNumber;
const int UmLoginResp::kAcpcPortFieldNumber;
const int UmLoginResp::kRoomIdFieldNumber;
const int UmLoginResp::kViewRoomIdFieldNumber;
const int UmLoginResp::kTpaPlayerIdFieldNumber;
const int UmLoginResp::kAcpcServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmLoginResp::UmLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmLoginResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmLoginResp)
}
UmLoginResp::UmLoginResp(const UmLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_img().size() > 0) {
    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  acpc_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acpc_ip().size() > 0) {
    acpc_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acpc_ip_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_player_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(tpa_player_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmLoginResp)
}

void UmLoginResp::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acpc_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_player_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(tpa_player_id_));
  _cached_size_ = 0;
}

UmLoginResp::~UmLoginResp() {
  // @@protoc_insertion_point(destructor:Pb.UmLoginResp)
  SharedDtor();
}

void UmLoginResp::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acpc_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UmLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmLoginResp::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmLoginResp& UmLoginResp::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmLoginResp();
  return *internal_default_instance();
}

UmLoginResp* UmLoginResp::New(::google::protobuf::Arena* arena) const {
  UmLoginResp* n = new UmLoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acpc_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_player_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(tpa_player_id_));
  _internal_metadata_.Clear();
}

bool UmLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.UmLoginResp.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_img = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_img()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_img().data(), static_cast<int>(this->role_img().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.UmLoginResp.role_img"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_region = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_server = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_sex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 role_currency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 draw = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 win = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lose = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string acpc_ip = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acpc_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acpc_ip().data(), static_cast<int>(this->acpc_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.UmLoginResp.acpc_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 acpc_port = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acpc_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 view_room_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &view_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tpa_player_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tpa_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 acpc_server_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acpc_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmLoginResp)
  return false;
#undef DO_
}

void UmLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginResp.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // string role_img = 3;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginResp.role_img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->role_img(), output);
  }

  // uint32 role_region = 4;
  if (this->role_region() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_region(), output);
  }

  // uint32 role_server = 5;
  if (this->role_server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_server(), output);
  }

  // uint32 role_sex = 6;
  if (this->role_sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_sex(), output);
  }

  // uint32 role_level = 7;
  if (this->role_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->role_level(), output);
  }

  // int64 role_currency = 8;
  if (this->role_currency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->role_currency(), output);
  }

  // uint32 draw = 9;
  if (this->draw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->draw(), output);
  }

  // uint32 win = 10;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->win(), output);
  }

  // uint32 lose = 11;
  if (this->lose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lose(), output);
  }

  // string acpc_ip = 12;
  if (this->acpc_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acpc_ip().data(), static_cast<int>(this->acpc_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginResp.acpc_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->acpc_ip(), output);
  }

  // uint32 acpc_port = 13;
  if (this->acpc_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->acpc_port(), output);
  }

  // uint64 room_id = 14;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->room_id(), output);
  }

  // uint64 view_room_id = 15;
  if (this->view_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->view_room_id(), output);
  }

  // uint64 tpa_player_id = 16;
  if (this->tpa_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->tpa_player_id(), output);
  }

  // uint32 acpc_server_id = 17;
  if (this->acpc_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->acpc_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmLoginResp)
}

::google::protobuf::uint8* UmLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginResp.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // string role_img = 3;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginResp.role_img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_img(), target);
  }

  // uint32 role_region = 4;
  if (this->role_region() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_region(), target);
  }

  // uint32 role_server = 5;
  if (this->role_server() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_server(), target);
  }

  // uint32 role_sex = 6;
  if (this->role_sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_sex(), target);
  }

  // uint32 role_level = 7;
  if (this->role_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->role_level(), target);
  }

  // int64 role_currency = 8;
  if (this->role_currency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->role_currency(), target);
  }

  // uint32 draw = 9;
  if (this->draw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->draw(), target);
  }

  // uint32 win = 10;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->win(), target);
  }

  // uint32 lose = 11;
  if (this->lose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lose(), target);
  }

  // string acpc_ip = 12;
  if (this->acpc_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acpc_ip().data(), static_cast<int>(this->acpc_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.UmLoginResp.acpc_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->acpc_ip(), target);
  }

  // uint32 acpc_port = 13;
  if (this->acpc_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->acpc_port(), target);
  }

  // uint64 room_id = 14;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->room_id(), target);
  }

  // uint64 view_room_id = 15;
  if (this->view_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->view_room_id(), target);
  }

  // uint64 tpa_player_id = 16;
  if (this->tpa_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->tpa_player_id(), target);
  }

  // uint32 acpc_server_id = 17;
  if (this->acpc_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->acpc_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmLoginResp)
  return target;
}

size_t UmLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmLoginResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string role_img = 3;
  if (this->role_img().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_img());
  }

  // string acpc_ip = 12;
  if (this->acpc_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acpc_ip());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 role_region = 4;
  if (this->role_region() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_region());
  }

  // uint32 role_server = 5;
  if (this->role_server() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_server());
  }

  // uint32 role_sex = 6;
  if (this->role_sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_sex());
  }

  // int64 role_currency = 8;
  if (this->role_currency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->role_currency());
  }

  // uint32 role_level = 7;
  if (this->role_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_level());
  }

  // uint32 draw = 9;
  if (this->draw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->draw());
  }

  // uint32 win = 10;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win());
  }

  // uint32 lose = 11;
  if (this->lose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lose());
  }

  // uint64 room_id = 14;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint64 view_room_id = 15;
  if (this->view_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->view_room_id());
  }

  // uint32 acpc_port = 13;
  if (this->acpc_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acpc_port());
  }

  // uint32 acpc_server_id = 17;
  if (this->acpc_server_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acpc_server_id());
  }

  // uint64 tpa_player_id = 16;
  if (this->tpa_player_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tpa_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const UmLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmLoginResp)
    MergeFrom(*source);
  }
}

void UmLoginResp::MergeFrom(const UmLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_img().size() > 0) {

    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  if (from.acpc_ip().size() > 0) {

    acpc_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acpc_ip_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.role_region() != 0) {
    set_role_region(from.role_region());
  }
  if (from.role_server() != 0) {
    set_role_server(from.role_server());
  }
  if (from.role_sex() != 0) {
    set_role_sex(from.role_sex());
  }
  if (from.role_currency() != 0) {
    set_role_currency(from.role_currency());
  }
  if (from.role_level() != 0) {
    set_role_level(from.role_level());
  }
  if (from.draw() != 0) {
    set_draw(from.draw());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.lose() != 0) {
    set_lose(from.lose());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.view_room_id() != 0) {
    set_view_room_id(from.view_room_id());
  }
  if (from.acpc_port() != 0) {
    set_acpc_port(from.acpc_port());
  }
  if (from.acpc_server_id() != 0) {
    set_acpc_server_id(from.acpc_server_id());
  }
  if (from.tpa_player_id() != 0) {
    set_tpa_player_id(from.tpa_player_id());
  }
}

void UmLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmLoginResp::CopyFrom(const UmLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmLoginResp::IsInitialized() const {
  return true;
}

void UmLoginResp::Swap(UmLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmLoginResp::InternalSwap(UmLoginResp* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  role_img_.Swap(&other->role_img_);
  acpc_ip_.Swap(&other->acpc_ip_);
  swap(role_id_, other->role_id_);
  swap(role_region_, other->role_region_);
  swap(role_server_, other->role_server_);
  swap(role_sex_, other->role_sex_);
  swap(role_currency_, other->role_currency_);
  swap(role_level_, other->role_level_);
  swap(draw_, other->draw_);
  swap(win_, other->win_);
  swap(lose_, other->lose_);
  swap(room_id_, other->room_id_);
  swap(view_room_id_, other->view_room_id_);
  swap(acpc_port_, other->acpc_port_);
  swap(acpc_server_id_, other->acpc_server_id_);
  swap(tpa_player_id_, other->tpa_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmLoginResp::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmLogout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmLogout::kRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmLogout::UmLogout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmLogout();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmLogout)
}
UmLogout::UmLogout(const UmLogout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.UmLogout)
}

void UmLogout::SharedCtor() {
  role_id_ = 0u;
  _cached_size_ = 0;
}

UmLogout::~UmLogout() {
  // @@protoc_insertion_point(destructor:Pb.UmLogout)
  SharedDtor();
}

void UmLogout::SharedDtor() {
}

void UmLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmLogout::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmLogout& UmLogout::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmLogout();
  return *internal_default_instance();
}

UmLogout* UmLogout::New(::google::protobuf::Arena* arena) const {
  UmLogout* n = new UmLogout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = 0u;
  _internal_metadata_.Clear();
}

bool UmLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmLogout)
  return false;
#undef DO_
}

void UmLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmLogout)
}

::google::protobuf::uint8* UmLogout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmLogout)
  return target;
}

size_t UmLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmLogout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmLogout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const UmLogout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmLogout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmLogout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmLogout)
    MergeFrom(*source);
  }
}

void UmLogout::MergeFrom(const UmLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void UmLogout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmLogout::CopyFrom(const UmLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmLogout::IsInitialized() const {
  return true;
}

void UmLogout::Swap(UmLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmLogout::InternalSwap(UmLogout* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmLogout::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmRecharge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmRecharge::kRoleIdFieldNumber;
const int UmRecharge::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmRecharge::UmRecharge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmRecharge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmRecharge)
}
UmRecharge::UmRecharge(const UmRecharge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmRecharge)
}

void UmRecharge::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(money_));
  _cached_size_ = 0;
}

UmRecharge::~UmRecharge() {
  // @@protoc_insertion_point(destructor:Pb.UmRecharge)
  SharedDtor();
}

void UmRecharge::SharedDtor() {
}

void UmRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmRecharge::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmRecharge& UmRecharge::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmRecharge();
  return *internal_default_instance();
}

UmRecharge* UmRecharge::New(::google::protobuf::Arena* arena) const {
  UmRecharge* n = new UmRecharge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmRecharge::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmRecharge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(money_));
  _internal_metadata_.Clear();
}

bool UmRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmRecharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmRecharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmRecharge)
  return false;
#undef DO_
}

void UmRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmRecharge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 money = 2;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmRecharge)
}

::google::protobuf::uint8* UmRecharge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmRecharge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 money = 2;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmRecharge)
  return target;
}

size_t UmRecharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmRecharge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmRecharge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  const UmRecharge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmRecharge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmRecharge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmRecharge)
    MergeFrom(*source);
  }
}

void UmRecharge::MergeFrom(const UmRecharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
}

void UmRecharge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmRecharge::CopyFrom(const UmRecharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmRecharge::IsInitialized() const {
  return true;
}

void UmRecharge::Swap(UmRecharge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmRecharge::InternalSwap(UmRecharge* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(money_, other->money_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmRecharge::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmOnlinePlayers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmOnlinePlayers::kRoleIdFieldNumber;
const int UmOnlinePlayers::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmOnlinePlayers::UmOnlinePlayers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmOnlinePlayers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmOnlinePlayers)
}
UmOnlinePlayers::UmOnlinePlayers(const UmOnlinePlayers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(players_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmOnlinePlayers)
}

void UmOnlinePlayers::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(players_));
  _cached_size_ = 0;
}

UmOnlinePlayers::~UmOnlinePlayers() {
  // @@protoc_insertion_point(destructor:Pb.UmOnlinePlayers)
  SharedDtor();
}

void UmOnlinePlayers::SharedDtor() {
}

void UmOnlinePlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmOnlinePlayers::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmOnlinePlayers& UmOnlinePlayers::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmOnlinePlayers();
  return *internal_default_instance();
}

UmOnlinePlayers* UmOnlinePlayers::New(::google::protobuf::Arena* arena) const {
  UmOnlinePlayers* n = new UmOnlinePlayers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmOnlinePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmOnlinePlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(players_));
  _internal_metadata_.Clear();
}

bool UmOnlinePlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmOnlinePlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmOnlinePlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmOnlinePlayers)
  return false;
#undef DO_
}

void UmOnlinePlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmOnlinePlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 players = 2;
  if (this->players() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->players(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmOnlinePlayers)
}

::google::protobuf::uint8* UmOnlinePlayers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmOnlinePlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 players = 2;
  if (this->players() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->players(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmOnlinePlayers)
  return target;
}

size_t UmOnlinePlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmOnlinePlayers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 players = 2;
  if (this->players() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->players());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmOnlinePlayers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmOnlinePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const UmOnlinePlayers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmOnlinePlayers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmOnlinePlayers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmOnlinePlayers)
    MergeFrom(*source);
  }
}

void UmOnlinePlayers::MergeFrom(const UmOnlinePlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmOnlinePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.players() != 0) {
    set_players(from.players());
  }
}

void UmOnlinePlayers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmOnlinePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmOnlinePlayers::CopyFrom(const UmOnlinePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmOnlinePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmOnlinePlayers::IsInitialized() const {
  return true;
}

void UmOnlinePlayers::Swap(UmOnlinePlayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmOnlinePlayers::InternalSwap(UmOnlinePlayers* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(players_, other->players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmOnlinePlayers::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmQueryUser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmQueryUser::kRoleIdFieldNumber;
const int UmQueryUser::kMoneyFieldNumber;
const int UmQueryUser::kWinFieldNumber;
const int UmQueryUser::kDrawFieldNumber;
const int UmQueryUser::kLoseFieldNumber;
const int UmQueryUser::kHandIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmQueryUser::UmQueryUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmQueryUser();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmQueryUser)
}
UmQueryUser::UmQueryUser(const UmQueryUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(hand_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmQueryUser)
}

void UmQueryUser::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(hand_id_));
  _cached_size_ = 0;
}

UmQueryUser::~UmQueryUser() {
  // @@protoc_insertion_point(destructor:Pb.UmQueryUser)
  SharedDtor();
}

void UmQueryUser::SharedDtor() {
}

void UmQueryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmQueryUser::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmQueryUser& UmQueryUser::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmQueryUser();
  return *internal_default_instance();
}

UmQueryUser* UmQueryUser::New(::google::protobuf::Arena* arena) const {
  UmQueryUser* n = new UmQueryUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmQueryUser::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(hand_id_));
  _internal_metadata_.Clear();
}

bool UmQueryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmQueryUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 win = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 draw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmQueryUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmQueryUser)
  return false;
#undef DO_
}

void UmQueryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // uint32 win = 3;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win(), output);
  }

  // uint32 draw = 4;
  if (this->draw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->draw(), output);
  }

  // uint32 lose = 5;
  if (this->lose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lose(), output);
  }

  // uint32 hand_id = 6;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hand_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmQueryUser)
}

::google::protobuf::uint8* UmQueryUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // uint32 win = 3;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win(), target);
  }

  // uint32 draw = 4;
  if (this->draw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->draw(), target);
  }

  // uint32 lose = 5;
  if (this->lose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lose(), target);
  }

  // uint32 hand_id = 6;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hand_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmQueryUser)
  return target;
}

size_t UmQueryUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmQueryUser)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // uint32 win = 3;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win());
  }

  // uint32 draw = 4;
  if (this->draw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->draw());
  }

  // uint32 lose = 5;
  if (this->lose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lose());
  }

  // uint32 hand_id = 6;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmQueryUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmQueryUser)
  GOOGLE_DCHECK_NE(&from, this);
  const UmQueryUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmQueryUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmQueryUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmQueryUser)
    MergeFrom(*source);
  }
}

void UmQueryUser::MergeFrom(const UmQueryUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmQueryUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.draw() != 0) {
    set_draw(from.draw());
  }
  if (from.lose() != 0) {
    set_lose(from.lose());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
}

void UmQueryUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmQueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmQueryUser::CopyFrom(const UmQueryUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmQueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmQueryUser::IsInitialized() const {
  return true;
}

void UmQueryUser::Swap(UmQueryUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmQueryUser::InternalSwap(UmQueryUser* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(money_, other->money_);
  swap(win_, other->win_);
  swap(draw_, other->draw_);
  swap(lose_, other->lose_);
  swap(hand_id_, other->hand_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmQueryUser::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmUserConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmUserConfig::kRoleIdFieldNumber;
const int UmUserConfig::kMoneyFieldNumber;
const int UmUserConfig::kWinFieldNumber;
const int UmUserConfig::kDrawFieldNumber;
const int UmUserConfig::kLoseFieldNumber;
const int UmUserConfig::kResetCurrencyTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmUserConfig::UmUserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmUserConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmUserConfig)
}
UmUserConfig::UmUserConfig(const UmUserConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_currency_times_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(reset_currency_times_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmUserConfig)
}

void UmUserConfig::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_currency_times_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(reset_currency_times_));
  _cached_size_ = 0;
}

UmUserConfig::~UmUserConfig() {
  // @@protoc_insertion_point(destructor:Pb.UmUserConfig)
  SharedDtor();
}

void UmUserConfig::SharedDtor() {
}

void UmUserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmUserConfig::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmUserConfig& UmUserConfig::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmUserConfig();
  return *internal_default_instance();
}

UmUserConfig* UmUserConfig::New(::google::protobuf::Arena* arena) const {
  UmUserConfig* n = new UmUserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmUserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmUserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_currency_times_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(reset_currency_times_));
  _internal_metadata_.Clear();
}

bool UmUserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmUserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 win = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 draw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reset_currency_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_currency_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmUserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmUserConfig)
  return false;
#undef DO_
}

void UmUserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmUserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // uint32 win = 3;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win(), output);
  }

  // uint32 draw = 4;
  if (this->draw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->draw(), output);
  }

  // uint32 lose = 5;
  if (this->lose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lose(), output);
  }

  // uint32 reset_currency_times = 6;
  if (this->reset_currency_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reset_currency_times(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmUserConfig)
}

::google::protobuf::uint8* UmUserConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmUserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // uint32 win = 3;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win(), target);
  }

  // uint32 draw = 4;
  if (this->draw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->draw(), target);
  }

  // uint32 lose = 5;
  if (this->lose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lose(), target);
  }

  // uint32 reset_currency_times = 6;
  if (this->reset_currency_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reset_currency_times(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmUserConfig)
  return target;
}

size_t UmUserConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmUserConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // uint32 win = 3;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win());
  }

  // uint32 draw = 4;
  if (this->draw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->draw());
  }

  // uint32 lose = 5;
  if (this->lose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lose());
  }

  // uint32 reset_currency_times = 6;
  if (this->reset_currency_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reset_currency_times());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmUserConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmUserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UmUserConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmUserConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmUserConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmUserConfig)
    MergeFrom(*source);
  }
}

void UmUserConfig::MergeFrom(const UmUserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmUserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.draw() != 0) {
    set_draw(from.draw());
  }
  if (from.lose() != 0) {
    set_lose(from.lose());
  }
  if (from.reset_currency_times() != 0) {
    set_reset_currency_times(from.reset_currency_times());
  }
}

void UmUserConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmUserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmUserConfig::CopyFrom(const UmUserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmUserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmUserConfig::IsInitialized() const {
  return true;
}

void UmUserConfig::Swap(UmUserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmUserConfig::InternalSwap(UmUserConfig* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(money_, other->money_);
  swap(win_, other->win_);
  swap(draw_, other->draw_);
  swap(lose_, other->lose_);
  swap(reset_currency_times_, other->reset_currency_times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmUserConfig::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserConnExit::InitAsDefaultInstance() {
  ::Pb::_UserConnExit_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::Pb::ServerID*>(
      ::Pb::ServerID::internal_default_instance());
}
void UserConnExit::clear_server_id() {
  if (GetArenaNoVirtual() == NULL && server_id_ != NULL) {
    delete server_id_;
  }
  server_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConnExit::kRoleIdFieldNumber;
const int UserConnExit::kServerIdFieldNumber;
const int UserConnExit::kConnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConnExit::UserConnExit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUserConnExit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UserConnExit)
}
UserConnExit::UserConnExit(const UserConnExit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_id()) {
    server_id_ = new ::Pb::ServerID(*from.server_id_);
  } else {
    server_id_ = NULL;
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&conn_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(conn_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.UserConnExit)
}

void UserConnExit::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conn_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(conn_id_));
  _cached_size_ = 0;
}

UserConnExit::~UserConnExit() {
  // @@protoc_insertion_point(destructor:Pb.UserConnExit)
  SharedDtor();
}

void UserConnExit::SharedDtor() {
  if (this != internal_default_instance()) delete server_id_;
}

void UserConnExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserConnExit::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserConnExit& UserConnExit::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUserConnExit();
  return *internal_default_instance();
}

UserConnExit* UserConnExit::New(::google::protobuf::Arena* arena) const {
  UserConnExit* n = new UserConnExit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConnExit::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UserConnExit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && server_id_ != NULL) {
    delete server_id_;
  }
  server_id_ = NULL;
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conn_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(conn_id_));
  _internal_metadata_.Clear();
}

bool UserConnExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UserConnExit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.ServerID server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 conn_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UserConnExit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UserConnExit)
  return false;
#undef DO_
}

void UserConnExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UserConnExit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // .Pb.ServerID server_id = 2;
  if (this->has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->server_id_, output);
  }

  // uint32 conn_id = 3;
  if (this->conn_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->conn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UserConnExit)
}

::google::protobuf::uint8* UserConnExit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UserConnExit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // .Pb.ServerID server_id = 2;
  if (this->has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->server_id_, deterministic, target);
  }

  // uint32 conn_id = 3;
  if (this->conn_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->conn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UserConnExit)
  return target;
}

size_t UserConnExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UserConnExit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Pb.ServerID server_id = 2;
  if (this->has_server_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->server_id_);
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 conn_id = 3;
  if (this->conn_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->conn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConnExit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UserConnExit)
  GOOGLE_DCHECK_NE(&from, this);
  const UserConnExit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserConnExit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UserConnExit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UserConnExit)
    MergeFrom(*source);
  }
}

void UserConnExit::MergeFrom(const UserConnExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UserConnExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    mutable_server_id()->::Pb::ServerID::MergeFrom(from.server_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.conn_id() != 0) {
    set_conn_id(from.conn_id());
  }
}

void UserConnExit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UserConnExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserConnExit::CopyFrom(const UserConnExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UserConnExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConnExit::IsInitialized() const {
  return true;
}

void UserConnExit::Swap(UserConnExit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConnExit::InternalSwap(UserConnExit* other) {
  using std::swap;
  swap(server_id_, other->server_id_);
  swap(role_id_, other->role_id_);
  swap(conn_id_, other->conn_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserConnExit::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetCurrency::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetCurrency::kRoleIdFieldNumber;
const int ResetCurrency::kCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetCurrency::ResetCurrency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsResetCurrency();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ResetCurrency)
}
ResetCurrency::ResetCurrency(const ResetCurrency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:Pb.ResetCurrency)
}

void ResetCurrency::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(currency_));
  _cached_size_ = 0;
}

ResetCurrency::~ResetCurrency() {
  // @@protoc_insertion_point(destructor:Pb.ResetCurrency)
  SharedDtor();
}

void ResetCurrency::SharedDtor() {
}

void ResetCurrency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetCurrency::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetCurrency& ResetCurrency::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsResetCurrency();
  return *internal_default_instance();
}

ResetCurrency* ResetCurrency::New(::google::protobuf::Arena* arena) const {
  ResetCurrency* n = new ResetCurrency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ResetCurrency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(currency_));
  _internal_metadata_.Clear();
}

bool ResetCurrency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ResetCurrency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 currency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ResetCurrency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ResetCurrency)
  return false;
#undef DO_
}

void ResetCurrency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ResetCurrency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 currency = 2;
  if (this->currency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ResetCurrency)
}

::google::protobuf::uint8* ResetCurrency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ResetCurrency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 currency = 2;
  if (this->currency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ResetCurrency)
  return target;
}

size_t ResetCurrency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ResetCurrency)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 currency = 2;
  if (this->currency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetCurrency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ResetCurrency)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetCurrency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetCurrency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ResetCurrency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ResetCurrency)
    MergeFrom(*source);
  }
}

void ResetCurrency::MergeFrom(const ResetCurrency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ResetCurrency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.currency() != 0) {
    set_currency(from.currency());
  }
}

void ResetCurrency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ResetCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetCurrency::CopyFrom(const ResetCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ResetCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetCurrency::IsInitialized() const {
  return true;
}

void ResetCurrency::Swap(ResetCurrency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetCurrency::InternalSwap(ResetCurrency* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(currency_, other->currency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetCurrency::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetUserForTest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetUserForTest::kRoleIdFieldNumber;
const int ResetUserForTest::kRoleCurrencyFieldNumber;
const int ResetUserForTest::kCmdPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetUserForTest::ResetUserForTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsResetUserForTest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ResetUserForTest)
}
ResetUserForTest::ResetUserForTest(const ResetUserForTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd_password().size() > 0) {
    cmd_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_password_);
  }
  ::memcpy(&role_currency_, &from.role_currency_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&role_currency_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.ResetUserForTest)
}

void ResetUserForTest::SharedCtor() {
  cmd_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_currency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&role_currency_)) + sizeof(role_id_));
  _cached_size_ = 0;
}

ResetUserForTest::~ResetUserForTest() {
  // @@protoc_insertion_point(destructor:Pb.ResetUserForTest)
  SharedDtor();
}

void ResetUserForTest::SharedDtor() {
  cmd_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResetUserForTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetUserForTest::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetUserForTest& ResetUserForTest::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsResetUserForTest();
  return *internal_default_instance();
}

ResetUserForTest* ResetUserForTest::New(::google::protobuf::Arena* arena) const {
  ResetUserForTest* n = new ResetUserForTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetUserForTest::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ResetUserForTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_currency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&role_currency_)) + sizeof(role_id_));
  _internal_metadata_.Clear();
}

bool ResetUserForTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ResetUserForTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 role_currency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd_password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd_password().data(), static_cast<int>(this->cmd_password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.ResetUserForTest.cmd_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ResetUserForTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ResetUserForTest)
  return false;
#undef DO_
}

void ResetUserForTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ResetUserForTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // int64 role_currency = 2;
  if (this->role_currency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_currency(), output);
  }

  // string cmd_password = 3;
  if (this->cmd_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd_password().data(), static_cast<int>(this->cmd_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.ResetUserForTest.cmd_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cmd_password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ResetUserForTest)
}

::google::protobuf::uint8* ResetUserForTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ResetUserForTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // int64 role_currency = 2;
  if (this->role_currency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_currency(), target);
  }

  // string cmd_password = 3;
  if (this->cmd_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd_password().data(), static_cast<int>(this->cmd_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.ResetUserForTest.cmd_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cmd_password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ResetUserForTest)
  return target;
}

size_t ResetUserForTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ResetUserForTest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cmd_password = 3;
  if (this->cmd_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd_password());
  }

  // int64 role_currency = 2;
  if (this->role_currency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->role_currency());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetUserForTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ResetUserForTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetUserForTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetUserForTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ResetUserForTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ResetUserForTest)
    MergeFrom(*source);
  }
}

void ResetUserForTest::MergeFrom(const ResetUserForTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ResetUserForTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd_password().size() > 0) {

    cmd_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_password_);
  }
  if (from.role_currency() != 0) {
    set_role_currency(from.role_currency());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void ResetUserForTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ResetUserForTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetUserForTest::CopyFrom(const ResetUserForTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ResetUserForTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetUserForTest::IsInitialized() const {
  return true;
}

void ResetUserForTest::Swap(ResetUserForTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetUserForTest::InternalSwap(ResetUserForTest* other) {
  using std::swap;
  cmd_password_.Swap(&other->cmd_password_);
  swap(role_currency_, other->role_currency_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetUserForTest::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UmUserMatchInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UmUserMatchInfo::kRoleIdFieldNumber;
const int UmUserMatchInfo::kMoneyFieldNumber;
const int UmUserMatchInfo::kHandsFieldNumber;
const int UmUserMatchInfo::kTicketsFieldNumber;
const int UmUserMatchInfo::kMatchHandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UmUserMatchInfo::UmUserMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_um_2eproto::InitDefaultsUmUserMatchInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.UmUserMatchInfo)
}
UmUserMatchInfo::UmUserMatchInfo(const UmUserMatchInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_hands_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(match_hands_));
  // @@protoc_insertion_point(copy_constructor:Pb.UmUserMatchInfo)
}

void UmUserMatchInfo::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_hands_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(match_hands_));
  _cached_size_ = 0;
}

UmUserMatchInfo::~UmUserMatchInfo() {
  // @@protoc_insertion_point(destructor:Pb.UmUserMatchInfo)
  SharedDtor();
}

void UmUserMatchInfo::SharedDtor() {
}

void UmUserMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UmUserMatchInfo::descriptor() {
  ::protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UmUserMatchInfo& UmUserMatchInfo::default_instance() {
  ::protobuf_um_2eproto::InitDefaultsUmUserMatchInfo();
  return *internal_default_instance();
}

UmUserMatchInfo* UmUserMatchInfo::New(::google::protobuf::Arena* arena) const {
  UmUserMatchInfo* n = new UmUserMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UmUserMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.UmUserMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_hands_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(match_hands_));
  _internal_metadata_.Clear();
}

bool UmUserMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.UmUserMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hands = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tickets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tickets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 match_hands = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_hands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.UmUserMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.UmUserMatchInfo)
  return false;
#undef DO_
}

void UmUserMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.UmUserMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // uint32 hands = 3;
  if (this->hands() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hands(), output);
  }

  // uint32 tickets = 4;
  if (this->tickets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tickets(), output);
  }

  // uint32 match_hands = 5;
  if (this->match_hands() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_hands(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.UmUserMatchInfo)
}

::google::protobuf::uint8* UmUserMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.UmUserMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // uint32 hands = 3;
  if (this->hands() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hands(), target);
  }

  // uint32 tickets = 4;
  if (this->tickets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tickets(), target);
  }

  // uint32 match_hands = 5;
  if (this->match_hands() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_hands(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.UmUserMatchInfo)
  return target;
}

size_t UmUserMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.UmUserMatchInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // uint32 hands = 3;
  if (this->hands() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hands());
  }

  // uint32 tickets = 4;
  if (this->tickets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tickets());
  }

  // uint32 match_hands = 5;
  if (this->match_hands() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_hands());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UmUserMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.UmUserMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UmUserMatchInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UmUserMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.UmUserMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.UmUserMatchInfo)
    MergeFrom(*source);
  }
}

void UmUserMatchInfo::MergeFrom(const UmUserMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.UmUserMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.hands() != 0) {
    set_hands(from.hands());
  }
  if (from.tickets() != 0) {
    set_tickets(from.tickets());
  }
  if (from.match_hands() != 0) {
    set_match_hands(from.match_hands());
  }
}

void UmUserMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.UmUserMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UmUserMatchInfo::CopyFrom(const UmUserMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.UmUserMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UmUserMatchInfo::IsInitialized() const {
  return true;
}

void UmUserMatchInfo::Swap(UmUserMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UmUserMatchInfo::InternalSwap(UmUserMatchInfo* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(money_, other->money_);
  swap(hands_, other->hands_);
  swap(tickets_, other->tickets_);
  swap(match_hands_, other->match_hands_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UmUserMatchInfo::GetMetadata() const {
  protobuf_um_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_um_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
