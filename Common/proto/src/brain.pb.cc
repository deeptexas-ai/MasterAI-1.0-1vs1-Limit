// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brain.proto

#include "brain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class RobotActionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotActionInfo>
      _instance;
} _RobotActionInfo_default_instance_;
class NetMsg_Brain_RobotAction_C2SDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetMsg_Brain_RobotAction_C2S>
      _instance;
} _NetMsg_Brain_RobotAction_C2S_default_instance_;
class NetMsg_Brain_RobotAction_S2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetMsg_Brain_RobotAction_S2C>
      _instance;
} _NetMsg_Brain_RobotAction_S2C_default_instance_;
class RequestRobotJoinRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestRobotJoinRoom>
      _instance;
} _RequestRobotJoinRoom_default_instance_;
class RequestRobotThreadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestRobotThread>
      _instance;
} _RequestRobotThread_default_instance_;
class CheckRobotValidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckRobotValid>
      _instance;
} _CheckRobotValid_default_instance_;
}  // namespace Pb
namespace protobuf_brain_2eproto {
void InitDefaultsRobotActionInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcState();
  {
    void* ptr = &::Pb::_RobotActionInfo_default_instance_;
    new (ptr) ::Pb::RobotActionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RobotActionInfo::InitAsDefaultInstance();
}

void InitDefaultsRobotActionInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRobotActionInfoImpl);
}

void InitDefaultsNetMsg_Brain_RobotAction_C2SImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_brain_2eproto::InitDefaultsRobotActionInfo();
  {
    void* ptr = &::Pb::_NetMsg_Brain_RobotAction_C2S_default_instance_;
    new (ptr) ::Pb::NetMsg_Brain_RobotAction_C2S();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::NetMsg_Brain_RobotAction_C2S::InitAsDefaultInstance();
}

void InitDefaultsNetMsg_Brain_RobotAction_C2S() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetMsg_Brain_RobotAction_C2SImpl);
}

void InitDefaultsNetMsg_Brain_RobotAction_S2CImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_NetMsg_Brain_RobotAction_S2C_default_instance_;
    new (ptr) ::Pb::NetMsg_Brain_RobotAction_S2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::NetMsg_Brain_RobotAction_S2C::InitAsDefaultInstance();
}

void InitDefaultsNetMsg_Brain_RobotAction_S2C() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetMsg_Brain_RobotAction_S2CImpl);
}

void InitDefaultsRequestRobotJoinRoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RequestRobotJoinRoom_default_instance_;
    new (ptr) ::Pb::RequestRobotJoinRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RequestRobotJoinRoom::InitAsDefaultInstance();
}

void InitDefaultsRequestRobotJoinRoom() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestRobotJoinRoomImpl);
}

void InitDefaultsRequestRobotThreadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RequestRobotThread_default_instance_;
    new (ptr) ::Pb::RequestRobotThread();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RequestRobotThread::InitAsDefaultInstance();
}

void InitDefaultsRequestRobotThread() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestRobotThreadImpl);
}

void InitDefaultsCheckRobotValidImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_CheckRobotValid_default_instance_;
    new (ptr) ::Pb::CheckRobotValid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::CheckRobotValid::InitAsDefaultInstance();
}

void InitDefaultsCheckRobotValid() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCheckRobotValidImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RobotActionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RobotActionInfo, robot_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RobotActionInfo, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RobotActionInfo, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RobotActionInfo, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_C2S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_C2S, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_C2S, action_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_C2S, action_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_S2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_S2C, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_S2C, action_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_S2C, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::NetMsg_Brain_RobotAction_S2C, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, rm_test_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotJoinRoom, tpa_room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotThread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotThread, user_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RequestRobotThread, thread_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CheckRobotValid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CheckRobotValid, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CheckRobotValid, room_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::RobotActionInfo)},
  { 9, -1, sizeof(::Pb::NetMsg_Brain_RobotAction_C2S)},
  { 17, -1, sizeof(::Pb::NetMsg_Brain_RobotAction_S2C)},
  { 26, -1, sizeof(::Pb::RequestRobotJoinRoom)},
  { 38, -1, sizeof(::Pb::RequestRobotThread)},
  { 45, -1, sizeof(::Pb::CheckRobotValid)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RobotActionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_NetMsg_Brain_RobotAction_C2S_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_NetMsg_Brain_RobotAction_S2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RequestRobotJoinRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RequestRobotThread_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_CheckRobotValid_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "brain.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013brain.proto\022\002Pb\032\014system.proto\"i\n\017Robot"
      "ActionInfo\022\021\n\trobot_pos\030\001 \001(\r\022\021\n\tgame_ty"
      "pe\030\002 \001(\r\022\022\n\ndifficulty\030\003 \001(\r\022\034\n\005state\030\004 "
      "\001(\0132\r.Pb.AcpcState\"n\n\034NetMsg_Brain_Robot"
      "Action_C2S\022\020\n\010robot_id\030\001 \001(\r\022\022\n\naction_s"
      "eq\030\002 \001(\r\022(\n\013action_info\030\003 \001(\0132\023.Pb.Robot"
      "ActionInfo\"b\n\034NetMsg_Brain_RobotAction_S"
      "2C\022\020\n\010robot_id\030\001 \001(\r\022\022\n\naction_seq\030\002 \001(\r"
      "\022\016\n\006action\030\003 \001(\r\022\014\n\004size\030\004 \001(\r\"\227\001\n\024Reque"
      "stRobotJoinRoom\022\017\n\007room_id\030\001 \001(\004\022\020\n\010pass"
      "word\030\002 \001(\t\022\021\n\tgame_type\030\003 \001(\r\022\017\n\007role_id"
      "\030\004 \003(\r\022\025\n\rrm_test_param\030\005 \001(\t\022\014\n\004seat\030\006 "
      "\001(\005\022\023\n\013tpa_room_id\030\007 \001(\r\"9\n\022RequestRobot"
      "Thread\022\020\n\010user_msg\030\001 \001(\t\022\021\n\tthread_id\030\002 "
      "\001(\r\"3\n\017CheckRobotValid\022\017\n\007role_id\030\001 \001(\r\022"
      "\017\n\007room_id\030\002 \001(\004*F\n\014NETMSG_BRAIN\022\027\n\023NETM"
      "SG_BRAIN_UNKNOW\020\000\022\035\n\031NETMSG_BRAIN_ROBOT_"
      "ACTION\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brain.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brain_2eproto
namespace Pb {
const ::google::protobuf::EnumDescriptor* NETMSG_BRAIN_descriptor() {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brain_2eproto::file_level_enum_descriptors[0];
}
bool NETMSG_BRAIN_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RobotActionInfo::InitAsDefaultInstance() {
  ::Pb::_RobotActionInfo_default_instance_._instance.get_mutable()->state_ = const_cast< ::Pb::AcpcState*>(
      ::Pb::AcpcState::internal_default_instance());
}
void RobotActionInfo::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotActionInfo::kRobotPosFieldNumber;
const int RobotActionInfo::kGameTypeFieldNumber;
const int RobotActionInfo::kDifficultyFieldNumber;
const int RobotActionInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotActionInfo::RobotActionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_brain_2eproto::InitDefaultsRobotActionInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RobotActionInfo)
}
RobotActionInfo::RobotActionInfo(const RobotActionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::Pb::AcpcState(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&robot_pos_, &from.robot_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&robot_pos_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:Pb.RobotActionInfo)
}

void RobotActionInfo::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&state_)) + sizeof(difficulty_));
  _cached_size_ = 0;
}

RobotActionInfo::~RobotActionInfo() {
  // @@protoc_insertion_point(destructor:Pb.RobotActionInfo)
  SharedDtor();
}

void RobotActionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void RobotActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotActionInfo::descriptor() {
  ::protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotActionInfo& RobotActionInfo::default_instance() {
  ::protobuf_brain_2eproto::InitDefaultsRobotActionInfo();
  return *internal_default_instance();
}

RobotActionInfo* RobotActionInfo::New(::google::protobuf::Arena* arena) const {
  RobotActionInfo* n = new RobotActionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotActionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RobotActionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  ::memset(&robot_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&robot_pos_)) + sizeof(difficulty_));
  _internal_metadata_.Clear();
}

bool RobotActionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RobotActionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 robot_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.AcpcState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RobotActionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RobotActionInfo)
  return false;
#undef DO_
}

void RobotActionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RobotActionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 robot_pos = 1;
  if (this->robot_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_pos(), output);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // uint32 difficulty = 3;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // .Pb.AcpcState state = 4;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RobotActionInfo)
}

::google::protobuf::uint8* RobotActionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RobotActionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 robot_pos = 1;
  if (this->robot_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_pos(), target);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // uint32 difficulty = 3;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // .Pb.AcpcState state = 4;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RobotActionInfo)
  return target;
}

size_t RobotActionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RobotActionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Pb.AcpcState state = 4;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // uint32 robot_pos = 1;
  if (this->robot_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_pos());
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 difficulty = 3;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotActionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RobotActionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotActionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotActionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RobotActionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RobotActionInfo)
    MergeFrom(*source);
  }
}

void RobotActionInfo::MergeFrom(const RobotActionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RobotActionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::Pb::AcpcState::MergeFrom(from.state());
  }
  if (from.robot_pos() != 0) {
    set_robot_pos(from.robot_pos());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
}

void RobotActionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RobotActionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotActionInfo::CopyFrom(const RobotActionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RobotActionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotActionInfo::IsInitialized() const {
  return true;
}

void RobotActionInfo::Swap(RobotActionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotActionInfo::InternalSwap(RobotActionInfo* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(robot_pos_, other->robot_pos_);
  swap(game_type_, other->game_type_);
  swap(difficulty_, other->difficulty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotActionInfo::GetMetadata() const {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetMsg_Brain_RobotAction_C2S::InitAsDefaultInstance() {
  ::Pb::_NetMsg_Brain_RobotAction_C2S_default_instance_._instance.get_mutable()->action_info_ = const_cast< ::Pb::RobotActionInfo*>(
      ::Pb::RobotActionInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetMsg_Brain_RobotAction_C2S::kRobotIdFieldNumber;
const int NetMsg_Brain_RobotAction_C2S::kActionSeqFieldNumber;
const int NetMsg_Brain_RobotAction_C2S::kActionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetMsg_Brain_RobotAction_C2S::NetMsg_Brain_RobotAction_C2S()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_brain_2eproto::InitDefaultsNetMsg_Brain_RobotAction_C2S();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.NetMsg_Brain_RobotAction_C2S)
}
NetMsg_Brain_RobotAction_C2S::NetMsg_Brain_RobotAction_C2S(const NetMsg_Brain_RobotAction_C2S& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action_info()) {
    action_info_ = new ::Pb::RobotActionInfo(*from.action_info_);
  } else {
    action_info_ = NULL;
  }
  ::memcpy(&robot_id_, &from.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_seq_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(action_seq_));
  // @@protoc_insertion_point(copy_constructor:Pb.NetMsg_Brain_RobotAction_C2S)
}

void NetMsg_Brain_RobotAction_C2S::SharedCtor() {
  ::memset(&action_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_seq_) -
      reinterpret_cast<char*>(&action_info_)) + sizeof(action_seq_));
  _cached_size_ = 0;
}

NetMsg_Brain_RobotAction_C2S::~NetMsg_Brain_RobotAction_C2S() {
  // @@protoc_insertion_point(destructor:Pb.NetMsg_Brain_RobotAction_C2S)
  SharedDtor();
}

void NetMsg_Brain_RobotAction_C2S::SharedDtor() {
  if (this != internal_default_instance()) delete action_info_;
}

void NetMsg_Brain_RobotAction_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMsg_Brain_RobotAction_C2S::descriptor() {
  ::protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetMsg_Brain_RobotAction_C2S& NetMsg_Brain_RobotAction_C2S::default_instance() {
  ::protobuf_brain_2eproto::InitDefaultsNetMsg_Brain_RobotAction_C2S();
  return *internal_default_instance();
}

NetMsg_Brain_RobotAction_C2S* NetMsg_Brain_RobotAction_C2S::New(::google::protobuf::Arena* arena) const {
  NetMsg_Brain_RobotAction_C2S* n = new NetMsg_Brain_RobotAction_C2S;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetMsg_Brain_RobotAction_C2S::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.NetMsg_Brain_RobotAction_C2S)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && action_info_ != NULL) {
    delete action_info_;
  }
  action_info_ = NULL;
  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_seq_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(action_seq_));
  _internal_metadata_.Clear();
}

bool NetMsg_Brain_RobotAction_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.NetMsg_Brain_RobotAction_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 robot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.RobotActionInfo action_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.NetMsg_Brain_RobotAction_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.NetMsg_Brain_RobotAction_C2S)
  return false;
#undef DO_
}

void NetMsg_Brain_RobotAction_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.NetMsg_Brain_RobotAction_C2S)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_id(), output);
  }

  // uint32 action_seq = 2;
  if (this->action_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_seq(), output);
  }

  // .Pb.RobotActionInfo action_info = 3;
  if (this->has_action_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->action_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.NetMsg_Brain_RobotAction_C2S)
}

::google::protobuf::uint8* NetMsg_Brain_RobotAction_C2S::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.NetMsg_Brain_RobotAction_C2S)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_id(), target);
  }

  // uint32 action_seq = 2;
  if (this->action_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_seq(), target);
  }

  // .Pb.RobotActionInfo action_info = 3;
  if (this->has_action_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->action_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.NetMsg_Brain_RobotAction_C2S)
  return target;
}

size_t NetMsg_Brain_RobotAction_C2S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.NetMsg_Brain_RobotAction_C2S)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Pb.RobotActionInfo action_info = 3;
  if (this->has_action_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->action_info_);
  }

  // uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // uint32 action_seq = 2;
  if (this->action_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMsg_Brain_RobotAction_C2S::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.NetMsg_Brain_RobotAction_C2S)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMsg_Brain_RobotAction_C2S* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetMsg_Brain_RobotAction_C2S>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.NetMsg_Brain_RobotAction_C2S)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.NetMsg_Brain_RobotAction_C2S)
    MergeFrom(*source);
  }
}

void NetMsg_Brain_RobotAction_C2S::MergeFrom(const NetMsg_Brain_RobotAction_C2S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.NetMsg_Brain_RobotAction_C2S)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action_info()) {
    mutable_action_info()->::Pb::RobotActionInfo::MergeFrom(from.action_info());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.action_seq() != 0) {
    set_action_seq(from.action_seq());
  }
}

void NetMsg_Brain_RobotAction_C2S::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.NetMsg_Brain_RobotAction_C2S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMsg_Brain_RobotAction_C2S::CopyFrom(const NetMsg_Brain_RobotAction_C2S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.NetMsg_Brain_RobotAction_C2S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMsg_Brain_RobotAction_C2S::IsInitialized() const {
  return true;
}

void NetMsg_Brain_RobotAction_C2S::Swap(NetMsg_Brain_RobotAction_C2S* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetMsg_Brain_RobotAction_C2S::InternalSwap(NetMsg_Brain_RobotAction_C2S* other) {
  using std::swap;
  swap(action_info_, other->action_info_);
  swap(robot_id_, other->robot_id_);
  swap(action_seq_, other->action_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetMsg_Brain_RobotAction_C2S::GetMetadata() const {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetMsg_Brain_RobotAction_S2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetMsg_Brain_RobotAction_S2C::kRobotIdFieldNumber;
const int NetMsg_Brain_RobotAction_S2C::kActionSeqFieldNumber;
const int NetMsg_Brain_RobotAction_S2C::kActionFieldNumber;
const int NetMsg_Brain_RobotAction_S2C::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetMsg_Brain_RobotAction_S2C::NetMsg_Brain_RobotAction_S2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_brain_2eproto::InitDefaultsNetMsg_Brain_RobotAction_S2C();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.NetMsg_Brain_RobotAction_S2C)
}
NetMsg_Brain_RobotAction_S2C::NetMsg_Brain_RobotAction_S2C(const NetMsg_Brain_RobotAction_S2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&robot_id_, &from.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.NetMsg_Brain_RobotAction_S2C)
}

void NetMsg_Brain_RobotAction_S2C::SharedCtor() {
  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(size_));
  _cached_size_ = 0;
}

NetMsg_Brain_RobotAction_S2C::~NetMsg_Brain_RobotAction_S2C() {
  // @@protoc_insertion_point(destructor:Pb.NetMsg_Brain_RobotAction_S2C)
  SharedDtor();
}

void NetMsg_Brain_RobotAction_S2C::SharedDtor() {
}

void NetMsg_Brain_RobotAction_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMsg_Brain_RobotAction_S2C::descriptor() {
  ::protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetMsg_Brain_RobotAction_S2C& NetMsg_Brain_RobotAction_S2C::default_instance() {
  ::protobuf_brain_2eproto::InitDefaultsNetMsg_Brain_RobotAction_S2C();
  return *internal_default_instance();
}

NetMsg_Brain_RobotAction_S2C* NetMsg_Brain_RobotAction_S2C::New(::google::protobuf::Arena* arena) const {
  NetMsg_Brain_RobotAction_S2C* n = new NetMsg_Brain_RobotAction_S2C;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetMsg_Brain_RobotAction_S2C::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.NetMsg_Brain_RobotAction_S2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool NetMsg_Brain_RobotAction_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.NetMsg_Brain_RobotAction_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 robot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.NetMsg_Brain_RobotAction_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.NetMsg_Brain_RobotAction_S2C)
  return false;
#undef DO_
}

void NetMsg_Brain_RobotAction_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.NetMsg_Brain_RobotAction_S2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_id(), output);
  }

  // uint32 action_seq = 2;
  if (this->action_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_seq(), output);
  }

  // uint32 action = 3;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action(), output);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.NetMsg_Brain_RobotAction_S2C)
}

::google::protobuf::uint8* NetMsg_Brain_RobotAction_S2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.NetMsg_Brain_RobotAction_S2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_id(), target);
  }

  // uint32 action_seq = 2;
  if (this->action_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_seq(), target);
  }

  // uint32 action = 3;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action(), target);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.NetMsg_Brain_RobotAction_S2C)
  return target;
}

size_t NetMsg_Brain_RobotAction_S2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.NetMsg_Brain_RobotAction_S2C)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // uint32 action_seq = 2;
  if (this->action_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_seq());
  }

  // uint32 action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMsg_Brain_RobotAction_S2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.NetMsg_Brain_RobotAction_S2C)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMsg_Brain_RobotAction_S2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetMsg_Brain_RobotAction_S2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.NetMsg_Brain_RobotAction_S2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.NetMsg_Brain_RobotAction_S2C)
    MergeFrom(*source);
  }
}

void NetMsg_Brain_RobotAction_S2C::MergeFrom(const NetMsg_Brain_RobotAction_S2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.NetMsg_Brain_RobotAction_S2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.action_seq() != 0) {
    set_action_seq(from.action_seq());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void NetMsg_Brain_RobotAction_S2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.NetMsg_Brain_RobotAction_S2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMsg_Brain_RobotAction_S2C::CopyFrom(const NetMsg_Brain_RobotAction_S2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.NetMsg_Brain_RobotAction_S2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMsg_Brain_RobotAction_S2C::IsInitialized() const {
  return true;
}

void NetMsg_Brain_RobotAction_S2C::Swap(NetMsg_Brain_RobotAction_S2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetMsg_Brain_RobotAction_S2C::InternalSwap(NetMsg_Brain_RobotAction_S2C* other) {
  using std::swap;
  swap(robot_id_, other->robot_id_);
  swap(action_seq_, other->action_seq_);
  swap(action_, other->action_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetMsg_Brain_RobotAction_S2C::GetMetadata() const {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestRobotJoinRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRobotJoinRoom::kRoomIdFieldNumber;
const int RequestRobotJoinRoom::kPasswordFieldNumber;
const int RequestRobotJoinRoom::kGameTypeFieldNumber;
const int RequestRobotJoinRoom::kRoleIdFieldNumber;
const int RequestRobotJoinRoom::kRmTestParamFieldNumber;
const int RequestRobotJoinRoom::kSeatFieldNumber;
const int RequestRobotJoinRoom::kTpaRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRobotJoinRoom::RequestRobotJoinRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_brain_2eproto::InitDefaultsRequestRobotJoinRoom();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RequestRobotJoinRoom)
}
RequestRobotJoinRoom::RequestRobotJoinRoom(const RequestRobotJoinRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_id_(from.role_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rm_test_param().size() > 0) {
    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpa_room_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(tpa_room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.RequestRobotJoinRoom)
}

void RequestRobotJoinRoom::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(tpa_room_id_));
  _cached_size_ = 0;
}

RequestRobotJoinRoom::~RequestRobotJoinRoom() {
  // @@protoc_insertion_point(destructor:Pb.RequestRobotJoinRoom)
  SharedDtor();
}

void RequestRobotJoinRoom::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rm_test_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestRobotJoinRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRobotJoinRoom::descriptor() {
  ::protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRobotJoinRoom& RequestRobotJoinRoom::default_instance() {
  ::protobuf_brain_2eproto::InitDefaultsRequestRobotJoinRoom();
  return *internal_default_instance();
}

RequestRobotJoinRoom* RequestRobotJoinRoom::New(::google::protobuf::Arena* arena) const {
  RequestRobotJoinRoom* n = new RequestRobotJoinRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestRobotJoinRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RequestRobotJoinRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_.Clear();
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpa_room_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(tpa_room_id_));
  _internal_metadata_.Clear();
}

bool RequestRobotJoinRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RequestRobotJoinRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RequestRobotJoinRoom.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 role_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_role_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rm_test_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rm_test_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RequestRobotJoinRoom.rm_test_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tpa_room_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpa_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RequestRobotJoinRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RequestRobotJoinRoom)
  return false;
#undef DO_
}

void RequestRobotJoinRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RequestRobotJoinRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RequestRobotJoinRoom.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated uint32 role_id = 4;
  if (this->role_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _role_id_cached_byte_size_));
  }
  for (int i = 0, n = this->role_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->role_id(i), output);
  }

  // string rm_test_param = 5;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RequestRobotJoinRoom.rm_test_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rm_test_param(), output);
  }

  // int32 seat = 6;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seat(), output);
  }

  // uint32 tpa_room_id = 7;
  if (this->tpa_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tpa_room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RequestRobotJoinRoom)
}

::google::protobuf::uint8* RequestRobotJoinRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RequestRobotJoinRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RequestRobotJoinRoom.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated uint32 role_id = 4;
  if (this->role_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _role_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->role_id_, target);
  }

  // string rm_test_param = 5;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RequestRobotJoinRoom.rm_test_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rm_test_param(), target);
  }

  // int32 seat = 6;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seat(), target);
  }

  // uint32 tpa_room_id = 7;
  if (this->tpa_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tpa_room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RequestRobotJoinRoom)
  return target;
}

size_t RequestRobotJoinRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RequestRobotJoinRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 role_id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->role_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _role_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string rm_test_param = 5;
  if (this->rm_test_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rm_test_param());
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // int32 seat = 6;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  // uint32 tpa_room_id = 7;
  if (this->tpa_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpa_room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRobotJoinRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RequestRobotJoinRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRobotJoinRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRobotJoinRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RequestRobotJoinRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RequestRobotJoinRoom)
    MergeFrom(*source);
  }
}

void RequestRobotJoinRoom::MergeFrom(const RequestRobotJoinRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RequestRobotJoinRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_id_.MergeFrom(from.role_id_);
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.rm_test_param().size() > 0) {

    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
  if (from.tpa_room_id() != 0) {
    set_tpa_room_id(from.tpa_room_id());
  }
}

void RequestRobotJoinRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RequestRobotJoinRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRobotJoinRoom::CopyFrom(const RequestRobotJoinRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RequestRobotJoinRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRobotJoinRoom::IsInitialized() const {
  return true;
}

void RequestRobotJoinRoom::Swap(RequestRobotJoinRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRobotJoinRoom::InternalSwap(RequestRobotJoinRoom* other) {
  using std::swap;
  role_id_.InternalSwap(&other->role_id_);
  password_.Swap(&other->password_);
  rm_test_param_.Swap(&other->rm_test_param_);
  swap(room_id_, other->room_id_);
  swap(game_type_, other->game_type_);
  swap(seat_, other->seat_);
  swap(tpa_room_id_, other->tpa_room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestRobotJoinRoom::GetMetadata() const {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestRobotThread::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRobotThread::kUserMsgFieldNumber;
const int RequestRobotThread::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRobotThread::RequestRobotThread()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_brain_2eproto::InitDefaultsRequestRobotThread();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RequestRobotThread)
}
RequestRobotThread::RequestRobotThread(const RequestRobotThread& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_msg().size() > 0) {
    user_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_msg_);
  }
  thread_id_ = from.thread_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.RequestRobotThread)
}

void RequestRobotThread::SharedCtor() {
  user_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_id_ = 0u;
  _cached_size_ = 0;
}

RequestRobotThread::~RequestRobotThread() {
  // @@protoc_insertion_point(destructor:Pb.RequestRobotThread)
  SharedDtor();
}

void RequestRobotThread::SharedDtor() {
  user_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestRobotThread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRobotThread::descriptor() {
  ::protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRobotThread& RequestRobotThread::default_instance() {
  ::protobuf_brain_2eproto::InitDefaultsRequestRobotThread();
  return *internal_default_instance();
}

RequestRobotThread* RequestRobotThread::New(::google::protobuf::Arena* arena) const {
  RequestRobotThread* n = new RequestRobotThread;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestRobotThread::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RequestRobotThread)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_id_ = 0u;
  _internal_metadata_.Clear();
}

bool RequestRobotThread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RequestRobotThread)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_msg().data(), static_cast<int>(this->user_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RequestRobotThread.user_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RequestRobotThread)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RequestRobotThread)
  return false;
#undef DO_
}

void RequestRobotThread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RequestRobotThread)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_msg = 1;
  if (this->user_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_msg().data(), static_cast<int>(this->user_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RequestRobotThread.user_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_msg(), output);
  }

  // uint32 thread_id = 2;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RequestRobotThread)
}

::google::protobuf::uint8* RequestRobotThread::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RequestRobotThread)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_msg = 1;
  if (this->user_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_msg().data(), static_cast<int>(this->user_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RequestRobotThread.user_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_msg(), target);
  }

  // uint32 thread_id = 2;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RequestRobotThread)
  return target;
}

size_t RequestRobotThread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RequestRobotThread)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_msg = 1;
  if (this->user_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_msg());
  }

  // uint32 thread_id = 2;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRobotThread::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RequestRobotThread)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRobotThread* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRobotThread>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RequestRobotThread)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RequestRobotThread)
    MergeFrom(*source);
  }
}

void RequestRobotThread::MergeFrom(const RequestRobotThread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RequestRobotThread)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_msg().size() > 0) {

    user_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_msg_);
  }
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void RequestRobotThread::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RequestRobotThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRobotThread::CopyFrom(const RequestRobotThread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RequestRobotThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRobotThread::IsInitialized() const {
  return true;
}

void RequestRobotThread::Swap(RequestRobotThread* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRobotThread::InternalSwap(RequestRobotThread* other) {
  using std::swap;
  user_msg_.Swap(&other->user_msg_);
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestRobotThread::GetMetadata() const {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckRobotValid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckRobotValid::kRoleIdFieldNumber;
const int CheckRobotValid::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRobotValid::CheckRobotValid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_brain_2eproto::InitDefaultsCheckRobotValid();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.CheckRobotValid)
}
CheckRobotValid::CheckRobotValid(const CheckRobotValid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.CheckRobotValid)
}

void CheckRobotValid::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _cached_size_ = 0;
}

CheckRobotValid::~CheckRobotValid() {
  // @@protoc_insertion_point(destructor:Pb.CheckRobotValid)
  SharedDtor();
}

void CheckRobotValid::SharedDtor() {
}

void CheckRobotValid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRobotValid::descriptor() {
  ::protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckRobotValid& CheckRobotValid::default_instance() {
  ::protobuf_brain_2eproto::InitDefaultsCheckRobotValid();
  return *internal_default_instance();
}

CheckRobotValid* CheckRobotValid::New(::google::protobuf::Arena* arena) const {
  CheckRobotValid* n = new CheckRobotValid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRobotValid::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.CheckRobotValid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear();
}

bool CheckRobotValid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.CheckRobotValid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.CheckRobotValid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.CheckRobotValid)
  return false;
#undef DO_
}

void CheckRobotValid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.CheckRobotValid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.CheckRobotValid)
}

::google::protobuf::uint8* CheckRobotValid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.CheckRobotValid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.CheckRobotValid)
  return target;
}

size_t CheckRobotValid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.CheckRobotValid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRobotValid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.CheckRobotValid)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRobotValid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRobotValid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.CheckRobotValid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.CheckRobotValid)
    MergeFrom(*source);
  }
}

void CheckRobotValid::MergeFrom(const CheckRobotValid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.CheckRobotValid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void CheckRobotValid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.CheckRobotValid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRobotValid::CopyFrom(const CheckRobotValid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.CheckRobotValid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRobotValid::IsInitialized() const {
  return true;
}

void CheckRobotValid::Swap(CheckRobotValid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRobotValid::InternalSwap(CheckRobotValid* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRobotValid::GetMetadata() const {
  protobuf_brain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
