// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#include "system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class ServerIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerID>
      _instance;
} _ServerID_default_instance_;
class AcpcActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcAction>
      _instance;
} _AcpcAction_default_instance_;
class AcpcRoundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcRound>
      _instance;
} _AcpcRound_default_instance_;
class AcpcCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcCard>
      _instance;
} _AcpcCard_default_instance_;
class HoleCardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HoleCards>
      _instance;
} _HoleCards_default_instance_;
class DRoleScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DRoleScore>
      _instance;
} _DRoleScore_default_instance_;
class AcpcStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcState>
      _instance;
} _AcpcState_default_instance_;
class RoleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleInfo>
      _instance;
} _RoleInfo_default_instance_;
class RoomRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomRole>
      _instance;
} _RoomRole_default_instance_;
class RoomRoleListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomRoleList>
      _instance;
} _RoomRoleList_default_instance_;
class RoleScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleScore>
      _instance;
} _RoleScore_default_instance_;
class RoomAttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomAttr>
      _instance;
} _RoomAttr_default_instance_;
class RoomCanJoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomCanJoin>
      _instance;
} _RoomCanJoin_default_instance_;
}  // namespace Pb
namespace protobuf_system_2eproto {
void InitDefaultsServerIDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_ServerID_default_instance_;
    new (ptr) ::Pb::ServerID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ServerID::InitAsDefaultInstance();
}

void InitDefaultsServerID() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerIDImpl);
}

void InitDefaultsAcpcActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcAction_default_instance_;
    new (ptr) ::Pb::AcpcAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcAction::InitAsDefaultInstance();
}

void InitDefaultsAcpcAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcActionImpl);
}

void InitDefaultsAcpcRoundImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcAction();
  {
    void* ptr = &::Pb::_AcpcRound_default_instance_;
    new (ptr) ::Pb::AcpcRound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcRound::InitAsDefaultInstance();
}

void InitDefaultsAcpcRound() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcRoundImpl);
}

void InitDefaultsAcpcCardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcCard_default_instance_;
    new (ptr) ::Pb::AcpcCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcCard::InitAsDefaultInstance();
}

void InitDefaultsAcpcCard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcCardImpl);
}

void InitDefaultsHoleCardsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_HoleCards_default_instance_;
    new (ptr) ::Pb::HoleCards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::HoleCards::InitAsDefaultInstance();
}

void InitDefaultsHoleCards() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHoleCardsImpl);
}

void InitDefaultsDRoleScoreImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_DRoleScore_default_instance_;
    new (ptr) ::Pb::DRoleScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::DRoleScore::InitAsDefaultInstance();
}

void InitDefaultsDRoleScore() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDRoleScoreImpl);
}

void InitDefaultsAcpcStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcRound();
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  protobuf_system_2eproto::InitDefaultsHoleCards();
  protobuf_system_2eproto::InitDefaultsDRoleScore();
  {
    void* ptr = &::Pb::_AcpcState_default_instance_;
    new (ptr) ::Pb::AcpcState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcState::InitAsDefaultInstance();
}

void InitDefaultsAcpcState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcStateImpl);
}

void InitDefaultsRoleInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RoleInfo_default_instance_;
    new (ptr) ::Pb::RoleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoleInfo::InitAsDefaultInstance();
}

void InitDefaultsRoleInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleInfoImpl);
}

void InitDefaultsRoomRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RoomRole_default_instance_;
    new (ptr) ::Pb::RoomRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoomRole::InitAsDefaultInstance();
}

void InitDefaultsRoomRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomRoleImpl);
}

void InitDefaultsRoomRoleListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsRoomRole();
  {
    void* ptr = &::Pb::_RoomRoleList_default_instance_;
    new (ptr) ::Pb::RoomRoleList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoomRoleList::InitAsDefaultInstance();
}

void InitDefaultsRoomRoleList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomRoleListImpl);
}

void InitDefaultsRoleScoreImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_RoleScore_default_instance_;
    new (ptr) ::Pb::RoleScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoleScore::InitAsDefaultInstance();
}

void InitDefaultsRoleScore() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleScoreImpl);
}

void InitDefaultsRoomAttrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RoomAttr_default_instance_;
    new (ptr) ::Pb::RoomAttr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoomAttr::InitAsDefaultInstance();
}

void InitDefaultsRoomAttr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomAttrImpl);
}

void InitDefaultsRoomCanJoinImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RoomCanJoin_default_instance_;
    new (ptr) ::Pb::RoomCanJoin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoomCanJoin::InitAsDefaultInstance();
}

void InitDefaultsRoomCanJoin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomCanJoinImpl);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerID, reg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerID, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ServerID, inst_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcAction, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcAction, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRound, actions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcCard, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcCard, suit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcCard, highlight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::HoleCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::HoleCards, hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleScore, role_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleScore, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleScore, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, min_nolimit_raise_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, round_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, fold_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, board_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, cur_player_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, player_hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, round_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, card_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, dealer_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, self_role_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcState, role_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, role_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, role_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, role_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleInfo, is_ready_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, role_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, cliconn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, reset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, is_ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, hosted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRole, join_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRoleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomRoleList, role_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleScore, role_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleScore, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleScore, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleScore, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleScore, hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, room_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomAttr, server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, room_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoomCanJoin, player_cnt_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::ServerID)},
  { 8, -1, sizeof(::Pb::AcpcAction)},
  { 16, -1, sizeof(::Pb::AcpcRound)},
  { 22, -1, sizeof(::Pb::AcpcCard)},
  { 30, -1, sizeof(::Pb::HoleCards)},
  { 36, -1, sizeof(::Pb::DRoleScore)},
  { 44, -1, sizeof(::Pb::AcpcState)},
  { 67, -1, sizeof(::Pb::RoleInfo)},
  { 78, -1, sizeof(::Pb::RoomRole)},
  { 91, -1, sizeof(::Pb::RoomRoleList)},
  { 97, -1, sizeof(::Pb::RoleScore)},
  { 107, -1, sizeof(::Pb::RoomAttr)},
  { 120, -1, sizeof(::Pb::RoomCanJoin)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ServerID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcRound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_HoleCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_DRoleScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoomRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoomRoleList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoleScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoomAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoomCanJoin_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "system.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014system.proto\022\002Pb\"9\n\010ServerID\022\016\n\006reg_id"
      "\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\017\n\007inst_id\030\003 \001(\r\"<\n"
      "\nAcpcAction\022\020\n\010position\030\001 \001(\005\022\016\n\006action\030"
      "\002 \001(\005\022\014\n\004size\030\003 \001(\005\",\n\tAcpcRound\022\037\n\007acti"
      "ons\030\001 \003(\0132\016.Pb.AcpcAction\"9\n\010AcpcCard\022\014\n"
      "\004rank\030\001 \001(\005\022\014\n\004suit\030\002 \001(\005\022\021\n\thighlight\030\003"
      " \001(\005\"-\n\tHoleCards\022 \n\nhole_cards\030\001 \003(\0132\014."
      "Pb.AcpcCard\"\?\n\nDRoleScore\022\021\n\trole_seat\030\001"
      " \001(\r\022\017\n\007role_id\030\002 \001(\r\022\r\n\005score\030\003 \001(\005\"\312\003\n"
      "\tAcpcState\022\017\n\007hand_id\030\001 \001(\005\022\021\n\tmax_spent"
      "\030\002 \001(\005\022\034\n\024min_nolimit_raise_to\030\003 \001(\005\022\r\n\005"
      "spent\030\004 \003(\005\022$\n\rround_actions\030\005 \003(\0132\r.Pb."
      "AcpcRound\022\r\n\005round\030\006 \001(\005\022\020\n\010finished\030\007 \001"
      "(\005\022\024\n\014fold_players\030\010 \003(\005\022!\n\013board_cards\030"
      "\t \003(\0132\014.Pb.AcpcCard\022 \n\nhole_cards\030\n \003(\0132"
      "\014.Pb.AcpcCard\022\026\n\016cur_player_pos\030\013 \001(\r\022(\n"
      "\021player_hole_cards\030\014 \003(\0132\r.Pb.HoleCards\022"
      "\023\n\013round_spent\030\r \003(\005\022\021\n\tcard_type\030\016 \003(\t\022"
      "\r\n\005score\030\017 \003(\005\022\026\n\016dealer_role_id\030\020 \001(\r\022\025"
      "\n\rself_role_pos\030\021 \001(\r\022\"\n\nrole_score\030\022 \003("
      "\0132\016.Pb.DRoleScore\"x\n\010RoleInfo\022\017\n\007role_id"
      "\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\021\n\trole_type\030\003"
      " \001(\r\022\020\n\010role_img\030\004 \001(\t\022\021\n\trole_seat\030\005 \001("
      "\r\022\020\n\010is_ready\030\006 \001(\r\"\234\001\n\010RoomRole\022\017\n\007role"
      "_id\030\001 \001(\r\022\021\n\trole_seat\030\002 \001(\r\022\021\n\tserver_i"
      "d\030\003 \001(\r\022\022\n\ncliconn_id\030\004 \001(\004\022\020\n\010reset_id\030"
      "\005 \001(\r\022\020\n\010is_ready\030\006 \001(\r\022\016\n\006hosted\030\007 \001(\r\022"
      "\021\n\tjoin_type\030\010 \001(\r\"/\n\014RoomRoleList\022\037\n\tro"
      "le_info\030\001 \003(\0132\014.Pb.RoomRole\"s\n\tRoleScore"
      "\022\021\n\trole_seat\030\001 \001(\r\022\017\n\007role_id\030\002 \001(\r\022\021\n\t"
      "role_name\030\003 \001(\t\022\r\n\005score\030\004 \001(\005\022 \n\nhole_c"
      "ards\030\005 \003(\0132\014.Pb.AcpcCard\"\236\001\n\010RoomAttr\022\017\n"
      "\007role_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\021\n\troo"
      "m_name\030\003 \001(\t\022\021\n\tgame_type\030\004 \001(\r\022\022\n\ndiffi"
      "culty\030\005 \001(\r\022\020\n\010password\030\006 \001(\t\022\017\n\007version"
      "\030\007 \001(\t\022\021\n\tserver_id\030\010 \001(\r\"\243\001\n\013RoomCanJoi"
      "n\022\017\n\007role_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\021\n"
      "\troom_name\030\003 \001(\t\022\021\n\tgame_type\030\004 \001(\r\022\022\n\nd"
      "ifficulty\030\005 \001(\r\022\017\n\007version\030\006 \001(\t\022\021\n\tserv"
      "er_id\030\007 \001(\r\022\022\n\nplayer_cnt\030\010 \001(\r*\367\025\n\006DP_C"
      "MD\022\022\n\016CMD_NOT_DEFINE\020\000\022\031\n\023CMD_COMM_NOT_B"
      "INARY\020\221\277\005\022\034\n\027CMD_COMM_SVR_UNREGISTER\020\220N\022"
      "\035\n\030CMD_BALANCE_SVR_REGISTER\020\221N\022\037\n\032CMD_BA"
      "LANCE_SVR_KEEP_ALIVE\020\223N\022\034\n\027CMD_BALANCE_A"
      "CPC_REPORT\020\225N\022\035\n\030CMD_BALANCE_ALLOC_BATTL"
      "E\020\233N\022$\n\037CMD_BALANCE_QUERY_LISTEN_SERVER\020"
      "\234N\022\"\n\035CMD_BALANCE_ALLOC_ACPC_SERVER\020\235N\022&"
      "\n!CMD_BALANCE_TPA_ALLOC_ACPC_SERVER\020\367N\022\031"
      "\n\023CMD_UM_SVR_REGISTER\020\241\234\001\022\033\n\025CMD_UM_SVR_"
      "KEEP_ALIVE\020\243\234\001\022\022\n\014CMD_UM_LOGIN\020\253\234\001\022\023\n\rCM"
      "D_UM_LOGOUT\020\254\234\001\022\025\n\017CMD_UM_RECHARGE\020\255\234\001\022\033"
      "\n\025CMD_UM_ONLINE_PLAYERS\020\256\234\001\022\034\n\026CMD_UM_QU"
      "ERY_USER_INFO\020\257\234\001\022\033\n\025CMD_UM_USER_CONN_EX"
      "IT\020\260\234\001\022!\n\033CMD_UM_USER_CONN_FORCE_EXIT\020\261\234"
      "\001\022 \n\032CMD_UM_USER_RESET_CURRENCY\020\262\234\001\022\036\n\030C"
      "MD_UM_QUERY_USER_CONFIG\020\263\234\001\022 \n\032CMD_UM_RE"
      "SET_USER_FOR_TEST\020\276\234\001\022\"\n\034CMD_UM_QUERY_US"
      "ER_MATCH_INFO\020\277\234\001\022\026\n\020CMD_UM_TPA_LOGIN\020\205\235"
      "\001\022\033\n\025CMD_ACPC_SVR_REGISTER\020\261\352\001\022\035\n\027CMD_AC"
      "PC_SVR_KEEP_ALIVE\020\263\352\001\022\033\n\025CMD_ACPC_QUERY_"
      "CONFIG\020\264\352\001\022\033\n\025CMD_ACPC_BRAIN_REPORT\020\265\352\001\022"
      "\032\n\024CMD_ACPC_ROOM_CREATE\020\273\352\001\022\031\n\023CMD_ACPC_"
      "ROOM_ENTER\020\274\352\001\022\037\n\031CMD_ACPC_ROOM_BROAD_EN"
      "TER\020\275\352\001\022\031\n\023CMD_ACPC_ROOM_LEAVE\020\276\352\001\022\037\n\031CM"
      "D_ACPC_ROOM_BROAD_LEAVE\020\277\352\001\022\037\n\031CMD_ACPC_"
      "ROOM_FORCE_LEAVE\020\300\352\001\022%\n\037CMD_ACPC_ROOM_BR"
      "OAD_FORCE_LEAVE\020\301\352\001\022\"\n\034CMD_ACPC_ROOM_QUE"
      "RY_CAN_JOIN\020\302\352\001\022\"\n\034CMD_ACPC_ROOM_AUDIENC"
      "E_ENTER\020\303\352\001\022(\n\"CMD_ACPC_ROOM_BROAD_AUDIE"
      "NCE_ENTER\020\304\352\001\022\"\n\034CMD_ACPC_ROOM_AUDIENCE_"
      "LEAVE\020\305\352\001\022(\n\"CMD_ACPC_ROOM_BROAD_AUDIENC"
      "E_LEAVE\020\306\352\001\022!\n\033CMD_ACPC_ROOM_CHECK_TIMEO"
      "UT\020\307\352\001\022\032\n\024CMD_ACPC_MATCH_READY\020\317\352\001\022 \n\032CM"
      "D_ACPC_MATCH_BROAD_READY\020\320\352\001\022 \n\032CMD_ACPC"
      "_MATCH_BROAD_START\020\321\352\001\022\033\n\025CMD_ACPC_MATCH"
      "_ACTION\020\322\352\001\022\032\n\024CMD_ACPC_MATCH_STATE\020\323\352\001\022"
      "\032\n\024CMD_ACPC_MATCH_SCORE\020\324\352\001\022 \n\032CMD_ACPC_"
      "QUERY_MATCH_STATE\020\325\352\001\022%\n\037CMD_ACPC_NOTIFY"
      "_TPA_MATCH_STATE\020\326\352\001\022$\n\036CMD_ACPC_DEL_ALL"
      "_ROOM_FOR_TEST\020\331\352\001\022#\n\035CMD_ACPC_START_ROB"
      "OT_FOR_TEST\020\332\352\001\022!\n\033CMD_ACPC_BROAD_MATCH_"
      "ACTION\020\333\352\001\022\036\n\030CMD_ACPC_SET_DEALER_MODE\020\342"
      "\352\001\022\035\n\027CMD_ACPC_TPA_ENTER_ROOM\020\243\362\001\022 \n\032CMD"
      "_ACPC_TPA_AI_ENTER_ROOM\020\244\362\001\022\035\n\027CMD_ACPC_"
      "TPA_LEAVE_ROOM\020\246\362\001\022\037\n\031CMD_ACPC_TPA_DESTR"
      "OY_ROOM\020\247\362\001\022#\n\035CMD_ACPC_TPA_SET_PLAYER_S"
      "TATE\020\251\362\001\022\035\n\027CMD_ACPC_TPA_SET_DEALER\020\252\362\001\022"
      "$\n\036CMD_ACPC_TPA_QUERY_MATCH_CARDS\020\255\362\001\022%\n"
      "\037CMD_ACPC_TPA_QUERY_ALLOW_ACTION\020\256\362\001\022$\n\036"
      "CMD_ACPC_TPA_QUERY_MATCH_STATE\020\257\362\001\022\"\n\034CM"
      "D_ACPC_TPA_QUERY_AI_ACTION\020\260\362\001\022&\n CMD_AC"
      "PC_TPA_REPORT_ACTION_TOKEN\020\261\362\001\022\'\n!CMD_AC"
      "PC_TPA_REPORT_PLAYER_ACTION\020\262\362\001\022\034\n\026CMD_B"
      "RAIN_SVR_REGISTER\020\301\270\002\022\036\n\030CMD_BRAIN_SVR_K"
      "EEP_ALIVE\020\303\270\002\022\034\n\026CMD_BRAIN_QUERY_CONFIG\020"
      "\304\270\002\022\033\n\025CMD_BRAIN_ROBOT_ALIVE\020\312\270\002\022\033\n\025CMD_"
      "BRAIN_ROBOT_LOGIN\020\313\270\002\022\034\n\026CMD_BRAIN_ROBOT"
      "_ACTION\020\314\270\002\022\032\n\024CMD_BRAIN_ROBOT_EXIT\020\315\270\002\022"
      "\'\n!CMD_BRAIN_REQUEST_ROTOT_JOIN_ROOM\020\316\270\002"
      "\022\037\n\031CMD_BRAIN_TO_ROBOT_CLIENT\020\317\270\002\022!\n\033CMD"
      "_BRAIN_CHECK_ROBOT_VALID\020\320\270\002\022#\n\035CMD_BRAI"
      "N_CHECK_ROBOT_TIMEOUT\020\321\270\002\022$\n\036CMD_BRAIN_R"
      "EQUEST_CREATE_ROBOT\020\325\270\002\022%\n\037CMD_BRAIN_REQ"
      "UEST_DESTROY_ROBOT\020\326\270\002\022\035\n\027CMD_BRAIN_ON_L"
      "INE_ROBOT\020\327\270\002\022\031\n\023CMD_DEALER_REGISTER\020\321\206\003"
      "\022\033\n\025CMD_DEALER_KEEP_ALIVE\020\323\206\003\022\036\n\030CMD_DEA"
      "LER_REQUEST_CARDS\020\325\206\003\022#\n\035CMD_DEALER_NOTI"
      "FY_MATCH_STATE\020\326\206\003\022\036\n\030CMD_BLOCK_CHAIN_RE"
      "GISTER\020\271\216\003\022 \n\032CMD_BLOCK_CHAIN_KEEP_ALIVE"
      "\020\273\216\003\022#\n\035CMD_BLOCK_CHAIN_REQUEST_CARDS\020\274\216"
      "\003*\345\014\n\nDP_ERRCODE\022\006\n\002OK\020\000\022\032\n\024ERR_COMM_SYS"
      "TEM_BUSY\020\311\276\r\022\024\n\016ERR_COMM_OTHER\020\312\276\r\022\025\n\017ER"
      "R_COMM_LENGTH\020\313\276\r\022\032\n\024ERR_COMM_INVALID_CM"
      "D\020\314\276\r\022\032\n\024ERR_COMM_PROTO_PARSE\020\315\276\r\022\027\n\021ERR"
      "_COMM_INTERNAL\020\316\276\r\022\034\n\026ERR_COMM_NO_TASK_Q"
      "UEUE\020\317\276\r\022\024\n\016ERR_COMM_REDIS\020\320\276\r\022\034\n\026ERR_CO"
      "MM_INVALID_PARAM\020\321\276\r\022\033\n\025ERR_COMM_NO_FREE"
      "_NODE\020\322\276\r\022\025\n\017ERR_COMM_MEMORY\020\323\276\r\022\031\n\023ERR_"
      "COMM_REDIS_LOCK\020\324\276\r\022\021\n\013ERR_COMM_DB\020\325\276\r\022\033"
      "\n\025ERR_BALANCE_ACPC_BUSY\020\261\306\r\022\034\n\026ERR_BALAN"
      "CE_BRAIN_BUSY\020\262\306\r\022\033\n\025ERR_UM_USER_NOT_EXI"
      "ST\020\231\316\r\022\023\n\rERR_UM_PASSWD\020\232\316\r\022\036\n\030ERR_UM_RE"
      "SET_TIMES_LIMIT\020\233\316\r\022\032\n\024ERR_UM_ALREADY_RE"
      "SET\020\234\316\r\022\030\n\022ERR_ACPC_NOT_ROBOT\020\201\326\r\022\035\n\027ERR"
      "_ACPC_INVALID_ACTION\020\202\326\r\022\030\n\022ERR_ACPC_NO_"
      "PLAYER\020\203\326\r\022\026\n\020ERR_ACPC_NO_ROOM\020\204\326\r\022\034\n\026ER"
      "R_ACPC_NO_ROOM_QUEUE\020\205\326\r\022\036\n\030ERR_ACPC_NO_"
      "PLAYER_QUEUE\020\206\326\r\022\031\n\023ERR_ACPC_ALLOC_ROOM\020"
      "\207\326\r\022\032\n\024ERR_ACPC_NOT_IN_ROOM\020\210\326\r\022\037\n\031ERR_A"
      "CPC_PLAYER_ROOM_SEAT\020\211\326\r\022\035\n\027ERR_ACPC_SET"
      "_ROLE_READY\020\212\326\r\022\036\n\030ERR_ACPC_TOO_MANY_PLA"
      "YER\020\213\326\r\022 \n\032ERR_ACPC_ROOM_PLAYER_WRONG\020\214\326"
      "\r\022\034\n\026ERR_ACPC_MATCH_RUNNING\020\225\326\r\022 \n\032ERR_A"
      "CPC_MATCH_NOT_RUNNING\020\226\326\r\022\035\n\027ERR_ACPC_MA"
      "TCH_FINISHED\020\227\326\r\022\030\n\022ERR_ACPC_GAME_TYPE\020\230"
      "\326\r\022\036\n\030ERR_ACPC_NOT_PLAYER_TURN\020\231\326\r\022\030\n\022ER"
      "R_ACPC_MATCH_RUN\020\232\326\r\022\025\n\017ERR_ACPC_ACTION\020"
      "\233\326\r\022\031\n\023ERR_ACPC_GET_CONFIG\020\237\326\r\022\031\n\023ERR_AC"
      "PC_LEAVE_ROOM\020\240\326\r\022\034\n\026ERR_ACPC_ROOM_CONFL"
      "ICT\020\241\326\r\022 \n\032ERR_ACPC_MATCH_HANDS_LIMIT\020\242\326"
      "\r\022\033\n\025ERR_ACPC_SELECT_BRAIN\020\243\326\r\022\036\n\030ERR_AC"
      "PC_SET_DEALER_MODE\020\244\326\r\022 \n\032ERR_ACPC_DEALE"
      "R_DEAL_CARDS\020\245\326\r\022\036\n\030ERR_BRAIN_ALLOC_ROBO"
      "T_ID\020\351\335\r\022\037\n\031ERR_BRAIN_WAIT_ROBOT_JOIN\020\352\335"
      "\r\022\033\n\025ERR_BRAIN_CACHE_ROBOT\020\353\335\r\022\032\n\024ERR_BR"
      "AIN_BIND_ROBOT\020\354\335\r\022$\n\036ERR_BRAIN_TOO_MANY"
      "_WAIT_PLAYER\020\355\335\r\022\034\n\026ERR_BRAIN_CREATE_ROB"
      "OT\020\356\335\r\022\037\n\031ERR_BRAIN_SELECT_BRAINBOT\020\357\335\r\022"
      "\032\n\024ERR_BRAIN_GET_PLAYER\020\363\335\r\022 \n\032ERR_BRAIN"
      "_GET_ROBOT_CLIENT\020\364\335\r\022\036\n\030ERR_BRAIN_ACPC_"
      "TRANSFORM\020\365\335\r\022\032\n\024ERR_BRAIN_GET_CONFIG\020\375\335"
      "\r*\244\002\n\013SERVER_TYPE\022\026\n\022SERVER_TYPE_UNKNOW\020"
      "\000\022\027\n\023SERVER_TYPE_BALANCE\020\001\022\022\n\016SERVER_TYP"
      "E_UM\020\002\022\024\n\020SERVER_TYPE_ACPC\020\003\022\025\n\021SERVER_T"
      "YPE_BRAIN\020\004\022\032\n\026SERVER_TYPE_BLOCKCHAIN\020\005\022"
      "\023\n\017SERVER_TYPE_API\020\006\022\030\n\024SERVER_TYPE_BRAI"
      "NBOT\020\007\022\026\n\022SERVER_TYPE_DEALER\020\010\022\023\n\017SERVER"
      "_TYPE_TPA\020\t\022\023\n\017SERVER_TYPE_CFR\020\n\022\026\n\022SERV"
      "ER_TYPE_ALGAPI\020\013b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_system_2eproto
namespace Pb {
const ::google::protobuf::EnumDescriptor* DP_CMD_descriptor() {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_2eproto::file_level_enum_descriptors[0];
}
bool DP_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 10000:
    case 10001:
    case 10003:
    case 10005:
    case 10011:
    case 10012:
    case 10013:
    case 10103:
    case 20001:
    case 20003:
    case 20011:
    case 20012:
    case 20013:
    case 20014:
    case 20015:
    case 20016:
    case 20017:
    case 20018:
    case 20019:
    case 20030:
    case 20031:
    case 20101:
    case 30001:
    case 30003:
    case 30004:
    case 30005:
    case 30011:
    case 30012:
    case 30013:
    case 30014:
    case 30015:
    case 30016:
    case 30017:
    case 30018:
    case 30019:
    case 30020:
    case 30021:
    case 30022:
    case 30023:
    case 30031:
    case 30032:
    case 30033:
    case 30034:
    case 30035:
    case 30036:
    case 30037:
    case 30038:
    case 30041:
    case 30042:
    case 30043:
    case 30050:
    case 31011:
    case 31012:
    case 31014:
    case 31015:
    case 31017:
    case 31018:
    case 31021:
    case 31022:
    case 31023:
    case 31024:
    case 31025:
    case 31026:
    case 40001:
    case 40003:
    case 40004:
    case 40010:
    case 40011:
    case 40012:
    case 40013:
    case 40014:
    case 40015:
    case 40016:
    case 40017:
    case 40021:
    case 40022:
    case 40023:
    case 50001:
    case 50003:
    case 50005:
    case 50006:
    case 51001:
    case 51003:
    case 51004:
    case 90001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DP_ERRCODE_descriptor() {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_2eproto::file_level_enum_descriptors[1];
}
bool DP_ERRCODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 221001:
    case 221002:
    case 221003:
    case 221004:
    case 221005:
    case 221006:
    case 221007:
    case 221008:
    case 221009:
    case 221010:
    case 221011:
    case 221012:
    case 221013:
    case 222001:
    case 222002:
    case 223001:
    case 223002:
    case 223003:
    case 223004:
    case 224001:
    case 224002:
    case 224003:
    case 224004:
    case 224005:
    case 224006:
    case 224007:
    case 224008:
    case 224009:
    case 224010:
    case 224011:
    case 224012:
    case 224021:
    case 224022:
    case 224023:
    case 224024:
    case 224025:
    case 224026:
    case 224027:
    case 224031:
    case 224032:
    case 224033:
    case 224034:
    case 224035:
    case 224036:
    case 224037:
    case 225001:
    case 225002:
    case 225003:
    case 225004:
    case 225005:
    case 225006:
    case 225007:
    case 225011:
    case 225012:
    case 225013:
    case 225021:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SERVER_TYPE_descriptor() {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_2eproto::file_level_enum_descriptors[2];
}
bool SERVER_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServerID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerID::kRegIdFieldNumber;
const int ServerID::kTypeFieldNumber;
const int ServerID::kInstIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerID::ServerID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsServerID();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ServerID)
}
ServerID::ServerID(const ServerID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inst_id_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(inst_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.ServerID)
}

void ServerID::SharedCtor() {
  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inst_id_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(inst_id_));
  _cached_size_ = 0;
}

ServerID::~ServerID() {
  // @@protoc_insertion_point(destructor:Pb.ServerID)
  SharedDtor();
}

void ServerID::SharedDtor() {
}

void ServerID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerID::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerID& ServerID::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsServerID();
  return *internal_default_instance();
}

ServerID* ServerID::New(::google::protobuf::Arena* arena) const {
  ServerID* n = new ServerID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerID::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ServerID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inst_id_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(inst_id_));
  _internal_metadata_.Clear();
}

bool ServerID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ServerID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inst_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ServerID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ServerID)
  return false;
#undef DO_
}

void ServerID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ServerID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reg_id(), output);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // uint32 inst_id = 3;
  if (this->inst_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inst_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ServerID)
}

::google::protobuf::uint8* ServerID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ServerID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reg_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // uint32 inst_id = 3;
  if (this->inst_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inst_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ServerID)
  return target;
}

size_t ServerID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ServerID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reg_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 inst_id = 3;
  if (this->inst_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inst_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ServerID)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ServerID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ServerID)
    MergeFrom(*source);
  }
}

void ServerID::MergeFrom(const ServerID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ServerID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg_id() != 0) {
    set_reg_id(from.reg_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.inst_id() != 0) {
    set_inst_id(from.inst_id());
  }
}

void ServerID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ServerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerID::CopyFrom(const ServerID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ServerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerID::IsInitialized() const {
  return true;
}

void ServerID::Swap(ServerID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerID::InternalSwap(ServerID* other) {
  using std::swap;
  swap(reg_id_, other->reg_id_);
  swap(type_, other->type_);
  swap(inst_id_, other->inst_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerID::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcAction::kPositionFieldNumber;
const int AcpcAction::kActionFieldNumber;
const int AcpcAction::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcAction::AcpcAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsAcpcAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcAction)
}
AcpcAction::AcpcAction(const AcpcAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&position_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcAction)
}

void AcpcAction::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&position_)) + sizeof(size_));
  _cached_size_ = 0;
}

AcpcAction::~AcpcAction() {
  // @@protoc_insertion_point(destructor:Pb.AcpcAction)
  SharedDtor();
}

void AcpcAction::SharedDtor() {
}

void AcpcAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcAction::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcAction& AcpcAction::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsAcpcAction();
  return *internal_default_instance();
}

AcpcAction* AcpcAction::New(::google::protobuf::Arena* arena) const {
  AcpcAction* n = new AcpcAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&position_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool AcpcAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcAction)
  return false;
#undef DO_
}

void AcpcAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // int32 action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action(), output);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcAction)
}

::google::protobuf::uint8* AcpcAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // int32 action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action(), target);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcAction)
  return target;
}

size_t AcpcAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // int32 action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  // int32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcAction)
    MergeFrom(*source);
  }
}

void AcpcAction::MergeFrom(const AcpcAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void AcpcAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcAction::CopyFrom(const AcpcAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcAction::IsInitialized() const {
  return true;
}

void AcpcAction::Swap(AcpcAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcAction::InternalSwap(AcpcAction* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(action_, other->action_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcAction::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcRound::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcRound::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcRound::AcpcRound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsAcpcRound();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcRound)
}
AcpcRound::AcpcRound(const AcpcRound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actions_(from.actions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcRound)
}

void AcpcRound::SharedCtor() {
  _cached_size_ = 0;
}

AcpcRound::~AcpcRound() {
  // @@protoc_insertion_point(destructor:Pb.AcpcRound)
  SharedDtor();
}

void AcpcRound::SharedDtor() {
}

void AcpcRound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcRound::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcRound& AcpcRound::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsAcpcRound();
  return *internal_default_instance();
}

AcpcRound* AcpcRound::New(::google::protobuf::Arena* arena) const {
  AcpcRound* n = new AcpcRound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcRound::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcRound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _internal_metadata_.Clear();
}

bool AcpcRound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcRound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.AcpcAction actions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcRound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcRound)
  return false;
#undef DO_
}

void AcpcRound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcRound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.AcpcAction actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcRound)
}

::google::protobuf::uint8* AcpcRound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcRound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.AcpcAction actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->actions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcRound)
  return target;
}

size_t AcpcRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcRound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcAction actions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcRound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcRound)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcRound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcRound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcRound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcRound)
    MergeFrom(*source);
  }
}

void AcpcRound::MergeFrom(const AcpcRound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcRound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
}

void AcpcRound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcRound::CopyFrom(const AcpcRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcRound::IsInitialized() const {
  return true;
}

void AcpcRound::Swap(AcpcRound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcRound::InternalSwap(AcpcRound* other) {
  using std::swap;
  actions_.InternalSwap(&other->actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcRound::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcCard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcCard::kRankFieldNumber;
const int AcpcCard::kSuitFieldNumber;
const int AcpcCard::kHighlightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcCard::AcpcCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsAcpcCard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcCard)
}
AcpcCard::AcpcCard(const AcpcCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlight_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(highlight_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcCard)
}

void AcpcCard::SharedCtor() {
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(highlight_));
  _cached_size_ = 0;
}

AcpcCard::~AcpcCard() {
  // @@protoc_insertion_point(destructor:Pb.AcpcCard)
  SharedDtor();
}

void AcpcCard::SharedDtor() {
}

void AcpcCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcCard::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcCard& AcpcCard::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsAcpcCard();
  return *internal_default_instance();
}

AcpcCard* AcpcCard::New(::google::protobuf::Arena* arena) const {
  AcpcCard* n = new AcpcCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(highlight_));
  _internal_metadata_.Clear();
}

bool AcpcCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 suit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 highlight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcCard)
  return false;
#undef DO_
}

void AcpcCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // int32 suit = 2;
  if (this->suit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->suit(), output);
  }

  // int32 highlight = 3;
  if (this->highlight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->highlight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcCard)
}

::google::protobuf::uint8* AcpcCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // int32 suit = 2;
  if (this->suit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->suit(), target);
  }

  // int32 highlight = 3;
  if (this->highlight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->highlight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcCard)
  return target;
}

size_t AcpcCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcCard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 suit = 2;
  if (this->suit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->suit());
  }

  // int32 highlight = 3;
  if (this->highlight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->highlight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcCard)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcCard)
    MergeFrom(*source);
  }
}

void AcpcCard::MergeFrom(const AcpcCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.suit() != 0) {
    set_suit(from.suit());
  }
  if (from.highlight() != 0) {
    set_highlight(from.highlight());
  }
}

void AcpcCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcCard::CopyFrom(const AcpcCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcCard::IsInitialized() const {
  return true;
}

void AcpcCard::Swap(AcpcCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcCard::InternalSwap(AcpcCard* other) {
  using std::swap;
  swap(rank_, other->rank_);
  swap(suit_, other->suit_);
  swap(highlight_, other->highlight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcCard::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HoleCards::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HoleCards::kHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HoleCards::HoleCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsHoleCards();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.HoleCards)
}
HoleCards::HoleCards(const HoleCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb.HoleCards)
}

void HoleCards::SharedCtor() {
  _cached_size_ = 0;
}

HoleCards::~HoleCards() {
  // @@protoc_insertion_point(destructor:Pb.HoleCards)
  SharedDtor();
}

void HoleCards::SharedDtor() {
}

void HoleCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HoleCards::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HoleCards& HoleCards::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsHoleCards();
  return *internal_default_instance();
}

HoleCards* HoleCards::New(::google::protobuf::Arena* arena) const {
  HoleCards* n = new HoleCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HoleCards::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.HoleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  _internal_metadata_.Clear();
}

bool HoleCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.HoleCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.AcpcCard hole_cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.HoleCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.HoleCards)
  return false;
#undef DO_
}

void HoleCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.HoleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.AcpcCard hole_cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hole_cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.HoleCards)
}

::google::protobuf::uint8* HoleCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.HoleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.AcpcCard hole_cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.HoleCards)
  return target;
}

size_t HoleCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.HoleCards)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard hole_cards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HoleCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.HoleCards)
  GOOGLE_DCHECK_NE(&from, this);
  const HoleCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HoleCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.HoleCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.HoleCards)
    MergeFrom(*source);
  }
}

void HoleCards::MergeFrom(const HoleCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.HoleCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
}

void HoleCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.HoleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoleCards::CopyFrom(const HoleCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.HoleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoleCards::IsInitialized() const {
  return true;
}

void HoleCards::Swap(HoleCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HoleCards::InternalSwap(HoleCards* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HoleCards::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DRoleScore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DRoleScore::kRoleSeatFieldNumber;
const int DRoleScore::kRoleIdFieldNumber;
const int DRoleScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DRoleScore::DRoleScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsDRoleScore();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.DRoleScore)
}
DRoleScore::DRoleScore(const DRoleScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_seat_, &from.role_seat_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&role_seat_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:Pb.DRoleScore)
}

void DRoleScore::SharedCtor() {
  ::memset(&role_seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&role_seat_)) + sizeof(score_));
  _cached_size_ = 0;
}

DRoleScore::~DRoleScore() {
  // @@protoc_insertion_point(destructor:Pb.DRoleScore)
  SharedDtor();
}

void DRoleScore::SharedDtor() {
}

void DRoleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DRoleScore::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DRoleScore& DRoleScore::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsDRoleScore();
  return *internal_default_instance();
}

DRoleScore* DRoleScore::New(::google::protobuf::Arena* arena) const {
  DRoleScore* n = new DRoleScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DRoleScore::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.DRoleScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&role_seat_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool DRoleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.DRoleScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_seat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.DRoleScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.DRoleScore)
  return false;
#undef DO_
}

void DRoleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.DRoleScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_seat = 1;
  if (this->role_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_seat(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.DRoleScore)
}

::google::protobuf::uint8* DRoleScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.DRoleScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_seat = 1;
  if (this->role_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_seat(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.DRoleScore)
  return target;
}

size_t DRoleScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.DRoleScore)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_seat = 1;
  if (this->role_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_seat());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DRoleScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.DRoleScore)
  GOOGLE_DCHECK_NE(&from, this);
  const DRoleScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DRoleScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.DRoleScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.DRoleScore)
    MergeFrom(*source);
  }
}

void DRoleScore::MergeFrom(const DRoleScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.DRoleScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_seat() != 0) {
    set_role_seat(from.role_seat());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void DRoleScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.DRoleScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRoleScore::CopyFrom(const DRoleScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.DRoleScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRoleScore::IsInitialized() const {
  return true;
}

void DRoleScore::Swap(DRoleScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DRoleScore::InternalSwap(DRoleScore* other) {
  using std::swap;
  swap(role_seat_, other->role_seat_);
  swap(role_id_, other->role_id_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DRoleScore::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcState::kHandIdFieldNumber;
const int AcpcState::kMaxSpentFieldNumber;
const int AcpcState::kMinNolimitRaiseToFieldNumber;
const int AcpcState::kSpentFieldNumber;
const int AcpcState::kRoundActionsFieldNumber;
const int AcpcState::kRoundFieldNumber;
const int AcpcState::kFinishedFieldNumber;
const int AcpcState::kFoldPlayersFieldNumber;
const int AcpcState::kBoardCardsFieldNumber;
const int AcpcState::kHoleCardsFieldNumber;
const int AcpcState::kCurPlayerPosFieldNumber;
const int AcpcState::kPlayerHoleCardsFieldNumber;
const int AcpcState::kRoundSpentFieldNumber;
const int AcpcState::kCardTypeFieldNumber;
const int AcpcState::kScoreFieldNumber;
const int AcpcState::kDealerRoleIdFieldNumber;
const int AcpcState::kSelfRolePosFieldNumber;
const int AcpcState::kRoleScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcState::AcpcState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsAcpcState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcState)
}
AcpcState::AcpcState(const AcpcState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spent_(from.spent_),
      round_actions_(from.round_actions_),
      fold_players_(from.fold_players_),
      board_cards_(from.board_cards_),
      hole_cards_(from.hole_cards_),
      player_hole_cards_(from.player_hole_cards_),
      round_spent_(from.round_spent_),
      card_type_(from.card_type_),
      score_(from.score_),
      role_score_(from.role_score_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_role_pos_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(self_role_pos_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcState)
}

void AcpcState::SharedCtor() {
  ::memset(&hand_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_role_pos_) -
      reinterpret_cast<char*>(&hand_id_)) + sizeof(self_role_pos_));
  _cached_size_ = 0;
}

AcpcState::~AcpcState() {
  // @@protoc_insertion_point(destructor:Pb.AcpcState)
  SharedDtor();
}

void AcpcState::SharedDtor() {
}

void AcpcState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcState::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcState& AcpcState::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsAcpcState();
  return *internal_default_instance();
}

AcpcState* AcpcState::New(::google::protobuf::Arena* arena) const {
  AcpcState* n = new AcpcState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spent_.Clear();
  round_actions_.Clear();
  fold_players_.Clear();
  board_cards_.Clear();
  hole_cards_.Clear();
  player_hole_cards_.Clear();
  round_spent_.Clear();
  card_type_.Clear();
  score_.Clear();
  role_score_.Clear();
  ::memset(&hand_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_role_pos_) -
      reinterpret_cast<char*>(&hand_id_)) + sizeof(self_role_pos_));
  _internal_metadata_.Clear();
}

bool AcpcState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hand_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_spent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_nolimit_raise_to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_nolimit_raise_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 spent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcRound round_actions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_round_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 finished = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fold_players = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fold_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_fold_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_player_pos = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_player_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.HoleCards player_hole_cards = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 round_spent = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_spent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_round_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string card_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_card_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->card_type(this->card_type_size() - 1).data(),
            static_cast<int>(this->card_type(this->card_type_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcState.card_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 122u, input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_role_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 self_role_pos = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_role_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.DRoleScore role_score = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcState)
  return false;
#undef DO_
}

void AcpcState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hand_id = 1;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_id(), output);
  }

  // int32 max_spent = 2;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_spent(), output);
  }

  // int32 min_nolimit_raise_to = 3;
  if (this->min_nolimit_raise_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_nolimit_raise_to(), output);
  }

  // repeated int32 spent = 4;
  if (this->spent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _spent_cached_byte_size_));
  }
  for (int i = 0, n = this->spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->spent(i), output);
  }

  // repeated .Pb.AcpcRound round_actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->round_actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->round_actions(static_cast<int>(i)), output);
  }

  // int32 round = 6;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->round(), output);
  }

  // int32 finished = 7;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->finished(), output);
  }

  // repeated int32 fold_players = 8;
  if (this->fold_players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fold_players_cached_byte_size_));
  }
  for (int i = 0, n = this->fold_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fold_players(i), output);
  }

  // repeated .Pb.AcpcCard board_cards = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->board_cards(static_cast<int>(i)), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hole_cards(static_cast<int>(i)), output);
  }

  // uint32 cur_player_pos = 11;
  if (this->cur_player_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_player_pos(), output);
  }

  // repeated .Pb.HoleCards player_hole_cards = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->player_hole_cards(static_cast<int>(i)), output);
  }

  // repeated int32 round_spent = 13;
  if (this->round_spent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _round_spent_cached_byte_size_));
  }
  for (int i = 0, n = this->round_spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->round_spent(i), output);
  }

  // repeated string card_type = 14;
  for (int i = 0, n = this->card_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_type(i).data(), static_cast<int>(this->card_type(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcState.card_type");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->card_type(i), output);
  }

  // repeated int32 score = 15;
  if (this->score_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _score_cached_byte_size_));
  }
  for (int i = 0, n = this->score_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->score(i), output);
  }

  // uint32 dealer_role_id = 16;
  if (this->dealer_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dealer_role_id(), output);
  }

  // uint32 self_role_pos = 17;
  if (this->self_role_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->self_role_pos(), output);
  }

  // repeated .Pb.DRoleScore role_score = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_score_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->role_score(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcState)
}

::google::protobuf::uint8* AcpcState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hand_id = 1;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_id(), target);
  }

  // int32 max_spent = 2;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_spent(), target);
  }

  // int32 min_nolimit_raise_to = 3;
  if (this->min_nolimit_raise_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_nolimit_raise_to(), target);
  }

  // repeated int32 spent = 4;
  if (this->spent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _spent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->spent_, target);
  }

  // repeated .Pb.AcpcRound round_actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->round_actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->round_actions(static_cast<int>(i)), deterministic, target);
  }

  // int32 round = 6;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->round(), target);
  }

  // int32 finished = 7;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->finished(), target);
  }

  // repeated int32 fold_players = 8;
  if (this->fold_players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _fold_players_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fold_players_, target);
  }

  // repeated .Pb.AcpcCard board_cards = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.AcpcCard hole_cards = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  // uint32 cur_player_pos = 11;
  if (this->cur_player_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_player_pos(), target);
  }

  // repeated .Pb.HoleCards player_hole_cards = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->player_hole_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 round_spent = 13;
  if (this->round_spent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _round_spent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->round_spent_, target);
  }

  // repeated string card_type = 14;
  for (int i = 0, n = this->card_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_type(i).data(), static_cast<int>(this->card_type(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcState.card_type");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->card_type(i), target);
  }

  // repeated int32 score = 15;
  if (this->score_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _score_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->score_, target);
  }

  // uint32 dealer_role_id = 16;
  if (this->dealer_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dealer_role_id(), target);
  }

  // uint32 self_role_pos = 17;
  if (this->self_role_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->self_role_pos(), target);
  }

  // repeated .Pb.DRoleScore role_score = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_score_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->role_score(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcState)
  return target;
}

size_t AcpcState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 spent = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->spent_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.AcpcRound round_actions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->round_actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->round_actions(static_cast<int>(i)));
    }
  }

  // repeated int32 fold_players = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fold_players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fold_players_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.AcpcCard board_cards = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.AcpcCard hole_cards = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.HoleCards player_hole_cards = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->player_hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_hole_cards(static_cast<int>(i)));
    }
  }

  // repeated int32 round_spent = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->round_spent_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _round_spent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string card_type = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_type_size());
  for (int i = 0, n = this->card_type_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->card_type(i));
  }

  // repeated int32 score = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->score_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _score_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.DRoleScore role_score = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->role_score_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_score(static_cast<int>(i)));
    }
  }

  // int32 hand_id = 1;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hand_id());
  }

  // int32 max_spent = 2;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_spent());
  }

  // int32 min_nolimit_raise_to = 3;
  if (this->min_nolimit_raise_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_nolimit_raise_to());
  }

  // int32 round = 6;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // int32 finished = 7;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finished());
  }

  // uint32 cur_player_pos = 11;
  if (this->cur_player_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_player_pos());
  }

  // uint32 dealer_role_id = 16;
  if (this->dealer_role_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_role_id());
  }

  // uint32 self_role_pos = 17;
  if (this->self_role_pos() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->self_role_pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcState)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcState)
    MergeFrom(*source);
  }
}

void AcpcState::MergeFrom(const AcpcState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spent_.MergeFrom(from.spent_);
  round_actions_.MergeFrom(from.round_actions_);
  fold_players_.MergeFrom(from.fold_players_);
  board_cards_.MergeFrom(from.board_cards_);
  hole_cards_.MergeFrom(from.hole_cards_);
  player_hole_cards_.MergeFrom(from.player_hole_cards_);
  round_spent_.MergeFrom(from.round_spent_);
  card_type_.MergeFrom(from.card_type_);
  score_.MergeFrom(from.score_);
  role_score_.MergeFrom(from.role_score_);
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
  if (from.min_nolimit_raise_to() != 0) {
    set_min_nolimit_raise_to(from.min_nolimit_raise_to());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.cur_player_pos() != 0) {
    set_cur_player_pos(from.cur_player_pos());
  }
  if (from.dealer_role_id() != 0) {
    set_dealer_role_id(from.dealer_role_id());
  }
  if (from.self_role_pos() != 0) {
    set_self_role_pos(from.self_role_pos());
  }
}

void AcpcState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcState::CopyFrom(const AcpcState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcState::IsInitialized() const {
  return true;
}

void AcpcState::Swap(AcpcState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcState::InternalSwap(AcpcState* other) {
  using std::swap;
  spent_.InternalSwap(&other->spent_);
  round_actions_.InternalSwap(&other->round_actions_);
  fold_players_.InternalSwap(&other->fold_players_);
  board_cards_.InternalSwap(&other->board_cards_);
  hole_cards_.InternalSwap(&other->hole_cards_);
  player_hole_cards_.InternalSwap(&other->player_hole_cards_);
  round_spent_.InternalSwap(&other->round_spent_);
  card_type_.InternalSwap(&other->card_type_);
  score_.InternalSwap(&other->score_);
  role_score_.InternalSwap(&other->role_score_);
  swap(hand_id_, other->hand_id_);
  swap(max_spent_, other->max_spent_);
  swap(min_nolimit_raise_to_, other->min_nolimit_raise_to_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  swap(cur_player_pos_, other->cur_player_pos_);
  swap(dealer_role_id_, other->dealer_role_id_);
  swap(self_role_pos_, other->self_role_pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcState::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleInfo::kRoleIdFieldNumber;
const int RoleInfo::kRoleNameFieldNumber;
const int RoleInfo::kRoleTypeFieldNumber;
const int RoleInfo::kRoleImgFieldNumber;
const int RoleInfo::kRoleSeatFieldNumber;
const int RoleInfo::kIsReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleInfo::RoleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsRoleInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoleInfo)
}
RoleInfo::RoleInfo(const RoleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_img().size() > 0) {
    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ready_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(is_ready_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoleInfo)
}

void RoleInfo::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ready_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(is_ready_));
  _cached_size_ = 0;
}

RoleInfo::~RoleInfo() {
  // @@protoc_insertion_point(destructor:Pb.RoleInfo)
  SharedDtor();
}

void RoleInfo::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfo::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleInfo& RoleInfo::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsRoleInfo();
  return *internal_default_instance();
}

RoleInfo* RoleInfo::New(::google::protobuf::Arena* arena) const {
  RoleInfo* n = new RoleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ready_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(is_ready_));
  _internal_metadata_.Clear();
}

bool RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoleInfo.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_img = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_img()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_img().data(), static_cast<int>(this->role_img().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoleInfo.role_img"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_seat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_ready = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoleInfo)
  return false;
#undef DO_
}

void RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoleInfo.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // uint32 role_type = 3;
  if (this->role_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_type(), output);
  }

  // string role_img = 4;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoleInfo.role_img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->role_img(), output);
  }

  // uint32 role_seat = 5;
  if (this->role_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_seat(), output);
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_ready(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoleInfo)
}

::google::protobuf::uint8* RoleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoleInfo.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // uint32 role_type = 3;
  if (this->role_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_type(), target);
  }

  // string role_img = 4;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoleInfo.role_img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_img(), target);
  }

  // uint32 role_seat = 5;
  if (this->role_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_seat(), target);
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_ready(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoleInfo)
  return target;
}

size_t RoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string role_img = 4;
  if (this->role_img().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_img());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 role_type = 3;
  if (this->role_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_type());
  }

  // uint32 role_seat = 5;
  if (this->role_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_seat());
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_ready());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoleInfo)
    MergeFrom(*source);
  }
}

void RoleInfo::MergeFrom(const RoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_img().size() > 0) {

    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.role_type() != 0) {
    set_role_type(from.role_type());
  }
  if (from.role_seat() != 0) {
    set_role_seat(from.role_seat());
  }
  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
}

void RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {
  return true;
}

void RoleInfo::Swap(RoleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleInfo::InternalSwap(RoleInfo* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  role_img_.Swap(&other->role_img_);
  swap(role_id_, other->role_id_);
  swap(role_type_, other->role_type_);
  swap(role_seat_, other->role_seat_);
  swap(is_ready_, other->is_ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleInfo::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomRole::kRoleIdFieldNumber;
const int RoomRole::kRoleSeatFieldNumber;
const int RoomRole::kServerIdFieldNumber;
const int RoomRole::kCliconnIdFieldNumber;
const int RoomRole::kResetIdFieldNumber;
const int RoomRole::kIsReadyFieldNumber;
const int RoomRole::kHostedFieldNumber;
const int RoomRole::kJoinTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomRole::RoomRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsRoomRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoomRole)
}
RoomRole::RoomRole(const RoomRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(join_type_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoomRole)
}

void RoomRole::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(join_type_));
  _cached_size_ = 0;
}

RoomRole::~RoomRole() {
  // @@protoc_insertion_point(destructor:Pb.RoomRole)
  SharedDtor();
}

void RoomRole::SharedDtor() {
}

void RoomRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomRole::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomRole& RoomRole::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsRoomRole();
  return *internal_default_instance();
}

RoomRole* RoomRole::New(::google::protobuf::Arena* arena) const {
  RoomRole* n = new RoomRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomRole::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoomRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(join_type_));
  _internal_metadata_.Clear();
}

bool RoomRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoomRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_seat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cliconn_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cliconn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reset_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_ready = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hosted = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hosted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 join_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoomRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoomRole)
  return false;
#undef DO_
}

void RoomRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoomRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 role_seat = 2;
  if (this->role_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_seat(), output);
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // uint64 cliconn_id = 4;
  if (this->cliconn_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cliconn_id(), output);
  }

  // uint32 reset_id = 5;
  if (this->reset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reset_id(), output);
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_ready(), output);
  }

  // uint32 hosted = 7;
  if (this->hosted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hosted(), output);
  }

  // uint32 join_type = 8;
  if (this->join_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->join_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoomRole)
}

::google::protobuf::uint8* RoomRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoomRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 role_seat = 2;
  if (this->role_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_seat(), target);
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // uint64 cliconn_id = 4;
  if (this->cliconn_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cliconn_id(), target);
  }

  // uint32 reset_id = 5;
  if (this->reset_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reset_id(), target);
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_ready(), target);
  }

  // uint32 hosted = 7;
  if (this->hosted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hosted(), target);
  }

  // uint32 join_type = 8;
  if (this->join_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->join_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoomRole)
  return target;
}

size_t RoomRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoomRole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 role_seat = 2;
  if (this->role_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_seat());
  }

  // uint64 cliconn_id = 4;
  if (this->cliconn_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cliconn_id());
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  // uint32 reset_id = 5;
  if (this->reset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reset_id());
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_ready());
  }

  // uint32 hosted = 7;
  if (this->hosted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hosted());
  }

  // uint32 join_type = 8;
  if (this->join_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->join_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoomRole)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoomRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoomRole)
    MergeFrom(*source);
  }
}

void RoomRole::MergeFrom(const RoomRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoomRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.role_seat() != 0) {
    set_role_seat(from.role_seat());
  }
  if (from.cliconn_id() != 0) {
    set_cliconn_id(from.cliconn_id());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.reset_id() != 0) {
    set_reset_id(from.reset_id());
  }
  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
  if (from.hosted() != 0) {
    set_hosted(from.hosted());
  }
  if (from.join_type() != 0) {
    set_join_type(from.join_type());
  }
}

void RoomRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoomRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomRole::CopyFrom(const RoomRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoomRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomRole::IsInitialized() const {
  return true;
}

void RoomRole::Swap(RoomRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomRole::InternalSwap(RoomRole* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(role_seat_, other->role_seat_);
  swap(cliconn_id_, other->cliconn_id_);
  swap(server_id_, other->server_id_);
  swap(reset_id_, other->reset_id_);
  swap(is_ready_, other->is_ready_);
  swap(hosted_, other->hosted_);
  swap(join_type_, other->join_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomRole::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomRoleList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomRoleList::kRoleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomRoleList::RoomRoleList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsRoomRoleList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoomRoleList)
}
RoomRoleList::RoomRoleList(const RoomRoleList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_info_(from.role_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb.RoomRoleList)
}

void RoomRoleList::SharedCtor() {
  _cached_size_ = 0;
}

RoomRoleList::~RoomRoleList() {
  // @@protoc_insertion_point(destructor:Pb.RoomRoleList)
  SharedDtor();
}

void RoomRoleList::SharedDtor() {
}

void RoomRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomRoleList::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomRoleList& RoomRoleList::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsRoomRoleList();
  return *internal_default_instance();
}

RoomRoleList* RoomRoleList::New(::google::protobuf::Arena* arena) const {
  RoomRoleList* n = new RoomRoleList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomRoleList::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoomRoleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_info_.Clear();
  _internal_metadata_.Clear();
}

bool RoomRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoomRoleList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.RoomRole role_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoomRoleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoomRoleList)
  return false;
#undef DO_
}

void RoomRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoomRoleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.RoomRole role_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_info(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoomRoleList)
}

::google::protobuf::uint8* RoomRoleList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoomRoleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.RoomRole role_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->role_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoomRoleList)
  return target;
}

size_t RoomRoleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoomRoleList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.RoomRole role_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->role_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomRoleList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoomRoleList)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomRoleList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomRoleList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoomRoleList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoomRoleList)
    MergeFrom(*source);
  }
}

void RoomRoleList::MergeFrom(const RoomRoleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoomRoleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_info_.MergeFrom(from.role_info_);
}

void RoomRoleList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoomRoleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomRoleList::CopyFrom(const RoomRoleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoomRoleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomRoleList::IsInitialized() const {
  return true;
}

void RoomRoleList::Swap(RoomRoleList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomRoleList::InternalSwap(RoomRoleList* other) {
  using std::swap;
  role_info_.InternalSwap(&other->role_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomRoleList::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleScore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleScore::kRoleSeatFieldNumber;
const int RoleScore::kRoleIdFieldNumber;
const int RoleScore::kRoleNameFieldNumber;
const int RoleScore::kScoreFieldNumber;
const int RoleScore::kHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleScore::RoleScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsRoleScore();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoleScore)
}
RoleScore::RoleScore(const RoleScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  ::memcpy(&role_seat_, &from.role_seat_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&role_seat_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoleScore)
}

void RoleScore::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&role_seat_)) + sizeof(score_));
  _cached_size_ = 0;
}

RoleScore::~RoleScore() {
  // @@protoc_insertion_point(destructor:Pb.RoleScore)
  SharedDtor();
}

void RoleScore::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleScore::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleScore& RoleScore::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsRoleScore();
  return *internal_default_instance();
}

RoleScore* RoleScore::New(::google::protobuf::Arena* arena) const {
  RoleScore* n = new RoleScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleScore::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoleScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&role_seat_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool RoleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoleScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_seat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoleScore.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoleScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoleScore)
  return false;
#undef DO_
}

void RoleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoleScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_seat = 1;
  if (this->role_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_seat(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoleScore.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->role_name(), output);
  }

  // int32 score = 4;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hole_cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoleScore)
}

::google::protobuf::uint8* RoleScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoleScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_seat = 1;
  if (this->role_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_seat(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoleScore.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // int32 score = 4;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // repeated .Pb.AcpcCard hole_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoleScore)
  return target;
}

size_t RoleScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoleScore)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard hole_cards = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // uint32 role_seat = 1;
  if (this->role_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_seat());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // int32 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoleScore)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoleScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoleScore)
    MergeFrom(*source);
  }
}

void RoleScore::MergeFrom(const RoleScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoleScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_seat() != 0) {
    set_role_seat(from.role_seat());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void RoleScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoleScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleScore::CopyFrom(const RoleScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoleScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleScore::IsInitialized() const {
  return true;
}

void RoleScore::Swap(RoleScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleScore::InternalSwap(RoleScore* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  role_name_.Swap(&other->role_name_);
  swap(role_seat_, other->role_seat_);
  swap(role_id_, other->role_id_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleScore::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomAttr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomAttr::kRoleIdFieldNumber;
const int RoomAttr::kRoleNameFieldNumber;
const int RoomAttr::kRoomNameFieldNumber;
const int RoomAttr::kGameTypeFieldNumber;
const int RoomAttr::kDifficultyFieldNumber;
const int RoomAttr::kPasswordFieldNumber;
const int RoomAttr::kVersionFieldNumber;
const int RoomAttr::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomAttr::RoomAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsRoomAttr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoomAttr)
}
RoomAttr::RoomAttr(const RoomAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoomAttr)
}

void RoomAttr::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(server_id_));
  _cached_size_ = 0;
}

RoomAttr::~RoomAttr() {
  // @@protoc_insertion_point(destructor:Pb.RoomAttr)
  SharedDtor();
}

void RoomAttr::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomAttr::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomAttr& RoomAttr::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsRoomAttr();
  return *internal_default_instance();
}

RoomAttr* RoomAttr::New(::google::protobuf::Arena* arena) const {
  RoomAttr* n = new RoomAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoomAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

bool RoomAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoomAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomAttr.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomAttr.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomAttr.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomAttr.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoomAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoomAttr)
  return false;
#undef DO_
}

void RoomAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoomAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_name(), output);
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_type(), output);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficulty(), output);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  // uint32 server_id = 8;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoomAttr)
}

::google::protobuf::uint8* RoomAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoomAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_type(), target);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->difficulty(), target);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomAttr.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  // uint32 server_id = 8;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoomAttr)
  return target;
}

size_t RoomAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoomAttr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // string password = 6;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // uint32 server_id = 8;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoomAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoomAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoomAttr)
    MergeFrom(*source);
  }
}

void RoomAttr::MergeFrom(const RoomAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoomAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void RoomAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoomAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomAttr::CopyFrom(const RoomAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoomAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAttr::IsInitialized() const {
  return true;
}

void RoomAttr::Swap(RoomAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomAttr::InternalSwap(RoomAttr* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  room_name_.Swap(&other->room_name_);
  password_.Swap(&other->password_);
  version_.Swap(&other->version_);
  swap(role_id_, other->role_id_);
  swap(game_type_, other->game_type_);
  swap(difficulty_, other->difficulty_);
  swap(server_id_, other->server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomAttr::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomCanJoin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomCanJoin::kRoleIdFieldNumber;
const int RoomCanJoin::kRoleNameFieldNumber;
const int RoomCanJoin::kRoomNameFieldNumber;
const int RoomCanJoin::kGameTypeFieldNumber;
const int RoomCanJoin::kDifficultyFieldNumber;
const int RoomCanJoin::kVersionFieldNumber;
const int RoomCanJoin::kServerIdFieldNumber;
const int RoomCanJoin::kPlayerCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomCanJoin::RoomCanJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_2eproto::InitDefaultsRoomCanJoin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoomCanJoin)
}
RoomCanJoin::RoomCanJoin(const RoomCanJoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_cnt_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(player_cnt_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoomCanJoin)
}

void RoomCanJoin::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_cnt_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(player_cnt_));
  _cached_size_ = 0;
}

RoomCanJoin::~RoomCanJoin() {
  // @@protoc_insertion_point(destructor:Pb.RoomCanJoin)
  SharedDtor();
}

void RoomCanJoin::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomCanJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCanJoin::descriptor() {
  ::protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomCanJoin& RoomCanJoin::default_instance() {
  ::protobuf_system_2eproto::InitDefaultsRoomCanJoin();
  return *internal_default_instance();
}

RoomCanJoin* RoomCanJoin::New(::google::protobuf::Arena* arena) const {
  RoomCanJoin* n = new RoomCanJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomCanJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoomCanJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_cnt_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(player_cnt_));
  _internal_metadata_.Clear();
}

bool RoomCanJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoomCanJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomCanJoin.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomCanJoin.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RoomCanJoin.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_cnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoomCanJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoomCanJoin)
  return false;
#undef DO_
}

void RoomCanJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoomCanJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomCanJoin.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomCanJoin.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_name(), output);
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_type(), output);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficulty(), output);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomCanJoin.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // uint32 server_id = 7;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_id(), output);
  }

  // uint32 player_cnt = 8;
  if (this->player_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->player_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoomCanJoin)
}

::google::protobuf::uint8* RoomCanJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoomCanJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomCanJoin.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomCanJoin.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_type(), target);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->difficulty(), target);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RoomCanJoin.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // uint32 server_id = 7;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_id(), target);
  }

  // uint32 player_cnt = 8;
  if (this->player_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->player_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoomCanJoin)
  return target;
}

size_t RoomCanJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoomCanJoin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // uint32 server_id = 7;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  // uint32 player_cnt = 8;
  if (this->player_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCanJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoomCanJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomCanJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomCanJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoomCanJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoomCanJoin)
    MergeFrom(*source);
  }
}

void RoomCanJoin::MergeFrom(const RoomCanJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoomCanJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.player_cnt() != 0) {
    set_player_cnt(from.player_cnt());
  }
}

void RoomCanJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoomCanJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCanJoin::CopyFrom(const RoomCanJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoomCanJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCanJoin::IsInitialized() const {
  return true;
}

void RoomCanJoin::Swap(RoomCanJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomCanJoin::InternalSwap(RoomCanJoin* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  room_name_.Swap(&other->room_name_);
  version_.Swap(&other->version_);
  swap(role_id_, other->role_id_);
  swap(game_type_, other->game_type_);
  swap(difficulty_, other->difficulty_);
  swap(server_id_, other->server_id_);
  swap(player_cnt_, other->player_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomCanJoin::GetMetadata() const {
  protobuf_system_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
