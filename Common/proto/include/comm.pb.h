// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef PROTOBUF_comm_2eproto__INCLUDED
#define PROTOBUF_comm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "system.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_comm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommSvrRegisterImpl();
void InitDefaultsCommSvrRegister();
void InitDefaultsCommSvrUnregisterImpl();
void InitDefaultsCommSvrUnregister();
void InitDefaultsCommKeepAliveImpl();
void InitDefaultsCommKeepAlive();
void InitDefaultsAllocServerReqImpl();
void InitDefaultsAllocServerReq();
void InitDefaultsAllocServerRespImpl();
void InitDefaultsAllocServerResp();
void InitDefaultsServerReportImpl();
void InitDefaultsServerReport();
void InitDefaultsGameDefImpl();
void InitDefaultsGameDef();
void InitDefaultsMatchDefImpl();
void InitDefaultsMatchDef();
void InitDefaultsQueryGameConfigImpl();
void InitDefaultsQueryGameConfig();
void InitDefaultsListenDefImpl();
void InitDefaultsListenDef();
void InitDefaultsQueryListenServerImpl();
void InitDefaultsQueryListenServer();
void InitDefaultsTpaRoleImpl();
void InitDefaultsTpaRole();
void InitDefaultsTpaUserLoginImpl();
void InitDefaultsTpaUserLogin();
inline void InitDefaults() {
  InitDefaultsCommSvrRegister();
  InitDefaultsCommSvrUnregister();
  InitDefaultsCommKeepAlive();
  InitDefaultsAllocServerReq();
  InitDefaultsAllocServerResp();
  InitDefaultsServerReport();
  InitDefaultsGameDef();
  InitDefaultsMatchDef();
  InitDefaultsQueryGameConfig();
  InitDefaultsListenDef();
  InitDefaultsQueryListenServer();
  InitDefaultsTpaRole();
  InitDefaultsTpaUserLogin();
}
}  // namespace protobuf_comm_2eproto
namespace Pb {
class AllocServerReq;
class AllocServerReqDefaultTypeInternal;
extern AllocServerReqDefaultTypeInternal _AllocServerReq_default_instance_;
class AllocServerResp;
class AllocServerRespDefaultTypeInternal;
extern AllocServerRespDefaultTypeInternal _AllocServerResp_default_instance_;
class CommKeepAlive;
class CommKeepAliveDefaultTypeInternal;
extern CommKeepAliveDefaultTypeInternal _CommKeepAlive_default_instance_;
class CommSvrRegister;
class CommSvrRegisterDefaultTypeInternal;
extern CommSvrRegisterDefaultTypeInternal _CommSvrRegister_default_instance_;
class CommSvrUnregister;
class CommSvrUnregisterDefaultTypeInternal;
extern CommSvrUnregisterDefaultTypeInternal _CommSvrUnregister_default_instance_;
class GameDef;
class GameDefDefaultTypeInternal;
extern GameDefDefaultTypeInternal _GameDef_default_instance_;
class ListenDef;
class ListenDefDefaultTypeInternal;
extern ListenDefDefaultTypeInternal _ListenDef_default_instance_;
class MatchDef;
class MatchDefDefaultTypeInternal;
extern MatchDefDefaultTypeInternal _MatchDef_default_instance_;
class QueryGameConfig;
class QueryGameConfigDefaultTypeInternal;
extern QueryGameConfigDefaultTypeInternal _QueryGameConfig_default_instance_;
class QueryListenServer;
class QueryListenServerDefaultTypeInternal;
extern QueryListenServerDefaultTypeInternal _QueryListenServer_default_instance_;
class ServerReport;
class ServerReportDefaultTypeInternal;
extern ServerReportDefaultTypeInternal _ServerReport_default_instance_;
class TpaRole;
class TpaRoleDefaultTypeInternal;
extern TpaRoleDefaultTypeInternal _TpaRole_default_instance_;
class TpaUserLogin;
class TpaUserLoginDefaultTypeInternal;
extern TpaUserLoginDefaultTypeInternal _TpaUserLogin_default_instance_;
}  // namespace Pb
namespace Pb {

// ===================================================================

class CommSvrRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.CommSvrRegister) */ {
 public:
  CommSvrRegister();
  virtual ~CommSvrRegister();

  CommSvrRegister(const CommSvrRegister& from);

  inline CommSvrRegister& operator=(const CommSvrRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommSvrRegister(CommSvrRegister&& from) noexcept
    : CommSvrRegister() {
    *this = ::std::move(from);
  }

  inline CommSvrRegister& operator=(CommSvrRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommSvrRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommSvrRegister* internal_default_instance() {
    return reinterpret_cast<const CommSvrRegister*>(
               &_CommSvrRegister_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommSvrRegister* other);
  friend void swap(CommSvrRegister& a, CommSvrRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommSvrRegister* New() const PROTOBUF_FINAL { return New(NULL); }

  CommSvrRegister* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommSvrRegister& from);
  void MergeFrom(const CommSvrRegister& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommSvrRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string addr = 3;
  void clear_addr();
  static const int kAddrFieldNumber = 3;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // .Pb.ServerID svr_id = 1;
  bool has_svr_id() const;
  void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  const ::Pb::ServerID& svr_id() const;
  ::Pb::ServerID* release_svr_id();
  ::Pb::ServerID* mutable_svr_id();
  void set_allocated_svr_id(::Pb::ServerID* svr_id);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 s_server_id = 5;
  void clear_s_server_id();
  static const int kSServerIdFieldNumber = 5;
  ::google::protobuf::uint32 s_server_id() const;
  void set_s_server_id(::google::protobuf::uint32 value);

  // uint32 c_server_id = 6;
  void clear_c_server_id();
  static const int kCServerIdFieldNumber = 6;
  ::google::protobuf::uint32 c_server_id() const;
  void set_c_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.CommSvrRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::Pb::ServerID* svr_id_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 s_server_id_;
  ::google::protobuf::uint32 c_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCommSvrRegisterImpl();
};
// -------------------------------------------------------------------

class CommSvrUnregister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.CommSvrUnregister) */ {
 public:
  CommSvrUnregister();
  virtual ~CommSvrUnregister();

  CommSvrUnregister(const CommSvrUnregister& from);

  inline CommSvrUnregister& operator=(const CommSvrUnregister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommSvrUnregister(CommSvrUnregister&& from) noexcept
    : CommSvrUnregister() {
    *this = ::std::move(from);
  }

  inline CommSvrUnregister& operator=(CommSvrUnregister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommSvrUnregister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommSvrUnregister* internal_default_instance() {
    return reinterpret_cast<const CommSvrUnregister*>(
               &_CommSvrUnregister_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CommSvrUnregister* other);
  friend void swap(CommSvrUnregister& a, CommSvrUnregister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommSvrUnregister* New() const PROTOBUF_FINAL { return New(NULL); }

  CommSvrUnregister* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommSvrUnregister& from);
  void MergeFrom(const CommSvrUnregister& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommSvrUnregister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Pb.ServerID svr_id = 1;
  bool has_svr_id() const;
  void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  const ::Pb::ServerID& svr_id() const;
  ::Pb::ServerID* release_svr_id();
  ::Pb::ServerID* mutable_svr_id();
  void set_allocated_svr_id(::Pb::ServerID* svr_id);

  // @@protoc_insertion_point(class_scope:Pb.CommSvrUnregister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Pb::ServerID* svr_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCommSvrUnregisterImpl();
};
// -------------------------------------------------------------------

class CommKeepAlive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.CommKeepAlive) */ {
 public:
  CommKeepAlive();
  virtual ~CommKeepAlive();

  CommKeepAlive(const CommKeepAlive& from);

  inline CommKeepAlive& operator=(const CommKeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommKeepAlive(CommKeepAlive&& from) noexcept
    : CommKeepAlive() {
    *this = ::std::move(from);
  }

  inline CommKeepAlive& operator=(CommKeepAlive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommKeepAlive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommKeepAlive* internal_default_instance() {
    return reinterpret_cast<const CommKeepAlive*>(
               &_CommKeepAlive_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CommKeepAlive* other);
  friend void swap(CommKeepAlive& a, CommKeepAlive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommKeepAlive* New() const PROTOBUF_FINAL { return New(NULL); }

  CommKeepAlive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommKeepAlive& from);
  void MergeFrom(const CommKeepAlive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommKeepAlive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Pb.CommKeepAlive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCommKeepAliveImpl();
};
// -------------------------------------------------------------------

class AllocServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AllocServerReq) */ {
 public:
  AllocServerReq();
  virtual ~AllocServerReq();

  AllocServerReq(const AllocServerReq& from);

  inline AllocServerReq& operator=(const AllocServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocServerReq(AllocServerReq&& from) noexcept
    : AllocServerReq() {
    *this = ::std::move(from);
  }

  inline AllocServerReq& operator=(AllocServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocServerReq* internal_default_instance() {
    return reinterpret_cast<const AllocServerReq*>(
               &_AllocServerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AllocServerReq* other);
  friend void swap(AllocServerReq& a, AllocServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocServerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AllocServerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllocServerReq& from);
  void MergeFrom(const AllocServerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllocServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AllocServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsAllocServerReqImpl();
};
// -------------------------------------------------------------------

class AllocServerResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AllocServerResp) */ {
 public:
  AllocServerResp();
  virtual ~AllocServerResp();

  AllocServerResp(const AllocServerResp& from);

  inline AllocServerResp& operator=(const AllocServerResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocServerResp(AllocServerResp&& from) noexcept
    : AllocServerResp() {
    *this = ::std::move(from);
  }

  inline AllocServerResp& operator=(AllocServerResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocServerResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocServerResp* internal_default_instance() {
    return reinterpret_cast<const AllocServerResp*>(
               &_AllocServerResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AllocServerResp* other);
  friend void swap(AllocServerResp& a, AllocServerResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocServerResp* New() const PROTOBUF_FINAL { return New(NULL); }

  AllocServerResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllocServerResp& from);
  void MergeFrom(const AllocServerResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllocServerResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_ip = 3;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // uint32 server_port = 4;
  void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  ::google::protobuf::uint32 server_port() const;
  void set_server_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AllocServerResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 server_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsAllocServerRespImpl();
};
// -------------------------------------------------------------------

class ServerReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.ServerReport) */ {
 public:
  ServerReport();
  virtual ~ServerReport();

  ServerReport(const ServerReport& from);

  inline ServerReport& operator=(const ServerReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerReport(ServerReport&& from) noexcept
    : ServerReport() {
    *this = ::std::move(from);
  }

  inline ServerReport& operator=(ServerReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerReport* internal_default_instance() {
    return reinterpret_cast<const ServerReport*>(
               &_ServerReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ServerReport* other);
  friend void swap(ServerReport& a, ServerReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerReport* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerReport& from);
  void MergeFrom(const ServerReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // uint32 room_cnt = 2;
  void clear_room_cnt();
  static const int kRoomCntFieldNumber = 2;
  ::google::protobuf::uint32 room_cnt() const;
  void set_room_cnt(::google::protobuf::uint32 value);

  // uint32 robot_cnt = 3;
  void clear_robot_cnt();
  static const int kRobotCntFieldNumber = 3;
  ::google::protobuf::uint32 robot_cnt() const;
  void set_robot_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.ServerReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 room_cnt_;
  ::google::protobuf::uint32 robot_cnt_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsServerReportImpl();
};
// -------------------------------------------------------------------

class GameDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.GameDef) */ {
 public:
  GameDef();
  virtual ~GameDef();

  GameDef(const GameDef& from);

  inline GameDef& operator=(const GameDef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameDef(GameDef&& from) noexcept
    : GameDef() {
    *this = ::std::move(from);
  }

  inline GameDef& operator=(GameDef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameDef* internal_default_instance() {
    return reinterpret_cast<const GameDef*>(
               &_GameDef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GameDef* other);
  friend void swap(GameDef& a, GameDef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameDef* New() const PROTOBUF_FINAL { return New(NULL); }

  GameDef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameDef& from);
  void MergeFrom(const GameDef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameDef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 stack = 4;
  int stack_size() const;
  void clear_stack();
  static const int kStackFieldNumber = 4;
  ::google::protobuf::uint32 stack(int index) const;
  void set_stack(int index, ::google::protobuf::uint32 value);
  void add_stack(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stack() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stack();

  // repeated uint32 blind = 5;
  int blind_size() const;
  void clear_blind();
  static const int kBlindFieldNumber = 5;
  ::google::protobuf::uint32 blind(int index) const;
  void set_blind(int index, ::google::protobuf::uint32 value);
  void add_blind(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      blind() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_blind();

  // repeated uint32 firstPlayer = 6;
  int firstplayer_size() const;
  void clear_firstplayer();
  static const int kFirstPlayerFieldNumber = 6;
  ::google::protobuf::uint32 firstplayer(int index) const;
  void set_firstplayer(int index, ::google::protobuf::uint32 value);
  void add_firstplayer(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      firstplayer() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_firstplayer();

  // repeated uint32 numBoardCards = 10;
  int numboardcards_size() const;
  void clear_numboardcards();
  static const int kNumBoardCardsFieldNumber = 10;
  ::google::protobuf::uint32 numboardcards(int index) const;
  void set_numboardcards(int index, ::google::protobuf::uint32 value);
  void add_numboardcards(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      numboardcards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_numboardcards();

  // repeated uint32 raiseSize = 11;
  int raisesize_size() const;
  void clear_raisesize();
  static const int kRaiseSizeFieldNumber = 11;
  ::google::protobuf::uint32 raisesize(int index) const;
  void set_raisesize(int index, ::google::protobuf::uint32 value);
  void add_raisesize(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      raisesize() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_raisesize();

  // repeated uint32 maxRaises = 12;
  int maxraises_size() const;
  void clear_maxraises();
  static const int kMaxRaisesFieldNumber = 12;
  ::google::protobuf::uint32 maxraises(int index) const;
  void set_maxraises(int index, ::google::protobuf::uint32 value);
  void add_maxraises(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      maxraises() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_maxraises();

  // uint32 betting_type = 1;
  void clear_betting_type();
  static const int kBettingTypeFieldNumber = 1;
  ::google::protobuf::uint32 betting_type() const;
  void set_betting_type(::google::protobuf::uint32 value);

  // uint32 numPlayers = 2;
  void clear_numplayers();
  static const int kNumPlayersFieldNumber = 2;
  ::google::protobuf::uint32 numplayers() const;
  void set_numplayers(::google::protobuf::uint32 value);

  // uint32 numRounds = 3;
  void clear_numrounds();
  static const int kNumRoundsFieldNumber = 3;
  ::google::protobuf::uint32 numrounds() const;
  void set_numrounds(::google::protobuf::uint32 value);

  // uint32 numSuits = 7;
  void clear_numsuits();
  static const int kNumSuitsFieldNumber = 7;
  ::google::protobuf::uint32 numsuits() const;
  void set_numsuits(::google::protobuf::uint32 value);

  // uint32 numRanks = 8;
  void clear_numranks();
  static const int kNumRanksFieldNumber = 8;
  ::google::protobuf::uint32 numranks() const;
  void set_numranks(::google::protobuf::uint32 value);

  // uint32 numHoleCards = 9;
  void clear_numholecards();
  static const int kNumHoleCardsFieldNumber = 9;
  ::google::protobuf::uint32 numholecards() const;
  void set_numholecards(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.GameDef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stack_;
  mutable int _stack_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > blind_;
  mutable int _blind_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > firstplayer_;
  mutable int _firstplayer_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > numboardcards_;
  mutable int _numboardcards_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > raisesize_;
  mutable int _raisesize_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > maxraises_;
  mutable int _maxraises_cached_byte_size_;
  ::google::protobuf::uint32 betting_type_;
  ::google::protobuf::uint32 numplayers_;
  ::google::protobuf::uint32 numrounds_;
  ::google::protobuf::uint32 numsuits_;
  ::google::protobuf::uint32 numranks_;
  ::google::protobuf::uint32 numholecards_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsGameDefImpl();
};
// -------------------------------------------------------------------

class MatchDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.MatchDef) */ {
 public:
  MatchDef();
  virtual ~MatchDef();

  MatchDef(const MatchDef& from);

  inline MatchDef& operator=(const MatchDef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchDef(MatchDef&& from) noexcept
    : MatchDef() {
    *this = ::std::move(from);
  }

  inline MatchDef& operator=(MatchDef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchDef* internal_default_instance() {
    return reinterpret_cast<const MatchDef*>(
               &_MatchDef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MatchDef* other);
  friend void swap(MatchDef& a, MatchDef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchDef* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchDef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchDef& from);
  void MergeFrom(const MatchDef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchDef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 match_enable = 1;
  void clear_match_enable();
  static const int kMatchEnableFieldNumber = 1;
  ::google::protobuf::uint32 match_enable() const;
  void set_match_enable(::google::protobuf::uint32 value);

  // uint32 match_hands = 2;
  void clear_match_hands();
  static const int kMatchHandsFieldNumber = 2;
  ::google::protobuf::uint32 match_hands() const;
  void set_match_hands(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.MatchDef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 match_enable_;
  ::google::protobuf::uint32 match_hands_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsMatchDefImpl();
};
// -------------------------------------------------------------------

class QueryGameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.QueryGameConfig) */ {
 public:
  QueryGameConfig();
  virtual ~QueryGameConfig();

  QueryGameConfig(const QueryGameConfig& from);

  inline QueryGameConfig& operator=(const QueryGameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryGameConfig(QueryGameConfig&& from) noexcept
    : QueryGameConfig() {
    *this = ::std::move(from);
  }

  inline QueryGameConfig& operator=(QueryGameConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryGameConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGameConfig* internal_default_instance() {
    return reinterpret_cast<const QueryGameConfig*>(
               &_QueryGameConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(QueryGameConfig* other);
  friend void swap(QueryGameConfig& a, QueryGameConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryGameConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryGameConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryGameConfig& from);
  void MergeFrom(const QueryGameConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryGameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.GameDef game_config = 3;
  int game_config_size() const;
  void clear_game_config();
  static const int kGameConfigFieldNumber = 3;
  const ::Pb::GameDef& game_config(int index) const;
  ::Pb::GameDef* mutable_game_config(int index);
  ::Pb::GameDef* add_game_config();
  ::google::protobuf::RepeatedPtrField< ::Pb::GameDef >*
      mutable_game_config();
  const ::google::protobuf::RepeatedPtrField< ::Pb::GameDef >&
      game_config() const;

  // string source_msg = 2;
  void clear_source_msg();
  static const int kSourceMsgFieldNumber = 2;
  const ::std::string& source_msg() const;
  void set_source_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_source_msg(::std::string&& value);
  #endif
  void set_source_msg(const char* value);
  void set_source_msg(const char* value, size_t size);
  ::std::string* mutable_source_msg();
  ::std::string* release_source_msg();
  void set_allocated_source_msg(::std::string* source_msg);

  // string betting_control = 4;
  void clear_betting_control();
  static const int kBettingControlFieldNumber = 4;
  const ::std::string& betting_control() const;
  void set_betting_control(const ::std::string& value);
  #if LANG_CXX11
  void set_betting_control(::std::string&& value);
  #endif
  void set_betting_control(const char* value);
  void set_betting_control(const char* value, size_t size);
  ::std::string* mutable_betting_control();
  ::std::string* release_betting_control();
  void set_allocated_betting_control(::std::string* betting_control);

  // .Pb.MatchDef match_config = 5;
  bool has_match_config() const;
  void clear_match_config();
  static const int kMatchConfigFieldNumber = 5;
  const ::Pb::MatchDef& match_config() const;
  ::Pb::MatchDef* release_match_config();
  ::Pb::MatchDef* mutable_match_config();
  void set_allocated_match_config(::Pb::MatchDef* match_config);

  // uint32 game_type = 1;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 1;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.QueryGameConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::GameDef > game_config_;
  ::google::protobuf::internal::ArenaStringPtr source_msg_;
  ::google::protobuf::internal::ArenaStringPtr betting_control_;
  ::Pb::MatchDef* match_config_;
  ::google::protobuf::uint32 game_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsQueryGameConfigImpl();
};
// -------------------------------------------------------------------

class ListenDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.ListenDef) */ {
 public:
  ListenDef();
  virtual ~ListenDef();

  ListenDef(const ListenDef& from);

  inline ListenDef& operator=(const ListenDef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListenDef(ListenDef&& from) noexcept
    : ListenDef() {
    *this = ::std::move(from);
  }

  inline ListenDef& operator=(ListenDef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListenDef* internal_default_instance() {
    return reinterpret_cast<const ListenDef*>(
               &_ListenDef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ListenDef* other);
  friend void swap(ListenDef& a, ListenDef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListenDef* New() const PROTOBUF_FINAL { return New(NULL); }

  ListenDef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListenDef& from);
  void MergeFrom(const ListenDef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListenDef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // .Pb.ServerID svr_id = 1;
  bool has_svr_id() const;
  void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  const ::Pb::ServerID& svr_id() const;
  ::Pb::ServerID* release_svr_id();
  ::Pb::ServerID* mutable_svr_id();
  void set_allocated_svr_id(::Pb::ServerID* svr_id);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.ListenDef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::Pb::ServerID* svr_id_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsListenDefImpl();
};
// -------------------------------------------------------------------

class QueryListenServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.QueryListenServer) */ {
 public:
  QueryListenServer();
  virtual ~QueryListenServer();

  QueryListenServer(const QueryListenServer& from);

  inline QueryListenServer& operator=(const QueryListenServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryListenServer(QueryListenServer&& from) noexcept
    : QueryListenServer() {
    *this = ::std::move(from);
  }

  inline QueryListenServer& operator=(QueryListenServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryListenServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryListenServer* internal_default_instance() {
    return reinterpret_cast<const QueryListenServer*>(
               &_QueryListenServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(QueryListenServer* other);
  friend void swap(QueryListenServer& a, QueryListenServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryListenServer* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryListenServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryListenServer& from);
  void MergeFrom(const QueryListenServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryListenServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.ListenDef acpc_servers = 2;
  int acpc_servers_size() const;
  void clear_acpc_servers();
  static const int kAcpcServersFieldNumber = 2;
  const ::Pb::ListenDef& acpc_servers(int index) const;
  ::Pb::ListenDef* mutable_acpc_servers(int index);
  ::Pb::ListenDef* add_acpc_servers();
  ::google::protobuf::RepeatedPtrField< ::Pb::ListenDef >*
      mutable_acpc_servers();
  const ::google::protobuf::RepeatedPtrField< ::Pb::ListenDef >&
      acpc_servers() const;

  // .Pb.ServerID req_server_id = 1;
  bool has_req_server_id() const;
  void clear_req_server_id();
  static const int kReqServerIdFieldNumber = 1;
  const ::Pb::ServerID& req_server_id() const;
  ::Pb::ServerID* release_req_server_id();
  ::Pb::ServerID* mutable_req_server_id();
  void set_allocated_req_server_id(::Pb::ServerID* req_server_id);

  // @@protoc_insertion_point(class_scope:Pb.QueryListenServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::ListenDef > acpc_servers_;
  ::Pb::ServerID* req_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsQueryListenServerImpl();
};
// -------------------------------------------------------------------

class TpaRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.TpaRole) */ {
 public:
  TpaRole();
  virtual ~TpaRole();

  TpaRole(const TpaRole& from);

  inline TpaRole& operator=(const TpaRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpaRole(TpaRole&& from) noexcept
    : TpaRole() {
    *this = ::std::move(from);
  }

  inline TpaRole& operator=(TpaRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpaRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpaRole* internal_default_instance() {
    return reinterpret_cast<const TpaRole*>(
               &_TpaRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TpaRole* other);
  friend void swap(TpaRole& a, TpaRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpaRole* New() const PROTOBUF_FINAL { return New(NULL); }

  TpaRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TpaRole& from);
  void MergeFrom(const TpaRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TpaRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 player_id = 2;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 player_id() const;
  void set_player_id(::google::protobuf::uint64 value);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // int32 seat = 3;
  void clear_seat();
  static const int kSeatFieldNumber = 3;
  ::google::protobuf::int32 seat() const;
  void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.TpaRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::int32 seat_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsTpaRoleImpl();
};
// -------------------------------------------------------------------

class TpaUserLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.TpaUserLogin) */ {
 public:
  TpaUserLogin();
  virtual ~TpaUserLogin();

  TpaUserLogin(const TpaUserLogin& from);

  inline TpaUserLogin& operator=(const TpaUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpaUserLogin(TpaUserLogin&& from) noexcept
    : TpaUserLogin() {
    *this = ::std::move(from);
  }

  inline TpaUserLogin& operator=(TpaUserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpaUserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpaUserLogin* internal_default_instance() {
    return reinterpret_cast<const TpaUserLogin*>(
               &_TpaUserLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TpaUserLogin* other);
  friend void swap(TpaUserLogin& a, TpaUserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpaUserLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  TpaUserLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TpaUserLogin& from);
  void MergeFrom(const TpaUserLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TpaUserLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.TpaRole tpa_role_list = 3;
  int tpa_role_list_size() const;
  void clear_tpa_role_list();
  static const int kTpaRoleListFieldNumber = 3;
  const ::Pb::TpaRole& tpa_role_list(int index) const;
  ::Pb::TpaRole* mutable_tpa_role_list(int index);
  ::Pb::TpaRole* add_tpa_role_list();
  ::google::protobuf::RepeatedPtrField< ::Pb::TpaRole >*
      mutable_tpa_role_list();
  const ::google::protobuf::RepeatedPtrField< ::Pb::TpaRole >&
      tpa_role_list() const;

  // string acpc_server_ip = 5;
  void clear_acpc_server_ip();
  static const int kAcpcServerIpFieldNumber = 5;
  const ::std::string& acpc_server_ip() const;
  void set_acpc_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_acpc_server_ip(::std::string&& value);
  #endif
  void set_acpc_server_ip(const char* value);
  void set_acpc_server_ip(const char* value, size_t size);
  ::std::string* mutable_acpc_server_ip();
  ::std::string* release_acpc_server_ip();
  void set_allocated_acpc_server_ip(::std::string* acpc_server_ip);

  // uint32 tpa_room_id = 1;
  void clear_tpa_room_id();
  static const int kTpaRoomIdFieldNumber = 1;
  ::google::protobuf::uint32 tpa_room_id() const;
  void set_tpa_room_id(::google::protobuf::uint32 value);

  // uint32 game_type = 2;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 acpc_server_id = 4;
  void clear_acpc_server_id();
  static const int kAcpcServerIdFieldNumber = 4;
  ::google::protobuf::uint32 acpc_server_id() const;
  void set_acpc_server_id(::google::protobuf::uint32 value);

  // uint32 acpc_server_port = 6;
  void clear_acpc_server_port();
  static const int kAcpcServerPortFieldNumber = 6;
  ::google::protobuf::uint32 acpc_server_port() const;
  void set_acpc_server_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.TpaUserLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::TpaRole > tpa_role_list_;
  ::google::protobuf::internal::ArenaStringPtr acpc_server_ip_;
  ::google::protobuf::uint32 tpa_room_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 acpc_server_id_;
  ::google::protobuf::uint32 acpc_server_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsTpaUserLoginImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommSvrRegister

// .Pb.ServerID svr_id = 1;
inline bool CommSvrRegister::has_svr_id() const {
  return this != internal_default_instance() && svr_id_ != NULL;
}
inline const ::Pb::ServerID& CommSvrRegister::svr_id() const {
  const ::Pb::ServerID* p = svr_id_;
  // @@protoc_insertion_point(field_get:Pb.CommSvrRegister.svr_id)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::ServerID*>(
      &::Pb::_ServerID_default_instance_);
}
inline ::Pb::ServerID* CommSvrRegister::release_svr_id() {
  // @@protoc_insertion_point(field_release:Pb.CommSvrRegister.svr_id)
  
  ::Pb::ServerID* temp = svr_id_;
  svr_id_ = NULL;
  return temp;
}
inline ::Pb::ServerID* CommSvrRegister::mutable_svr_id() {
  
  if (svr_id_ == NULL) {
    svr_id_ = new ::Pb::ServerID;
  }
  // @@protoc_insertion_point(field_mutable:Pb.CommSvrRegister.svr_id)
  return svr_id_;
}
inline void CommSvrRegister::set_allocated_svr_id(::Pb::ServerID* svr_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(svr_id_);
  }
  if (svr_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      svr_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, svr_id, submessage_arena);
    }
    
  } else {
    
  }
  svr_id_ = svr_id;
  // @@protoc_insertion_point(field_set_allocated:Pb.CommSvrRegister.svr_id)
}

// string server_name = 2;
inline void CommSvrRegister::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommSvrRegister::server_name() const {
  // @@protoc_insertion_point(field_get:Pb.CommSvrRegister.server_name)
  return server_name_.GetNoArena();
}
inline void CommSvrRegister::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.CommSvrRegister.server_name)
}
#if LANG_CXX11
inline void CommSvrRegister::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.CommSvrRegister.server_name)
}
#endif
inline void CommSvrRegister::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.CommSvrRegister.server_name)
}
inline void CommSvrRegister::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.CommSvrRegister.server_name)
}
inline ::std::string* CommSvrRegister::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.CommSvrRegister.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommSvrRegister::release_server_name() {
  // @@protoc_insertion_point(field_release:Pb.CommSvrRegister.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommSvrRegister::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.CommSvrRegister.server_name)
}

// string addr = 3;
inline void CommSvrRegister::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommSvrRegister::addr() const {
  // @@protoc_insertion_point(field_get:Pb.CommSvrRegister.addr)
  return addr_.GetNoArena();
}
inline void CommSvrRegister::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.CommSvrRegister.addr)
}
#if LANG_CXX11
inline void CommSvrRegister::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.CommSvrRegister.addr)
}
#endif
inline void CommSvrRegister::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.CommSvrRegister.addr)
}
inline void CommSvrRegister::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.CommSvrRegister.addr)
}
inline ::std::string* CommSvrRegister::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:Pb.CommSvrRegister.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommSvrRegister::release_addr() {
  // @@protoc_insertion_point(field_release:Pb.CommSvrRegister.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommSvrRegister::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:Pb.CommSvrRegister.addr)
}

// uint32 port = 4;
inline void CommSvrRegister::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 CommSvrRegister::port() const {
  // @@protoc_insertion_point(field_get:Pb.CommSvrRegister.port)
  return port_;
}
inline void CommSvrRegister::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Pb.CommSvrRegister.port)
}

// uint32 s_server_id = 5;
inline void CommSvrRegister::clear_s_server_id() {
  s_server_id_ = 0u;
}
inline ::google::protobuf::uint32 CommSvrRegister::s_server_id() const {
  // @@protoc_insertion_point(field_get:Pb.CommSvrRegister.s_server_id)
  return s_server_id_;
}
inline void CommSvrRegister::set_s_server_id(::google::protobuf::uint32 value) {
  
  s_server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.CommSvrRegister.s_server_id)
}

// uint32 c_server_id = 6;
inline void CommSvrRegister::clear_c_server_id() {
  c_server_id_ = 0u;
}
inline ::google::protobuf::uint32 CommSvrRegister::c_server_id() const {
  // @@protoc_insertion_point(field_get:Pb.CommSvrRegister.c_server_id)
  return c_server_id_;
}
inline void CommSvrRegister::set_c_server_id(::google::protobuf::uint32 value) {
  
  c_server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.CommSvrRegister.c_server_id)
}

// -------------------------------------------------------------------

// CommSvrUnregister

// .Pb.ServerID svr_id = 1;
inline bool CommSvrUnregister::has_svr_id() const {
  return this != internal_default_instance() && svr_id_ != NULL;
}
inline const ::Pb::ServerID& CommSvrUnregister::svr_id() const {
  const ::Pb::ServerID* p = svr_id_;
  // @@protoc_insertion_point(field_get:Pb.CommSvrUnregister.svr_id)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::ServerID*>(
      &::Pb::_ServerID_default_instance_);
}
inline ::Pb::ServerID* CommSvrUnregister::release_svr_id() {
  // @@protoc_insertion_point(field_release:Pb.CommSvrUnregister.svr_id)
  
  ::Pb::ServerID* temp = svr_id_;
  svr_id_ = NULL;
  return temp;
}
inline ::Pb::ServerID* CommSvrUnregister::mutable_svr_id() {
  
  if (svr_id_ == NULL) {
    svr_id_ = new ::Pb::ServerID;
  }
  // @@protoc_insertion_point(field_mutable:Pb.CommSvrUnregister.svr_id)
  return svr_id_;
}
inline void CommSvrUnregister::set_allocated_svr_id(::Pb::ServerID* svr_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(svr_id_);
  }
  if (svr_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      svr_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, svr_id, submessage_arena);
    }
    
  } else {
    
  }
  svr_id_ = svr_id;
  // @@protoc_insertion_point(field_set_allocated:Pb.CommSvrUnregister.svr_id)
}

// -------------------------------------------------------------------

// CommKeepAlive

// string msg = 1;
inline void CommKeepAlive::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommKeepAlive::msg() const {
  // @@protoc_insertion_point(field_get:Pb.CommKeepAlive.msg)
  return msg_.GetNoArena();
}
inline void CommKeepAlive::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.CommKeepAlive.msg)
}
#if LANG_CXX11
inline void CommKeepAlive::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.CommKeepAlive.msg)
}
#endif
inline void CommKeepAlive::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.CommKeepAlive.msg)
}
inline void CommKeepAlive::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.CommKeepAlive.msg)
}
inline ::std::string* CommKeepAlive::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Pb.CommKeepAlive.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommKeepAlive::release_msg() {
  // @@protoc_insertion_point(field_release:Pb.CommKeepAlive.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommKeepAlive::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Pb.CommKeepAlive.msg)
}

// -------------------------------------------------------------------

// AllocServerReq

// uint32 role_id = 1;
inline void AllocServerReq::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AllocServerReq::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AllocServerReq.role_id)
  return role_id_;
}
inline void AllocServerReq::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AllocServerReq.role_id)
}

// uint32 server_id = 2;
inline void AllocServerReq::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 AllocServerReq::server_id() const {
  // @@protoc_insertion_point(field_get:Pb.AllocServerReq.server_id)
  return server_id_;
}
inline void AllocServerReq::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AllocServerReq.server_id)
}

// -------------------------------------------------------------------

// AllocServerResp

// uint32 role_id = 1;
inline void AllocServerResp::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AllocServerResp::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AllocServerResp.role_id)
  return role_id_;
}
inline void AllocServerResp::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AllocServerResp.role_id)
}

// uint32 server_id = 2;
inline void AllocServerResp::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 AllocServerResp::server_id() const {
  // @@protoc_insertion_point(field_get:Pb.AllocServerResp.server_id)
  return server_id_;
}
inline void AllocServerResp::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AllocServerResp.server_id)
}

// string server_ip = 3;
inline void AllocServerResp::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllocServerResp::server_ip() const {
  // @@protoc_insertion_point(field_get:Pb.AllocServerResp.server_ip)
  return server_ip_.GetNoArena();
}
inline void AllocServerResp::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AllocServerResp.server_ip)
}
#if LANG_CXX11
inline void AllocServerResp::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AllocServerResp.server_ip)
}
#endif
inline void AllocServerResp::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AllocServerResp.server_ip)
}
inline void AllocServerResp::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AllocServerResp.server_ip)
}
inline ::std::string* AllocServerResp::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AllocServerResp.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllocServerResp::release_server_ip() {
  // @@protoc_insertion_point(field_release:Pb.AllocServerResp.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllocServerResp::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:Pb.AllocServerResp.server_ip)
}

// uint32 server_port = 4;
inline void AllocServerResp::clear_server_port() {
  server_port_ = 0u;
}
inline ::google::protobuf::uint32 AllocServerResp::server_port() const {
  // @@protoc_insertion_point(field_get:Pb.AllocServerResp.server_port)
  return server_port_;
}
inline void AllocServerResp::set_server_port(::google::protobuf::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:Pb.AllocServerResp.server_port)
}

// -------------------------------------------------------------------

// ServerReport

// uint32 server_id = 1;
inline void ServerReport::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerReport::server_id() const {
  // @@protoc_insertion_point(field_get:Pb.ServerReport.server_id)
  return server_id_;
}
inline void ServerReport::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.ServerReport.server_id)
}

// uint32 room_cnt = 2;
inline void ServerReport::clear_room_cnt() {
  room_cnt_ = 0u;
}
inline ::google::protobuf::uint32 ServerReport::room_cnt() const {
  // @@protoc_insertion_point(field_get:Pb.ServerReport.room_cnt)
  return room_cnt_;
}
inline void ServerReport::set_room_cnt(::google::protobuf::uint32 value) {
  
  room_cnt_ = value;
  // @@protoc_insertion_point(field_set:Pb.ServerReport.room_cnt)
}

// uint32 robot_cnt = 3;
inline void ServerReport::clear_robot_cnt() {
  robot_cnt_ = 0u;
}
inline ::google::protobuf::uint32 ServerReport::robot_cnt() const {
  // @@protoc_insertion_point(field_get:Pb.ServerReport.robot_cnt)
  return robot_cnt_;
}
inline void ServerReport::set_robot_cnt(::google::protobuf::uint32 value) {
  
  robot_cnt_ = value;
  // @@protoc_insertion_point(field_set:Pb.ServerReport.robot_cnt)
}

// -------------------------------------------------------------------

// GameDef

// uint32 betting_type = 1;
inline void GameDef::clear_betting_type() {
  betting_type_ = 0u;
}
inline ::google::protobuf::uint32 GameDef::betting_type() const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.betting_type)
  return betting_type_;
}
inline void GameDef::set_betting_type(::google::protobuf::uint32 value) {
  
  betting_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.GameDef.betting_type)
}

// uint32 numPlayers = 2;
inline void GameDef::clear_numplayers() {
  numplayers_ = 0u;
}
inline ::google::protobuf::uint32 GameDef::numplayers() const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.numPlayers)
  return numplayers_;
}
inline void GameDef::set_numplayers(::google::protobuf::uint32 value) {
  
  numplayers_ = value;
  // @@protoc_insertion_point(field_set:Pb.GameDef.numPlayers)
}

// uint32 numRounds = 3;
inline void GameDef::clear_numrounds() {
  numrounds_ = 0u;
}
inline ::google::protobuf::uint32 GameDef::numrounds() const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.numRounds)
  return numrounds_;
}
inline void GameDef::set_numrounds(::google::protobuf::uint32 value) {
  
  numrounds_ = value;
  // @@protoc_insertion_point(field_set:Pb.GameDef.numRounds)
}

// repeated uint32 stack = 4;
inline int GameDef::stack_size() const {
  return stack_.size();
}
inline void GameDef::clear_stack() {
  stack_.Clear();
}
inline ::google::protobuf::uint32 GameDef::stack(int index) const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.stack)
  return stack_.Get(index);
}
inline void GameDef::set_stack(int index, ::google::protobuf::uint32 value) {
  stack_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.GameDef.stack)
}
inline void GameDef::add_stack(::google::protobuf::uint32 value) {
  stack_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.GameDef.stack)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameDef::stack() const {
  // @@protoc_insertion_point(field_list:Pb.GameDef.stack)
  return stack_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameDef::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:Pb.GameDef.stack)
  return &stack_;
}

// repeated uint32 blind = 5;
inline int GameDef::blind_size() const {
  return blind_.size();
}
inline void GameDef::clear_blind() {
  blind_.Clear();
}
inline ::google::protobuf::uint32 GameDef::blind(int index) const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.blind)
  return blind_.Get(index);
}
inline void GameDef::set_blind(int index, ::google::protobuf::uint32 value) {
  blind_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.GameDef.blind)
}
inline void GameDef::add_blind(::google::protobuf::uint32 value) {
  blind_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.GameDef.blind)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameDef::blind() const {
  // @@protoc_insertion_point(field_list:Pb.GameDef.blind)
  return blind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameDef::mutable_blind() {
  // @@protoc_insertion_point(field_mutable_list:Pb.GameDef.blind)
  return &blind_;
}

// repeated uint32 firstPlayer = 6;
inline int GameDef::firstplayer_size() const {
  return firstplayer_.size();
}
inline void GameDef::clear_firstplayer() {
  firstplayer_.Clear();
}
inline ::google::protobuf::uint32 GameDef::firstplayer(int index) const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.firstPlayer)
  return firstplayer_.Get(index);
}
inline void GameDef::set_firstplayer(int index, ::google::protobuf::uint32 value) {
  firstplayer_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.GameDef.firstPlayer)
}
inline void GameDef::add_firstplayer(::google::protobuf::uint32 value) {
  firstplayer_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.GameDef.firstPlayer)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameDef::firstplayer() const {
  // @@protoc_insertion_point(field_list:Pb.GameDef.firstPlayer)
  return firstplayer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameDef::mutable_firstplayer() {
  // @@protoc_insertion_point(field_mutable_list:Pb.GameDef.firstPlayer)
  return &firstplayer_;
}

// uint32 numSuits = 7;
inline void GameDef::clear_numsuits() {
  numsuits_ = 0u;
}
inline ::google::protobuf::uint32 GameDef::numsuits() const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.numSuits)
  return numsuits_;
}
inline void GameDef::set_numsuits(::google::protobuf::uint32 value) {
  
  numsuits_ = value;
  // @@protoc_insertion_point(field_set:Pb.GameDef.numSuits)
}

// uint32 numRanks = 8;
inline void GameDef::clear_numranks() {
  numranks_ = 0u;
}
inline ::google::protobuf::uint32 GameDef::numranks() const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.numRanks)
  return numranks_;
}
inline void GameDef::set_numranks(::google::protobuf::uint32 value) {
  
  numranks_ = value;
  // @@protoc_insertion_point(field_set:Pb.GameDef.numRanks)
}

// uint32 numHoleCards = 9;
inline void GameDef::clear_numholecards() {
  numholecards_ = 0u;
}
inline ::google::protobuf::uint32 GameDef::numholecards() const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.numHoleCards)
  return numholecards_;
}
inline void GameDef::set_numholecards(::google::protobuf::uint32 value) {
  
  numholecards_ = value;
  // @@protoc_insertion_point(field_set:Pb.GameDef.numHoleCards)
}

// repeated uint32 numBoardCards = 10;
inline int GameDef::numboardcards_size() const {
  return numboardcards_.size();
}
inline void GameDef::clear_numboardcards() {
  numboardcards_.Clear();
}
inline ::google::protobuf::uint32 GameDef::numboardcards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.numBoardCards)
  return numboardcards_.Get(index);
}
inline void GameDef::set_numboardcards(int index, ::google::protobuf::uint32 value) {
  numboardcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.GameDef.numBoardCards)
}
inline void GameDef::add_numboardcards(::google::protobuf::uint32 value) {
  numboardcards_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.GameDef.numBoardCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameDef::numboardcards() const {
  // @@protoc_insertion_point(field_list:Pb.GameDef.numBoardCards)
  return numboardcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameDef::mutable_numboardcards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.GameDef.numBoardCards)
  return &numboardcards_;
}

// repeated uint32 raiseSize = 11;
inline int GameDef::raisesize_size() const {
  return raisesize_.size();
}
inline void GameDef::clear_raisesize() {
  raisesize_.Clear();
}
inline ::google::protobuf::uint32 GameDef::raisesize(int index) const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.raiseSize)
  return raisesize_.Get(index);
}
inline void GameDef::set_raisesize(int index, ::google::protobuf::uint32 value) {
  raisesize_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.GameDef.raiseSize)
}
inline void GameDef::add_raisesize(::google::protobuf::uint32 value) {
  raisesize_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.GameDef.raiseSize)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameDef::raisesize() const {
  // @@protoc_insertion_point(field_list:Pb.GameDef.raiseSize)
  return raisesize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameDef::mutable_raisesize() {
  // @@protoc_insertion_point(field_mutable_list:Pb.GameDef.raiseSize)
  return &raisesize_;
}

// repeated uint32 maxRaises = 12;
inline int GameDef::maxraises_size() const {
  return maxraises_.size();
}
inline void GameDef::clear_maxraises() {
  maxraises_.Clear();
}
inline ::google::protobuf::uint32 GameDef::maxraises(int index) const {
  // @@protoc_insertion_point(field_get:Pb.GameDef.maxRaises)
  return maxraises_.Get(index);
}
inline void GameDef::set_maxraises(int index, ::google::protobuf::uint32 value) {
  maxraises_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.GameDef.maxRaises)
}
inline void GameDef::add_maxraises(::google::protobuf::uint32 value) {
  maxraises_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.GameDef.maxRaises)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameDef::maxraises() const {
  // @@protoc_insertion_point(field_list:Pb.GameDef.maxRaises)
  return maxraises_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameDef::mutable_maxraises() {
  // @@protoc_insertion_point(field_mutable_list:Pb.GameDef.maxRaises)
  return &maxraises_;
}

// -------------------------------------------------------------------

// MatchDef

// uint32 match_enable = 1;
inline void MatchDef::clear_match_enable() {
  match_enable_ = 0u;
}
inline ::google::protobuf::uint32 MatchDef::match_enable() const {
  // @@protoc_insertion_point(field_get:Pb.MatchDef.match_enable)
  return match_enable_;
}
inline void MatchDef::set_match_enable(::google::protobuf::uint32 value) {
  
  match_enable_ = value;
  // @@protoc_insertion_point(field_set:Pb.MatchDef.match_enable)
}

// uint32 match_hands = 2;
inline void MatchDef::clear_match_hands() {
  match_hands_ = 0u;
}
inline ::google::protobuf::uint32 MatchDef::match_hands() const {
  // @@protoc_insertion_point(field_get:Pb.MatchDef.match_hands)
  return match_hands_;
}
inline void MatchDef::set_match_hands(::google::protobuf::uint32 value) {
  
  match_hands_ = value;
  // @@protoc_insertion_point(field_set:Pb.MatchDef.match_hands)
}

// -------------------------------------------------------------------

// QueryGameConfig

// uint32 game_type = 1;
inline void QueryGameConfig::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 QueryGameConfig::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.QueryGameConfig.game_type)
  return game_type_;
}
inline void QueryGameConfig::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryGameConfig.game_type)
}

// string source_msg = 2;
inline void QueryGameConfig::clear_source_msg() {
  source_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryGameConfig::source_msg() const {
  // @@protoc_insertion_point(field_get:Pb.QueryGameConfig.source_msg)
  return source_msg_.GetNoArena();
}
inline void QueryGameConfig::set_source_msg(const ::std::string& value) {
  
  source_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.QueryGameConfig.source_msg)
}
#if LANG_CXX11
inline void QueryGameConfig::set_source_msg(::std::string&& value) {
  
  source_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.QueryGameConfig.source_msg)
}
#endif
inline void QueryGameConfig::set_source_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.QueryGameConfig.source_msg)
}
inline void QueryGameConfig::set_source_msg(const char* value, size_t size) {
  
  source_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.QueryGameConfig.source_msg)
}
inline ::std::string* QueryGameConfig::mutable_source_msg() {
  
  // @@protoc_insertion_point(field_mutable:Pb.QueryGameConfig.source_msg)
  return source_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryGameConfig::release_source_msg() {
  // @@protoc_insertion_point(field_release:Pb.QueryGameConfig.source_msg)
  
  return source_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryGameConfig::set_allocated_source_msg(::std::string* source_msg) {
  if (source_msg != NULL) {
    
  } else {
    
  }
  source_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_msg);
  // @@protoc_insertion_point(field_set_allocated:Pb.QueryGameConfig.source_msg)
}

// repeated .Pb.GameDef game_config = 3;
inline int QueryGameConfig::game_config_size() const {
  return game_config_.size();
}
inline void QueryGameConfig::clear_game_config() {
  game_config_.Clear();
}
inline const ::Pb::GameDef& QueryGameConfig::game_config(int index) const {
  // @@protoc_insertion_point(field_get:Pb.QueryGameConfig.game_config)
  return game_config_.Get(index);
}
inline ::Pb::GameDef* QueryGameConfig::mutable_game_config(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.QueryGameConfig.game_config)
  return game_config_.Mutable(index);
}
inline ::Pb::GameDef* QueryGameConfig::add_game_config() {
  // @@protoc_insertion_point(field_add:Pb.QueryGameConfig.game_config)
  return game_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::GameDef >*
QueryGameConfig::mutable_game_config() {
  // @@protoc_insertion_point(field_mutable_list:Pb.QueryGameConfig.game_config)
  return &game_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::GameDef >&
QueryGameConfig::game_config() const {
  // @@protoc_insertion_point(field_list:Pb.QueryGameConfig.game_config)
  return game_config_;
}

// string betting_control = 4;
inline void QueryGameConfig::clear_betting_control() {
  betting_control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryGameConfig::betting_control() const {
  // @@protoc_insertion_point(field_get:Pb.QueryGameConfig.betting_control)
  return betting_control_.GetNoArena();
}
inline void QueryGameConfig::set_betting_control(const ::std::string& value) {
  
  betting_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.QueryGameConfig.betting_control)
}
#if LANG_CXX11
inline void QueryGameConfig::set_betting_control(::std::string&& value) {
  
  betting_control_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.QueryGameConfig.betting_control)
}
#endif
inline void QueryGameConfig::set_betting_control(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  betting_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.QueryGameConfig.betting_control)
}
inline void QueryGameConfig::set_betting_control(const char* value, size_t size) {
  
  betting_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.QueryGameConfig.betting_control)
}
inline ::std::string* QueryGameConfig::mutable_betting_control() {
  
  // @@protoc_insertion_point(field_mutable:Pb.QueryGameConfig.betting_control)
  return betting_control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryGameConfig::release_betting_control() {
  // @@protoc_insertion_point(field_release:Pb.QueryGameConfig.betting_control)
  
  return betting_control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryGameConfig::set_allocated_betting_control(::std::string* betting_control) {
  if (betting_control != NULL) {
    
  } else {
    
  }
  betting_control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), betting_control);
  // @@protoc_insertion_point(field_set_allocated:Pb.QueryGameConfig.betting_control)
}

// .Pb.MatchDef match_config = 5;
inline bool QueryGameConfig::has_match_config() const {
  return this != internal_default_instance() && match_config_ != NULL;
}
inline void QueryGameConfig::clear_match_config() {
  if (GetArenaNoVirtual() == NULL && match_config_ != NULL) {
    delete match_config_;
  }
  match_config_ = NULL;
}
inline const ::Pb::MatchDef& QueryGameConfig::match_config() const {
  const ::Pb::MatchDef* p = match_config_;
  // @@protoc_insertion_point(field_get:Pb.QueryGameConfig.match_config)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::MatchDef*>(
      &::Pb::_MatchDef_default_instance_);
}
inline ::Pb::MatchDef* QueryGameConfig::release_match_config() {
  // @@protoc_insertion_point(field_release:Pb.QueryGameConfig.match_config)
  
  ::Pb::MatchDef* temp = match_config_;
  match_config_ = NULL;
  return temp;
}
inline ::Pb::MatchDef* QueryGameConfig::mutable_match_config() {
  
  if (match_config_ == NULL) {
    match_config_ = new ::Pb::MatchDef;
  }
  // @@protoc_insertion_point(field_mutable:Pb.QueryGameConfig.match_config)
  return match_config_;
}
inline void QueryGameConfig::set_allocated_match_config(::Pb::MatchDef* match_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_config_;
  }
  if (match_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_config, submessage_arena);
    }
    
  } else {
    
  }
  match_config_ = match_config;
  // @@protoc_insertion_point(field_set_allocated:Pb.QueryGameConfig.match_config)
}

// -------------------------------------------------------------------

// ListenDef

// .Pb.ServerID svr_id = 1;
inline bool ListenDef::has_svr_id() const {
  return this != internal_default_instance() && svr_id_ != NULL;
}
inline const ::Pb::ServerID& ListenDef::svr_id() const {
  const ::Pb::ServerID* p = svr_id_;
  // @@protoc_insertion_point(field_get:Pb.ListenDef.svr_id)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::ServerID*>(
      &::Pb::_ServerID_default_instance_);
}
inline ::Pb::ServerID* ListenDef::release_svr_id() {
  // @@protoc_insertion_point(field_release:Pb.ListenDef.svr_id)
  
  ::Pb::ServerID* temp = svr_id_;
  svr_id_ = NULL;
  return temp;
}
inline ::Pb::ServerID* ListenDef::mutable_svr_id() {
  
  if (svr_id_ == NULL) {
    svr_id_ = new ::Pb::ServerID;
  }
  // @@protoc_insertion_point(field_mutable:Pb.ListenDef.svr_id)
  return svr_id_;
}
inline void ListenDef::set_allocated_svr_id(::Pb::ServerID* svr_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(svr_id_);
  }
  if (svr_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      svr_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, svr_id, submessage_arena);
    }
    
  } else {
    
  }
  svr_id_ = svr_id;
  // @@protoc_insertion_point(field_set_allocated:Pb.ListenDef.svr_id)
}

// string addr = 2;
inline void ListenDef::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenDef::addr() const {
  // @@protoc_insertion_point(field_get:Pb.ListenDef.addr)
  return addr_.GetNoArena();
}
inline void ListenDef::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.ListenDef.addr)
}
#if LANG_CXX11
inline void ListenDef::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.ListenDef.addr)
}
#endif
inline void ListenDef::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.ListenDef.addr)
}
inline void ListenDef::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.ListenDef.addr)
}
inline ::std::string* ListenDef::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:Pb.ListenDef.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenDef::release_addr() {
  // @@protoc_insertion_point(field_release:Pb.ListenDef.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenDef::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:Pb.ListenDef.addr)
}

// uint32 port = 3;
inline void ListenDef::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ListenDef::port() const {
  // @@protoc_insertion_point(field_get:Pb.ListenDef.port)
  return port_;
}
inline void ListenDef::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Pb.ListenDef.port)
}

// -------------------------------------------------------------------

// QueryListenServer

// .Pb.ServerID req_server_id = 1;
inline bool QueryListenServer::has_req_server_id() const {
  return this != internal_default_instance() && req_server_id_ != NULL;
}
inline const ::Pb::ServerID& QueryListenServer::req_server_id() const {
  const ::Pb::ServerID* p = req_server_id_;
  // @@protoc_insertion_point(field_get:Pb.QueryListenServer.req_server_id)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::ServerID*>(
      &::Pb::_ServerID_default_instance_);
}
inline ::Pb::ServerID* QueryListenServer::release_req_server_id() {
  // @@protoc_insertion_point(field_release:Pb.QueryListenServer.req_server_id)
  
  ::Pb::ServerID* temp = req_server_id_;
  req_server_id_ = NULL;
  return temp;
}
inline ::Pb::ServerID* QueryListenServer::mutable_req_server_id() {
  
  if (req_server_id_ == NULL) {
    req_server_id_ = new ::Pb::ServerID;
  }
  // @@protoc_insertion_point(field_mutable:Pb.QueryListenServer.req_server_id)
  return req_server_id_;
}
inline void QueryListenServer::set_allocated_req_server_id(::Pb::ServerID* req_server_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(req_server_id_);
  }
  if (req_server_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req_server_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req_server_id, submessage_arena);
    }
    
  } else {
    
  }
  req_server_id_ = req_server_id;
  // @@protoc_insertion_point(field_set_allocated:Pb.QueryListenServer.req_server_id)
}

// repeated .Pb.ListenDef acpc_servers = 2;
inline int QueryListenServer::acpc_servers_size() const {
  return acpc_servers_.size();
}
inline void QueryListenServer::clear_acpc_servers() {
  acpc_servers_.Clear();
}
inline const ::Pb::ListenDef& QueryListenServer::acpc_servers(int index) const {
  // @@protoc_insertion_point(field_get:Pb.QueryListenServer.acpc_servers)
  return acpc_servers_.Get(index);
}
inline ::Pb::ListenDef* QueryListenServer::mutable_acpc_servers(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.QueryListenServer.acpc_servers)
  return acpc_servers_.Mutable(index);
}
inline ::Pb::ListenDef* QueryListenServer::add_acpc_servers() {
  // @@protoc_insertion_point(field_add:Pb.QueryListenServer.acpc_servers)
  return acpc_servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::ListenDef >*
QueryListenServer::mutable_acpc_servers() {
  // @@protoc_insertion_point(field_mutable_list:Pb.QueryListenServer.acpc_servers)
  return &acpc_servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::ListenDef >&
QueryListenServer::acpc_servers() const {
  // @@protoc_insertion_point(field_list:Pb.QueryListenServer.acpc_servers)
  return acpc_servers_;
}

// -------------------------------------------------------------------

// TpaRole

// uint32 role_id = 1;
inline void TpaRole::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 TpaRole::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.TpaRole.role_id)
  return role_id_;
}
inline void TpaRole::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaRole.role_id)
}

// uint64 player_id = 2;
inline void TpaRole::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TpaRole::player_id() const {
  // @@protoc_insertion_point(field_get:Pb.TpaRole.player_id)
  return player_id_;
}
inline void TpaRole::set_player_id(::google::protobuf::uint64 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaRole.player_id)
}

// int32 seat = 3;
inline void TpaRole::clear_seat() {
  seat_ = 0;
}
inline ::google::protobuf::int32 TpaRole::seat() const {
  // @@protoc_insertion_point(field_get:Pb.TpaRole.seat)
  return seat_;
}
inline void TpaRole::set_seat(::google::protobuf::int32 value) {
  
  seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaRole.seat)
}

// -------------------------------------------------------------------

// TpaUserLogin

// uint32 tpa_room_id = 1;
inline void TpaUserLogin::clear_tpa_room_id() {
  tpa_room_id_ = 0u;
}
inline ::google::protobuf::uint32 TpaUserLogin::tpa_room_id() const {
  // @@protoc_insertion_point(field_get:Pb.TpaUserLogin.tpa_room_id)
  return tpa_room_id_;
}
inline void TpaUserLogin::set_tpa_room_id(::google::protobuf::uint32 value) {
  
  tpa_room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaUserLogin.tpa_room_id)
}

// uint32 game_type = 2;
inline void TpaUserLogin::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 TpaUserLogin::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.TpaUserLogin.game_type)
  return game_type_;
}
inline void TpaUserLogin::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaUserLogin.game_type)
}

// repeated .Pb.TpaRole tpa_role_list = 3;
inline int TpaUserLogin::tpa_role_list_size() const {
  return tpa_role_list_.size();
}
inline void TpaUserLogin::clear_tpa_role_list() {
  tpa_role_list_.Clear();
}
inline const ::Pb::TpaRole& TpaUserLogin::tpa_role_list(int index) const {
  // @@protoc_insertion_point(field_get:Pb.TpaUserLogin.tpa_role_list)
  return tpa_role_list_.Get(index);
}
inline ::Pb::TpaRole* TpaUserLogin::mutable_tpa_role_list(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.TpaUserLogin.tpa_role_list)
  return tpa_role_list_.Mutable(index);
}
inline ::Pb::TpaRole* TpaUserLogin::add_tpa_role_list() {
  // @@protoc_insertion_point(field_add:Pb.TpaUserLogin.tpa_role_list)
  return tpa_role_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::TpaRole >*
TpaUserLogin::mutable_tpa_role_list() {
  // @@protoc_insertion_point(field_mutable_list:Pb.TpaUserLogin.tpa_role_list)
  return &tpa_role_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::TpaRole >&
TpaUserLogin::tpa_role_list() const {
  // @@protoc_insertion_point(field_list:Pb.TpaUserLogin.tpa_role_list)
  return tpa_role_list_;
}

// uint32 acpc_server_id = 4;
inline void TpaUserLogin::clear_acpc_server_id() {
  acpc_server_id_ = 0u;
}
inline ::google::protobuf::uint32 TpaUserLogin::acpc_server_id() const {
  // @@protoc_insertion_point(field_get:Pb.TpaUserLogin.acpc_server_id)
  return acpc_server_id_;
}
inline void TpaUserLogin::set_acpc_server_id(::google::protobuf::uint32 value) {
  
  acpc_server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaUserLogin.acpc_server_id)
}

// string acpc_server_ip = 5;
inline void TpaUserLogin::clear_acpc_server_ip() {
  acpc_server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TpaUserLogin::acpc_server_ip() const {
  // @@protoc_insertion_point(field_get:Pb.TpaUserLogin.acpc_server_ip)
  return acpc_server_ip_.GetNoArena();
}
inline void TpaUserLogin::set_acpc_server_ip(const ::std::string& value) {
  
  acpc_server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.TpaUserLogin.acpc_server_ip)
}
#if LANG_CXX11
inline void TpaUserLogin::set_acpc_server_ip(::std::string&& value) {
  
  acpc_server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.TpaUserLogin.acpc_server_ip)
}
#endif
inline void TpaUserLogin::set_acpc_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  acpc_server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.TpaUserLogin.acpc_server_ip)
}
inline void TpaUserLogin::set_acpc_server_ip(const char* value, size_t size) {
  
  acpc_server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.TpaUserLogin.acpc_server_ip)
}
inline ::std::string* TpaUserLogin::mutable_acpc_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:Pb.TpaUserLogin.acpc_server_ip)
  return acpc_server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TpaUserLogin::release_acpc_server_ip() {
  // @@protoc_insertion_point(field_release:Pb.TpaUserLogin.acpc_server_ip)
  
  return acpc_server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TpaUserLogin::set_allocated_acpc_server_ip(::std::string* acpc_server_ip) {
  if (acpc_server_ip != NULL) {
    
  } else {
    
  }
  acpc_server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acpc_server_ip);
  // @@protoc_insertion_point(field_set_allocated:Pb.TpaUserLogin.acpc_server_ip)
}

// uint32 acpc_server_port = 6;
inline void TpaUserLogin::clear_acpc_server_port() {
  acpc_server_port_ = 0u;
}
inline ::google::protobuf::uint32 TpaUserLogin::acpc_server_port() const {
  // @@protoc_insertion_point(field_get:Pb.TpaUserLogin.acpc_server_port)
  return acpc_server_port_;
}
inline void TpaUserLogin::set_acpc_server_port(::google::protobuf::uint32 value) {
  
  acpc_server_port_ = value;
  // @@protoc_insertion_point(field_set:Pb.TpaUserLogin.acpc_server_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comm_2eproto__INCLUDED
