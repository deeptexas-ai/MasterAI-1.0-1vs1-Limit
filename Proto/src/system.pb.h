// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef PROTOBUF_system_2eproto__INCLUDED
#define PROTOBUF_system_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_system_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServerIDImpl();
void InitDefaultsServerID();
void InitDefaultsAcpcActionImpl();
void InitDefaultsAcpcAction();
void InitDefaultsAcpcRoundImpl();
void InitDefaultsAcpcRound();
void InitDefaultsAcpcCardImpl();
void InitDefaultsAcpcCard();
void InitDefaultsHoleCardsImpl();
void InitDefaultsHoleCards();
void InitDefaultsDRoleScoreImpl();
void InitDefaultsDRoleScore();
void InitDefaultsAcpcStateImpl();
void InitDefaultsAcpcState();
void InitDefaultsRoleInfoImpl();
void InitDefaultsRoleInfo();
void InitDefaultsRoomRoleImpl();
void InitDefaultsRoomRole();
void InitDefaultsRoomRoleListImpl();
void InitDefaultsRoomRoleList();
void InitDefaultsRoleScoreImpl();
void InitDefaultsRoleScore();
void InitDefaultsRoomAttrImpl();
void InitDefaultsRoomAttr();
void InitDefaultsRoomCanJoinImpl();
void InitDefaultsRoomCanJoin();
inline void InitDefaults() {
  InitDefaultsServerID();
  InitDefaultsAcpcAction();
  InitDefaultsAcpcRound();
  InitDefaultsAcpcCard();
  InitDefaultsHoleCards();
  InitDefaultsDRoleScore();
  InitDefaultsAcpcState();
  InitDefaultsRoleInfo();
  InitDefaultsRoomRole();
  InitDefaultsRoomRoleList();
  InitDefaultsRoleScore();
  InitDefaultsRoomAttr();
  InitDefaultsRoomCanJoin();
}
}  // namespace protobuf_system_2eproto
namespace Pb {
class AcpcAction;
class AcpcActionDefaultTypeInternal;
extern AcpcActionDefaultTypeInternal _AcpcAction_default_instance_;
class AcpcCard;
class AcpcCardDefaultTypeInternal;
extern AcpcCardDefaultTypeInternal _AcpcCard_default_instance_;
class AcpcRound;
class AcpcRoundDefaultTypeInternal;
extern AcpcRoundDefaultTypeInternal _AcpcRound_default_instance_;
class AcpcState;
class AcpcStateDefaultTypeInternal;
extern AcpcStateDefaultTypeInternal _AcpcState_default_instance_;
class DRoleScore;
class DRoleScoreDefaultTypeInternal;
extern DRoleScoreDefaultTypeInternal _DRoleScore_default_instance_;
class HoleCards;
class HoleCardsDefaultTypeInternal;
extern HoleCardsDefaultTypeInternal _HoleCards_default_instance_;
class RoleInfo;
class RoleInfoDefaultTypeInternal;
extern RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
class RoleScore;
class RoleScoreDefaultTypeInternal;
extern RoleScoreDefaultTypeInternal _RoleScore_default_instance_;
class RoomAttr;
class RoomAttrDefaultTypeInternal;
extern RoomAttrDefaultTypeInternal _RoomAttr_default_instance_;
class RoomCanJoin;
class RoomCanJoinDefaultTypeInternal;
extern RoomCanJoinDefaultTypeInternal _RoomCanJoin_default_instance_;
class RoomRole;
class RoomRoleDefaultTypeInternal;
extern RoomRoleDefaultTypeInternal _RoomRole_default_instance_;
class RoomRoleList;
class RoomRoleListDefaultTypeInternal;
extern RoomRoleListDefaultTypeInternal _RoomRoleList_default_instance_;
class ServerID;
class ServerIDDefaultTypeInternal;
extern ServerIDDefaultTypeInternal _ServerID_default_instance_;
}  // namespace Pb
namespace Pb {

enum DP_CMD {
  CMD_NOT_DEFINE = 0,
  CMD_COMM_NOT_BINARY = 90001,
  CMD_COMM_SVR_UNREGISTER = 10000,
  CMD_BALANCE_SVR_REGISTER = 10001,
  CMD_BALANCE_SVR_KEEP_ALIVE = 10003,
  CMD_BALANCE_ACPC_REPORT = 10005,
  CMD_BALANCE_ALLOC_BATTLE = 10011,
  CMD_BALANCE_QUERY_LISTEN_SERVER = 10012,
  CMD_BALANCE_ALLOC_ACPC_SERVER = 10013,
  CMD_BALANCE_TPA_ALLOC_ACPC_SERVER = 10103,
  CMD_UM_SVR_REGISTER = 20001,
  CMD_UM_SVR_KEEP_ALIVE = 20003,
  CMD_UM_LOGIN = 20011,
  CMD_UM_LOGOUT = 20012,
  CMD_UM_RECHARGE = 20013,
  CMD_UM_ONLINE_PLAYERS = 20014,
  CMD_UM_QUERY_USER_INFO = 20015,
  CMD_UM_USER_CONN_EXIT = 20016,
  CMD_UM_USER_CONN_FORCE_EXIT = 20017,
  CMD_UM_USER_RESET_CURRENCY = 20018,
  CMD_UM_QUERY_USER_CONFIG = 20019,
  CMD_UM_RESET_USER_FOR_TEST = 20030,
  CMD_UM_QUERY_USER_MATCH_INFO = 20031,
  CMD_UM_TPA_LOGIN = 20101,
  CMD_ACPC_SVR_REGISTER = 30001,
  CMD_ACPC_SVR_KEEP_ALIVE = 30003,
  CMD_ACPC_QUERY_CONFIG = 30004,
  CMD_ACPC_BRAIN_REPORT = 30005,
  CMD_ACPC_ROOM_CREATE = 30011,
  CMD_ACPC_ROOM_ENTER = 30012,
  CMD_ACPC_ROOM_BROAD_ENTER = 30013,
  CMD_ACPC_ROOM_LEAVE = 30014,
  CMD_ACPC_ROOM_BROAD_LEAVE = 30015,
  CMD_ACPC_ROOM_FORCE_LEAVE = 30016,
  CMD_ACPC_ROOM_BROAD_FORCE_LEAVE = 30017,
  CMD_ACPC_ROOM_QUERY_CAN_JOIN = 30018,
  CMD_ACPC_ROOM_AUDIENCE_ENTER = 30019,
  CMD_ACPC_ROOM_BROAD_AUDIENCE_ENTER = 30020,
  CMD_ACPC_ROOM_AUDIENCE_LEAVE = 30021,
  CMD_ACPC_ROOM_BROAD_AUDIENCE_LEAVE = 30022,
  CMD_ACPC_ROOM_CHECK_TIMEOUT = 30023,
  CMD_ACPC_MATCH_READY = 30031,
  CMD_ACPC_MATCH_BROAD_READY = 30032,
  CMD_ACPC_MATCH_BROAD_START = 30033,
  CMD_ACPC_MATCH_ACTION = 30034,
  CMD_ACPC_MATCH_STATE = 30035,
  CMD_ACPC_MATCH_SCORE = 30036,
  CMD_ACPC_QUERY_MATCH_STATE = 30037,
  CMD_ACPC_NOTIFY_TPA_MATCH_STATE = 30038,
  CMD_ACPC_DEL_ALL_ROOM_FOR_TEST = 30041,
  CMD_ACPC_START_ROBOT_FOR_TEST = 30042,
  CMD_ACPC_BROAD_MATCH_ACTION = 30043,
  CMD_ACPC_SET_DEALER_MODE = 30050,
  CMD_ACPC_TPA_ENTER_ROOM = 31011,
  CMD_ACPC_TPA_AI_ENTER_ROOM = 31012,
  CMD_ACPC_TPA_LEAVE_ROOM = 31014,
  CMD_ACPC_TPA_DESTROY_ROOM = 31015,
  CMD_ACPC_TPA_SET_PLAYER_STATE = 31017,
  CMD_ACPC_TPA_SET_DEALER = 31018,
  CMD_ACPC_TPA_QUERY_MATCH_CARDS = 31021,
  CMD_ACPC_TPA_QUERY_ALLOW_ACTION = 31022,
  CMD_ACPC_TPA_QUERY_MATCH_STATE = 31023,
  CMD_ACPC_TPA_QUERY_AI_ACTION = 31024,
  CMD_ACPC_TPA_REPORT_ACTION_TOKEN = 31025,
  CMD_ACPC_TPA_REPORT_PLAYER_ACTION = 31026,
  CMD_BRAIN_SVR_REGISTER = 40001,
  CMD_BRAIN_SVR_KEEP_ALIVE = 40003,
  CMD_BRAIN_QUERY_CONFIG = 40004,
  CMD_BRAIN_ROBOT_ALIVE = 40010,
  CMD_BRAIN_ROBOT_LOGIN = 40011,
  CMD_BRAIN_ROBOT_ACTION = 40012,
  CMD_BRAIN_ROBOT_EXIT = 40013,
  CMD_BRAIN_REQUEST_ROTOT_JOIN_ROOM = 40014,
  CMD_BRAIN_TO_ROBOT_CLIENT = 40015,
  CMD_BRAIN_CHECK_ROBOT_VALID = 40016,
  CMD_BRAIN_CHECK_ROBOT_TIMEOUT = 40017,
  CMD_BRAIN_REQUEST_CREATE_ROBOT = 40021,
  CMD_BRAIN_REQUEST_DESTROY_ROBOT = 40022,
  CMD_BRAIN_ON_LINE_ROBOT = 40023,
  CMD_DEALER_REGISTER = 50001,
  CMD_DEALER_KEEP_ALIVE = 50003,
  CMD_DEALER_REQUEST_CARDS = 50005,
  CMD_DEALER_NOTIFY_MATCH_STATE = 50006,
  CMD_BLOCK_CHAIN_REGISTER = 51001,
  CMD_BLOCK_CHAIN_KEEP_ALIVE = 51003,
  CMD_BLOCK_CHAIN_REQUEST_CARDS = 51004,
  DP_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DP_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DP_CMD_IsValid(int value);
const DP_CMD DP_CMD_MIN = CMD_NOT_DEFINE;
const DP_CMD DP_CMD_MAX = CMD_COMM_NOT_BINARY;
const int DP_CMD_ARRAYSIZE = DP_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* DP_CMD_descriptor();
inline const ::std::string& DP_CMD_Name(DP_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    DP_CMD_descriptor(), value);
}
inline bool DP_CMD_Parse(
    const ::std::string& name, DP_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DP_CMD>(
    DP_CMD_descriptor(), name, value);
}
enum DP_ERRCODE {
  OK = 0,
  ERR_COMM_SYSTEM_BUSY = 221001,
  ERR_COMM_OTHER = 221002,
  ERR_COMM_LENGTH = 221003,
  ERR_COMM_INVALID_CMD = 221004,
  ERR_COMM_PROTO_PARSE = 221005,
  ERR_COMM_INTERNAL = 221006,
  ERR_COMM_NO_TASK_QUEUE = 221007,
  ERR_COMM_REDIS = 221008,
  ERR_COMM_INVALID_PARAM = 221009,
  ERR_COMM_NO_FREE_NODE = 221010,
  ERR_COMM_MEMORY = 221011,
  ERR_COMM_REDIS_LOCK = 221012,
  ERR_COMM_DB = 221013,
  ERR_BALANCE_ACPC_BUSY = 222001,
  ERR_BALANCE_BRAIN_BUSY = 222002,
  ERR_UM_USER_NOT_EXIST = 223001,
  ERR_UM_PASSWD = 223002,
  ERR_UM_RESET_TIMES_LIMIT = 223003,
  ERR_UM_ALREADY_RESET = 223004,
  ERR_ACPC_NOT_ROBOT = 224001,
  ERR_ACPC_INVALID_ACTION = 224002,
  ERR_ACPC_NO_PLAYER = 224003,
  ERR_ACPC_NO_ROOM = 224004,
  ERR_ACPC_NO_ROOM_QUEUE = 224005,
  ERR_ACPC_NO_PLAYER_QUEUE = 224006,
  ERR_ACPC_ALLOC_ROOM = 224007,
  ERR_ACPC_NOT_IN_ROOM = 224008,
  ERR_ACPC_PLAYER_ROOM_SEAT = 224009,
  ERR_ACPC_SET_ROLE_READY = 224010,
  ERR_ACPC_TOO_MANY_PLAYER = 224011,
  ERR_ACPC_ROOM_PLAYER_WRONG = 224012,
  ERR_ACPC_MATCH_RUNNING = 224021,
  ERR_ACPC_MATCH_NOT_RUNNING = 224022,
  ERR_ACPC_MATCH_FINISHED = 224023,
  ERR_ACPC_GAME_TYPE = 224024,
  ERR_ACPC_NOT_PLAYER_TURN = 224025,
  ERR_ACPC_MATCH_RUN = 224026,
  ERR_ACPC_ACTION = 224027,
  ERR_ACPC_GET_CONFIG = 224031,
  ERR_ACPC_LEAVE_ROOM = 224032,
  ERR_ACPC_ROOM_CONFLICT = 224033,
  ERR_ACPC_MATCH_HANDS_LIMIT = 224034,
  ERR_ACPC_SELECT_BRAIN = 224035,
  ERR_ACPC_SET_DEALER_MODE = 224036,
  ERR_ACPC_DEALER_DEAL_CARDS = 224037,
  ERR_BRAIN_ALLOC_ROBOT_ID = 225001,
  ERR_BRAIN_WAIT_ROBOT_JOIN = 225002,
  ERR_BRAIN_CACHE_ROBOT = 225003,
  ERR_BRAIN_BIND_ROBOT = 225004,
  ERR_BRAIN_TOO_MANY_WAIT_PLAYER = 225005,
  ERR_BRAIN_CREATE_ROBOT = 225006,
  ERR_BRAIN_SELECT_BRAINBOT = 225007,
  ERR_BRAIN_GET_PLAYER = 225011,
  ERR_BRAIN_GET_ROBOT_CLIENT = 225012,
  ERR_BRAIN_ACPC_TRANSFORM = 225013,
  ERR_BRAIN_GET_CONFIG = 225021,
  DP_ERRCODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DP_ERRCODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DP_ERRCODE_IsValid(int value);
const DP_ERRCODE DP_ERRCODE_MIN = OK;
const DP_ERRCODE DP_ERRCODE_MAX = ERR_BRAIN_GET_CONFIG;
const int DP_ERRCODE_ARRAYSIZE = DP_ERRCODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DP_ERRCODE_descriptor();
inline const ::std::string& DP_ERRCODE_Name(DP_ERRCODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DP_ERRCODE_descriptor(), value);
}
inline bool DP_ERRCODE_Parse(
    const ::std::string& name, DP_ERRCODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DP_ERRCODE>(
    DP_ERRCODE_descriptor(), name, value);
}
enum SERVER_TYPE {
  SERVER_TYPE_UNKNOW = 0,
  SERVER_TYPE_BALANCE = 1,
  SERVER_TYPE_UM = 2,
  SERVER_TYPE_ACPC = 3,
  SERVER_TYPE_BRAIN = 4,
  SERVER_TYPE_BLOCKCHAIN = 5,
  SERVER_TYPE_API = 6,
  SERVER_TYPE_BRAINBOT = 7,
  SERVER_TYPE_DEALER = 8,
  SERVER_TYPE_TPA = 9,
  SERVER_TYPE_CFR = 10,
  SERVER_TYPE_ALGAPI = 11,
  SERVER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_TYPE_IsValid(int value);
const SERVER_TYPE SERVER_TYPE_MIN = SERVER_TYPE_UNKNOW;
const SERVER_TYPE SERVER_TYPE_MAX = SERVER_TYPE_ALGAPI;
const int SERVER_TYPE_ARRAYSIZE = SERVER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_TYPE_descriptor();
inline const ::std::string& SERVER_TYPE_Name(SERVER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_TYPE_descriptor(), value);
}
inline bool SERVER_TYPE_Parse(
    const ::std::string& name, SERVER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_TYPE>(
    SERVER_TYPE_descriptor(), name, value);
}
// ===================================================================

class ServerID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.ServerID) */ {
 public:
  ServerID();
  virtual ~ServerID();

  ServerID(const ServerID& from);

  inline ServerID& operator=(const ServerID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerID(ServerID&& from) noexcept
    : ServerID() {
    *this = ::std::move(from);
  }

  inline ServerID& operator=(ServerID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerID* internal_default_instance() {
    return reinterpret_cast<const ServerID*>(
               &_ServerID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerID* other);
  friend void swap(ServerID& a, ServerID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerID* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerID& from);
  void MergeFrom(const ServerID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 reg_id = 1;
  void clear_reg_id();
  static const int kRegIdFieldNumber = 1;
  ::google::protobuf::uint32 reg_id() const;
  void set_reg_id(::google::protobuf::uint32 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 inst_id = 3;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 3;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.ServerID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 reg_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 inst_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsServerIDImpl();
};
// -------------------------------------------------------------------

class AcpcAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcAction) */ {
 public:
  AcpcAction();
  virtual ~AcpcAction();

  AcpcAction(const AcpcAction& from);

  inline AcpcAction& operator=(const AcpcAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcAction(AcpcAction&& from) noexcept
    : AcpcAction() {
    *this = ::std::move(from);
  }

  inline AcpcAction& operator=(AcpcAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcAction* internal_default_instance() {
    return reinterpret_cast<const AcpcAction*>(
               &_AcpcAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AcpcAction* other);
  friend void swap(AcpcAction& a, AcpcAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcAction* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcAction& from);
  void MergeFrom(const AcpcAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 position = 1;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // int32 action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // int32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 size_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsAcpcActionImpl();
};
// -------------------------------------------------------------------

class AcpcRound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcRound) */ {
 public:
  AcpcRound();
  virtual ~AcpcRound();

  AcpcRound(const AcpcRound& from);

  inline AcpcRound& operator=(const AcpcRound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcRound(AcpcRound&& from) noexcept
    : AcpcRound() {
    *this = ::std::move(from);
  }

  inline AcpcRound& operator=(AcpcRound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcRound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcRound* internal_default_instance() {
    return reinterpret_cast<const AcpcRound*>(
               &_AcpcRound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AcpcRound* other);
  friend void swap(AcpcRound& a, AcpcRound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcRound* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcRound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcRound& from);
  void MergeFrom(const AcpcRound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcRound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.AcpcAction actions = 1;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 1;
  const ::Pb::AcpcAction& actions(int index) const;
  ::Pb::AcpcAction* mutable_actions(int index);
  ::Pb::AcpcAction* add_actions();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcAction >*
      mutable_actions();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcAction >&
      actions() const;

  // @@protoc_insertion_point(class_scope:Pb.AcpcRound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcAction > actions_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsAcpcRoundImpl();
};
// -------------------------------------------------------------------

class AcpcCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcCard) */ {
 public:
  AcpcCard();
  virtual ~AcpcCard();

  AcpcCard(const AcpcCard& from);

  inline AcpcCard& operator=(const AcpcCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcCard(AcpcCard&& from) noexcept
    : AcpcCard() {
    *this = ::std::move(from);
  }

  inline AcpcCard& operator=(AcpcCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcCard* internal_default_instance() {
    return reinterpret_cast<const AcpcCard*>(
               &_AcpcCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AcpcCard* other);
  friend void swap(AcpcCard& a, AcpcCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcCard* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcCard& from);
  void MergeFrom(const AcpcCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rank = 1;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // int32 suit = 2;
  void clear_suit();
  static const int kSuitFieldNumber = 2;
  ::google::protobuf::int32 suit() const;
  void set_suit(::google::protobuf::int32 value);

  // int32 highlight = 3;
  void clear_highlight();
  static const int kHighlightFieldNumber = 3;
  ::google::protobuf::int32 highlight() const;
  void set_highlight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 suit_;
  ::google::protobuf::int32 highlight_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsAcpcCardImpl();
};
// -------------------------------------------------------------------

class HoleCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.HoleCards) */ {
 public:
  HoleCards();
  virtual ~HoleCards();

  HoleCards(const HoleCards& from);

  inline HoleCards& operator=(const HoleCards& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HoleCards(HoleCards&& from) noexcept
    : HoleCards() {
    *this = ::std::move(from);
  }

  inline HoleCards& operator=(HoleCards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HoleCards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HoleCards* internal_default_instance() {
    return reinterpret_cast<const HoleCards*>(
               &_HoleCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HoleCards* other);
  friend void swap(HoleCards& a, HoleCards& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HoleCards* New() const PROTOBUF_FINAL { return New(NULL); }

  HoleCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HoleCards& from);
  void MergeFrom(const HoleCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HoleCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.AcpcCard hole_cards = 1;
  int hole_cards_size() const;
  void clear_hole_cards();
  static const int kHoleCardsFieldNumber = 1;
  const ::Pb::AcpcCard& hole_cards(int index) const;
  ::Pb::AcpcCard* mutable_hole_cards(int index);
  ::Pb::AcpcCard* add_hole_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_hole_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      hole_cards() const;

  // @@protoc_insertion_point(class_scope:Pb.HoleCards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > hole_cards_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsHoleCardsImpl();
};
// -------------------------------------------------------------------

class DRoleScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.DRoleScore) */ {
 public:
  DRoleScore();
  virtual ~DRoleScore();

  DRoleScore(const DRoleScore& from);

  inline DRoleScore& operator=(const DRoleScore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DRoleScore(DRoleScore&& from) noexcept
    : DRoleScore() {
    *this = ::std::move(from);
  }

  inline DRoleScore& operator=(DRoleScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DRoleScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DRoleScore* internal_default_instance() {
    return reinterpret_cast<const DRoleScore*>(
               &_DRoleScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DRoleScore* other);
  friend void swap(DRoleScore& a, DRoleScore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DRoleScore* New() const PROTOBUF_FINAL { return New(NULL); }

  DRoleScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DRoleScore& from);
  void MergeFrom(const DRoleScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DRoleScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_seat = 1;
  void clear_role_seat();
  static const int kRoleSeatFieldNumber = 1;
  ::google::protobuf::uint32 role_seat() const;
  void set_role_seat(::google::protobuf::uint32 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // int32 score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.DRoleScore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_seat_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::int32 score_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsDRoleScoreImpl();
};
// -------------------------------------------------------------------

class AcpcState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcState) */ {
 public:
  AcpcState();
  virtual ~AcpcState();

  AcpcState(const AcpcState& from);

  inline AcpcState& operator=(const AcpcState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcState(AcpcState&& from) noexcept
    : AcpcState() {
    *this = ::std::move(from);
  }

  inline AcpcState& operator=(AcpcState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcState* internal_default_instance() {
    return reinterpret_cast<const AcpcState*>(
               &_AcpcState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AcpcState* other);
  friend void swap(AcpcState& a, AcpcState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcState* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcState& from);
  void MergeFrom(const AcpcState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 spent = 4;
  int spent_size() const;
  void clear_spent();
  static const int kSpentFieldNumber = 4;
  ::google::protobuf::int32 spent(int index) const;
  void set_spent(int index, ::google::protobuf::int32 value);
  void add_spent(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spent() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spent();

  // repeated .Pb.AcpcRound round_actions = 5;
  int round_actions_size() const;
  void clear_round_actions();
  static const int kRoundActionsFieldNumber = 5;
  const ::Pb::AcpcRound& round_actions(int index) const;
  ::Pb::AcpcRound* mutable_round_actions(int index);
  ::Pb::AcpcRound* add_round_actions();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >*
      mutable_round_actions();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >&
      round_actions() const;

  // repeated int32 fold_players = 8;
  int fold_players_size() const;
  void clear_fold_players();
  static const int kFoldPlayersFieldNumber = 8;
  ::google::protobuf::int32 fold_players(int index) const;
  void set_fold_players(int index, ::google::protobuf::int32 value);
  void add_fold_players(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fold_players() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fold_players();

  // repeated .Pb.AcpcCard board_cards = 9;
  int board_cards_size() const;
  void clear_board_cards();
  static const int kBoardCardsFieldNumber = 9;
  const ::Pb::AcpcCard& board_cards(int index) const;
  ::Pb::AcpcCard* mutable_board_cards(int index);
  ::Pb::AcpcCard* add_board_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_board_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      board_cards() const;

  // repeated .Pb.AcpcCard hole_cards = 10;
  int hole_cards_size() const;
  void clear_hole_cards();
  static const int kHoleCardsFieldNumber = 10;
  const ::Pb::AcpcCard& hole_cards(int index) const;
  ::Pb::AcpcCard* mutable_hole_cards(int index);
  ::Pb::AcpcCard* add_hole_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_hole_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      hole_cards() const;

  // repeated .Pb.HoleCards player_hole_cards = 12;
  int player_hole_cards_size() const;
  void clear_player_hole_cards();
  static const int kPlayerHoleCardsFieldNumber = 12;
  const ::Pb::HoleCards& player_hole_cards(int index) const;
  ::Pb::HoleCards* mutable_player_hole_cards(int index);
  ::Pb::HoleCards* add_player_hole_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::HoleCards >*
      mutable_player_hole_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::HoleCards >&
      player_hole_cards() const;

  // repeated int32 round_spent = 13;
  int round_spent_size() const;
  void clear_round_spent();
  static const int kRoundSpentFieldNumber = 13;
  ::google::protobuf::int32 round_spent(int index) const;
  void set_round_spent(int index, ::google::protobuf::int32 value);
  void add_round_spent(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_spent() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_spent();

  // repeated string card_type = 14;
  int card_type_size() const;
  void clear_card_type();
  static const int kCardTypeFieldNumber = 14;
  const ::std::string& card_type(int index) const;
  ::std::string* mutable_card_type(int index);
  void set_card_type(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_card_type(int index, ::std::string&& value);
  #endif
  void set_card_type(int index, const char* value);
  void set_card_type(int index, const char* value, size_t size);
  ::std::string* add_card_type();
  void add_card_type(const ::std::string& value);
  #if LANG_CXX11
  void add_card_type(::std::string&& value);
  #endif
  void add_card_type(const char* value);
  void add_card_type(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& card_type() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_card_type();

  // repeated int32 score = 15;
  int score_size() const;
  void clear_score();
  static const int kScoreFieldNumber = 15;
  ::google::protobuf::int32 score(int index) const;
  void set_score(int index, ::google::protobuf::int32 value);
  void add_score(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // repeated .Pb.DRoleScore role_score = 18;
  int role_score_size() const;
  void clear_role_score();
  static const int kRoleScoreFieldNumber = 18;
  const ::Pb::DRoleScore& role_score(int index) const;
  ::Pb::DRoleScore* mutable_role_score(int index);
  ::Pb::DRoleScore* add_role_score();
  ::google::protobuf::RepeatedPtrField< ::Pb::DRoleScore >*
      mutable_role_score();
  const ::google::protobuf::RepeatedPtrField< ::Pb::DRoleScore >&
      role_score() const;

  // int32 hand_id = 1;
  void clear_hand_id();
  static const int kHandIdFieldNumber = 1;
  ::google::protobuf::int32 hand_id() const;
  void set_hand_id(::google::protobuf::int32 value);

  // int32 max_spent = 2;
  void clear_max_spent();
  static const int kMaxSpentFieldNumber = 2;
  ::google::protobuf::int32 max_spent() const;
  void set_max_spent(::google::protobuf::int32 value);

  // int32 min_nolimit_raise_to = 3;
  void clear_min_nolimit_raise_to();
  static const int kMinNolimitRaiseToFieldNumber = 3;
  ::google::protobuf::int32 min_nolimit_raise_to() const;
  void set_min_nolimit_raise_to(::google::protobuf::int32 value);

  // int32 round = 6;
  void clear_round();
  static const int kRoundFieldNumber = 6;
  ::google::protobuf::int32 round() const;
  void set_round(::google::protobuf::int32 value);

  // int32 finished = 7;
  void clear_finished();
  static const int kFinishedFieldNumber = 7;
  ::google::protobuf::int32 finished() const;
  void set_finished(::google::protobuf::int32 value);

  // uint32 cur_player_pos = 11;
  void clear_cur_player_pos();
  static const int kCurPlayerPosFieldNumber = 11;
  ::google::protobuf::uint32 cur_player_pos() const;
  void set_cur_player_pos(::google::protobuf::uint32 value);

  // uint32 dealer_role_id = 16;
  void clear_dealer_role_id();
  static const int kDealerRoleIdFieldNumber = 16;
  ::google::protobuf::uint32 dealer_role_id() const;
  void set_dealer_role_id(::google::protobuf::uint32 value);

  // uint32 self_role_pos = 17;
  void clear_self_role_pos();
  static const int kSelfRolePosFieldNumber = 17;
  ::google::protobuf::uint32 self_role_pos() const;
  void set_self_role_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spent_;
  mutable int _spent_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound > round_actions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fold_players_;
  mutable int _fold_players_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > board_cards_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > hole_cards_;
  ::google::protobuf::RepeatedPtrField< ::Pb::HoleCards > player_hole_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_spent_;
  mutable int _round_spent_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> card_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  mutable int _score_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Pb::DRoleScore > role_score_;
  ::google::protobuf::int32 hand_id_;
  ::google::protobuf::int32 max_spent_;
  ::google::protobuf::int32 min_nolimit_raise_to_;
  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 finished_;
  ::google::protobuf::uint32 cur_player_pos_;
  ::google::protobuf::uint32 dealer_role_id_;
  ::google::protobuf::uint32 self_role_pos_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsAcpcStateImpl();
};
// -------------------------------------------------------------------

class RoleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoleInfo) */ {
 public:
  RoleInfo();
  virtual ~RoleInfo();

  RoleInfo(const RoleInfo& from);

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleInfo(RoleInfo&& from) noexcept
    : RoleInfo() {
    *this = ::std::move(from);
  }

  inline RoleInfo& operator=(RoleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleInfo* internal_default_instance() {
    return reinterpret_cast<const RoleInfo*>(
               &_RoleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RoleInfo* other);
  friend void swap(RoleInfo& a, RoleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleInfo& from);
  void MergeFrom(const RoleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role_name = 2;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string role_img = 4;
  void clear_role_img();
  static const int kRoleImgFieldNumber = 4;
  const ::std::string& role_img() const;
  void set_role_img(const ::std::string& value);
  #if LANG_CXX11
  void set_role_img(::std::string&& value);
  #endif
  void set_role_img(const char* value);
  void set_role_img(const char* value, size_t size);
  ::std::string* mutable_role_img();
  ::std::string* release_role_img();
  void set_allocated_role_img(::std::string* role_img);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 role_type = 3;
  void clear_role_type();
  static const int kRoleTypeFieldNumber = 3;
  ::google::protobuf::uint32 role_type() const;
  void set_role_type(::google::protobuf::uint32 value);

  // uint32 role_seat = 5;
  void clear_role_seat();
  static const int kRoleSeatFieldNumber = 5;
  ::google::protobuf::uint32 role_seat() const;
  void set_role_seat(::google::protobuf::uint32 value);

  // uint32 is_ready = 6;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 6;
  ::google::protobuf::uint32 is_ready() const;
  void set_is_ready(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr role_img_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 role_type_;
  ::google::protobuf::uint32 role_seat_;
  ::google::protobuf::uint32 is_ready_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsRoleInfoImpl();
};
// -------------------------------------------------------------------

class RoomRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoomRole) */ {
 public:
  RoomRole();
  virtual ~RoomRole();

  RoomRole(const RoomRole& from);

  inline RoomRole& operator=(const RoomRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomRole(RoomRole&& from) noexcept
    : RoomRole() {
    *this = ::std::move(from);
  }

  inline RoomRole& operator=(RoomRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomRole* internal_default_instance() {
    return reinterpret_cast<const RoomRole*>(
               &_RoomRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RoomRole* other);
  friend void swap(RoomRole& a, RoomRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomRole* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomRole& from);
  void MergeFrom(const RoomRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 role_seat = 2;
  void clear_role_seat();
  static const int kRoleSeatFieldNumber = 2;
  ::google::protobuf::uint32 role_seat() const;
  void set_role_seat(::google::protobuf::uint32 value);

  // uint64 cliconn_id = 4;
  void clear_cliconn_id();
  static const int kCliconnIdFieldNumber = 4;
  ::google::protobuf::uint64 cliconn_id() const;
  void set_cliconn_id(::google::protobuf::uint64 value);

  // uint32 server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // uint32 reset_id = 5;
  void clear_reset_id();
  static const int kResetIdFieldNumber = 5;
  ::google::protobuf::uint32 reset_id() const;
  void set_reset_id(::google::protobuf::uint32 value);

  // uint32 is_ready = 6;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 6;
  ::google::protobuf::uint32 is_ready() const;
  void set_is_ready(::google::protobuf::uint32 value);

  // uint32 hosted = 7;
  void clear_hosted();
  static const int kHostedFieldNumber = 7;
  ::google::protobuf::uint32 hosted() const;
  void set_hosted(::google::protobuf::uint32 value);

  // uint32 join_type = 8;
  void clear_join_type();
  static const int kJoinTypeFieldNumber = 8;
  ::google::protobuf::uint32 join_type() const;
  void set_join_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoomRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 role_seat_;
  ::google::protobuf::uint64 cliconn_id_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 reset_id_;
  ::google::protobuf::uint32 is_ready_;
  ::google::protobuf::uint32 hosted_;
  ::google::protobuf::uint32 join_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsRoomRoleImpl();
};
// -------------------------------------------------------------------

class RoomRoleList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoomRoleList) */ {
 public:
  RoomRoleList();
  virtual ~RoomRoleList();

  RoomRoleList(const RoomRoleList& from);

  inline RoomRoleList& operator=(const RoomRoleList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomRoleList(RoomRoleList&& from) noexcept
    : RoomRoleList() {
    *this = ::std::move(from);
  }

  inline RoomRoleList& operator=(RoomRoleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomRoleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomRoleList* internal_default_instance() {
    return reinterpret_cast<const RoomRoleList*>(
               &_RoomRoleList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RoomRoleList* other);
  friend void swap(RoomRoleList& a, RoomRoleList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomRoleList* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomRoleList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomRoleList& from);
  void MergeFrom(const RoomRoleList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomRoleList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.RoomRole role_info = 1;
  int role_info_size() const;
  void clear_role_info();
  static const int kRoleInfoFieldNumber = 1;
  const ::Pb::RoomRole& role_info(int index) const;
  ::Pb::RoomRole* mutable_role_info(int index);
  ::Pb::RoomRole* add_role_info();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >*
      mutable_role_info();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >&
      role_info() const;

  // @@protoc_insertion_point(class_scope:Pb.RoomRoleList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole > role_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsRoomRoleListImpl();
};
// -------------------------------------------------------------------

class RoleScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoleScore) */ {
 public:
  RoleScore();
  virtual ~RoleScore();

  RoleScore(const RoleScore& from);

  inline RoleScore& operator=(const RoleScore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleScore(RoleScore&& from) noexcept
    : RoleScore() {
    *this = ::std::move(from);
  }

  inline RoleScore& operator=(RoleScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleScore* internal_default_instance() {
    return reinterpret_cast<const RoleScore*>(
               &_RoleScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(RoleScore* other);
  friend void swap(RoleScore& a, RoleScore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleScore* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleScore& from);
  void MergeFrom(const RoleScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.AcpcCard hole_cards = 5;
  int hole_cards_size() const;
  void clear_hole_cards();
  static const int kHoleCardsFieldNumber = 5;
  const ::Pb::AcpcCard& hole_cards(int index) const;
  ::Pb::AcpcCard* mutable_hole_cards(int index);
  ::Pb::AcpcCard* add_hole_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_hole_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      hole_cards() const;

  // string role_name = 3;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // uint32 role_seat = 1;
  void clear_role_seat();
  static const int kRoleSeatFieldNumber = 1;
  ::google::protobuf::uint32 role_seat() const;
  void set_role_seat(::google::protobuf::uint32 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // int32 score = 4;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoleScore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > hole_cards_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::uint32 role_seat_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::int32 score_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsRoleScoreImpl();
};
// -------------------------------------------------------------------

class RoomAttr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoomAttr) */ {
 public:
  RoomAttr();
  virtual ~RoomAttr();

  RoomAttr(const RoomAttr& from);

  inline RoomAttr& operator=(const RoomAttr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomAttr(RoomAttr&& from) noexcept
    : RoomAttr() {
    *this = ::std::move(from);
  }

  inline RoomAttr& operator=(RoomAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomAttr* internal_default_instance() {
    return reinterpret_cast<const RoomAttr*>(
               &_RoomAttr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(RoomAttr* other);
  friend void swap(RoomAttr& a, RoomAttr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomAttr* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomAttr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomAttr& from);
  void MergeFrom(const RoomAttr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role_name = 2;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string room_name = 3;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // string password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 game_type = 4;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 4;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 difficulty = 5;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 5;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // uint32 server_id = 8;
  void clear_server_id();
  static const int kServerIdFieldNumber = 8;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoomAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsRoomAttrImpl();
};
// -------------------------------------------------------------------

class RoomCanJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoomCanJoin) */ {
 public:
  RoomCanJoin();
  virtual ~RoomCanJoin();

  RoomCanJoin(const RoomCanJoin& from);

  inline RoomCanJoin& operator=(const RoomCanJoin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomCanJoin(RoomCanJoin&& from) noexcept
    : RoomCanJoin() {
    *this = ::std::move(from);
  }

  inline RoomCanJoin& operator=(RoomCanJoin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomCanJoin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomCanJoin* internal_default_instance() {
    return reinterpret_cast<const RoomCanJoin*>(
               &_RoomCanJoin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RoomCanJoin* other);
  friend void swap(RoomCanJoin& a, RoomCanJoin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomCanJoin* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomCanJoin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomCanJoin& from);
  void MergeFrom(const RoomCanJoin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomCanJoin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role_name = 2;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string room_name = 3;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // string version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 game_type = 4;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 4;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 difficulty = 5;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 5;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // uint32 server_id = 7;
  void clear_server_id();
  static const int kServerIdFieldNumber = 7;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // uint32 player_cnt = 8;
  void clear_player_cnt();
  static const int kPlayerCntFieldNumber = 8;
  ::google::protobuf::uint32 player_cnt() const;
  void set_player_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoomCanJoin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 player_cnt_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_2eproto::TableStruct;
  friend void ::protobuf_system_2eproto::InitDefaultsRoomCanJoinImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerID

// uint32 reg_id = 1;
inline void ServerID::clear_reg_id() {
  reg_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerID::reg_id() const {
  // @@protoc_insertion_point(field_get:Pb.ServerID.reg_id)
  return reg_id_;
}
inline void ServerID::set_reg_id(::google::protobuf::uint32 value) {
  
  reg_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.ServerID.reg_id)
}

// uint32 type = 2;
inline void ServerID::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 ServerID::type() const {
  // @@protoc_insertion_point(field_get:Pb.ServerID.type)
  return type_;
}
inline void ServerID::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Pb.ServerID.type)
}

// uint32 inst_id = 3;
inline void ServerID::clear_inst_id() {
  inst_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerID::inst_id() const {
  // @@protoc_insertion_point(field_get:Pb.ServerID.inst_id)
  return inst_id_;
}
inline void ServerID::set_inst_id(::google::protobuf::uint32 value) {
  
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.ServerID.inst_id)
}

// -------------------------------------------------------------------

// AcpcAction

// int32 position = 1;
inline void AcpcAction::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 AcpcAction::position() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcAction.position)
  return position_;
}
inline void AcpcAction::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcAction.position)
}

// int32 action = 2;
inline void AcpcAction::clear_action() {
  action_ = 0;
}
inline ::google::protobuf::int32 AcpcAction::action() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcAction.action)
  return action_;
}
inline void AcpcAction::set_action(::google::protobuf::int32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcAction.action)
}

// int32 size = 3;
inline void AcpcAction::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 AcpcAction::size() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcAction.size)
  return size_;
}
inline void AcpcAction::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcAction.size)
}

// -------------------------------------------------------------------

// AcpcRound

// repeated .Pb.AcpcAction actions = 1;
inline int AcpcRound::actions_size() const {
  return actions_.size();
}
inline void AcpcRound::clear_actions() {
  actions_.Clear();
}
inline const ::Pb::AcpcAction& AcpcRound::actions(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRound.actions)
  return actions_.Get(index);
}
inline ::Pb::AcpcAction* AcpcRound::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRound.actions)
  return actions_.Mutable(index);
}
inline ::Pb::AcpcAction* AcpcRound::add_actions() {
  // @@protoc_insertion_point(field_add:Pb.AcpcRound.actions)
  return actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcAction >*
AcpcRound::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcRound.actions)
  return &actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcAction >&
AcpcRound::actions() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcRound.actions)
  return actions_;
}

// -------------------------------------------------------------------

// AcpcCard

// int32 rank = 1;
inline void AcpcCard::clear_rank() {
  rank_ = 0;
}
inline ::google::protobuf::int32 AcpcCard::rank() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcCard.rank)
  return rank_;
}
inline void AcpcCard::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcCard.rank)
}

// int32 suit = 2;
inline void AcpcCard::clear_suit() {
  suit_ = 0;
}
inline ::google::protobuf::int32 AcpcCard::suit() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcCard.suit)
  return suit_;
}
inline void AcpcCard::set_suit(::google::protobuf::int32 value) {
  
  suit_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcCard.suit)
}

// int32 highlight = 3;
inline void AcpcCard::clear_highlight() {
  highlight_ = 0;
}
inline ::google::protobuf::int32 AcpcCard::highlight() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcCard.highlight)
  return highlight_;
}
inline void AcpcCard::set_highlight(::google::protobuf::int32 value) {
  
  highlight_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcCard.highlight)
}

// -------------------------------------------------------------------

// HoleCards

// repeated .Pb.AcpcCard hole_cards = 1;
inline int HoleCards::hole_cards_size() const {
  return hole_cards_.size();
}
inline void HoleCards::clear_hole_cards() {
  hole_cards_.Clear();
}
inline const ::Pb::AcpcCard& HoleCards::hole_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.HoleCards.hole_cards)
  return hole_cards_.Get(index);
}
inline ::Pb::AcpcCard* HoleCards::mutable_hole_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.HoleCards.hole_cards)
  return hole_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* HoleCards::add_hole_cards() {
  // @@protoc_insertion_point(field_add:Pb.HoleCards.hole_cards)
  return hole_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
HoleCards::mutable_hole_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.HoleCards.hole_cards)
  return &hole_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
HoleCards::hole_cards() const {
  // @@protoc_insertion_point(field_list:Pb.HoleCards.hole_cards)
  return hole_cards_;
}

// -------------------------------------------------------------------

// DRoleScore

// uint32 role_seat = 1;
inline void DRoleScore::clear_role_seat() {
  role_seat_ = 0u;
}
inline ::google::protobuf::uint32 DRoleScore::role_seat() const {
  // @@protoc_insertion_point(field_get:Pb.DRoleScore.role_seat)
  return role_seat_;
}
inline void DRoleScore::set_role_seat(::google::protobuf::uint32 value) {
  
  role_seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.DRoleScore.role_seat)
}

// uint32 role_id = 2;
inline void DRoleScore::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 DRoleScore::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.DRoleScore.role_id)
  return role_id_;
}
inline void DRoleScore::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.DRoleScore.role_id)
}

// int32 score = 3;
inline void DRoleScore::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 DRoleScore::score() const {
  // @@protoc_insertion_point(field_get:Pb.DRoleScore.score)
  return score_;
}
inline void DRoleScore::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Pb.DRoleScore.score)
}

// -------------------------------------------------------------------

// AcpcState

// int32 hand_id = 1;
inline void AcpcState::clear_hand_id() {
  hand_id_ = 0;
}
inline ::google::protobuf::int32 AcpcState::hand_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.hand_id)
  return hand_id_;
}
inline void AcpcState::set_hand_id(::google::protobuf::int32 value) {
  
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.hand_id)
}

// int32 max_spent = 2;
inline void AcpcState::clear_max_spent() {
  max_spent_ = 0;
}
inline ::google::protobuf::int32 AcpcState::max_spent() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.max_spent)
  return max_spent_;
}
inline void AcpcState::set_max_spent(::google::protobuf::int32 value) {
  
  max_spent_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.max_spent)
}

// int32 min_nolimit_raise_to = 3;
inline void AcpcState::clear_min_nolimit_raise_to() {
  min_nolimit_raise_to_ = 0;
}
inline ::google::protobuf::int32 AcpcState::min_nolimit_raise_to() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.min_nolimit_raise_to)
  return min_nolimit_raise_to_;
}
inline void AcpcState::set_min_nolimit_raise_to(::google::protobuf::int32 value) {
  
  min_nolimit_raise_to_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.min_nolimit_raise_to)
}

// repeated int32 spent = 4;
inline int AcpcState::spent_size() const {
  return spent_.size();
}
inline void AcpcState::clear_spent() {
  spent_.Clear();
}
inline ::google::protobuf::int32 AcpcState::spent(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.spent)
  return spent_.Get(index);
}
inline void AcpcState::set_spent(int index, ::google::protobuf::int32 value) {
  spent_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.AcpcState.spent)
}
inline void AcpcState::add_spent(::google::protobuf::int32 value) {
  spent_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.AcpcState.spent)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AcpcState::spent() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.spent)
  return spent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AcpcState::mutable_spent() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.spent)
  return &spent_;
}

// repeated .Pb.AcpcRound round_actions = 5;
inline int AcpcState::round_actions_size() const {
  return round_actions_.size();
}
inline void AcpcState::clear_round_actions() {
  round_actions_.Clear();
}
inline const ::Pb::AcpcRound& AcpcState::round_actions(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.round_actions)
  return round_actions_.Get(index);
}
inline ::Pb::AcpcRound* AcpcState::mutable_round_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcState.round_actions)
  return round_actions_.Mutable(index);
}
inline ::Pb::AcpcRound* AcpcState::add_round_actions() {
  // @@protoc_insertion_point(field_add:Pb.AcpcState.round_actions)
  return round_actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >*
AcpcState::mutable_round_actions() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.round_actions)
  return &round_actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >&
AcpcState::round_actions() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.round_actions)
  return round_actions_;
}

// int32 round = 6;
inline void AcpcState::clear_round() {
  round_ = 0;
}
inline ::google::protobuf::int32 AcpcState::round() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.round)
  return round_;
}
inline void AcpcState::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.round)
}

// int32 finished = 7;
inline void AcpcState::clear_finished() {
  finished_ = 0;
}
inline ::google::protobuf::int32 AcpcState::finished() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.finished)
  return finished_;
}
inline void AcpcState::set_finished(::google::protobuf::int32 value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.finished)
}

// repeated int32 fold_players = 8;
inline int AcpcState::fold_players_size() const {
  return fold_players_.size();
}
inline void AcpcState::clear_fold_players() {
  fold_players_.Clear();
}
inline ::google::protobuf::int32 AcpcState::fold_players(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.fold_players)
  return fold_players_.Get(index);
}
inline void AcpcState::set_fold_players(int index, ::google::protobuf::int32 value) {
  fold_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.AcpcState.fold_players)
}
inline void AcpcState::add_fold_players(::google::protobuf::int32 value) {
  fold_players_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.AcpcState.fold_players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AcpcState::fold_players() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.fold_players)
  return fold_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AcpcState::mutable_fold_players() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.fold_players)
  return &fold_players_;
}

// repeated .Pb.AcpcCard board_cards = 9;
inline int AcpcState::board_cards_size() const {
  return board_cards_.size();
}
inline void AcpcState::clear_board_cards() {
  board_cards_.Clear();
}
inline const ::Pb::AcpcCard& AcpcState::board_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.board_cards)
  return board_cards_.Get(index);
}
inline ::Pb::AcpcCard* AcpcState::mutable_board_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcState.board_cards)
  return board_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* AcpcState::add_board_cards() {
  // @@protoc_insertion_point(field_add:Pb.AcpcState.board_cards)
  return board_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
AcpcState::mutable_board_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.board_cards)
  return &board_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
AcpcState::board_cards() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.board_cards)
  return board_cards_;
}

// repeated .Pb.AcpcCard hole_cards = 10;
inline int AcpcState::hole_cards_size() const {
  return hole_cards_.size();
}
inline void AcpcState::clear_hole_cards() {
  hole_cards_.Clear();
}
inline const ::Pb::AcpcCard& AcpcState::hole_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.hole_cards)
  return hole_cards_.Get(index);
}
inline ::Pb::AcpcCard* AcpcState::mutable_hole_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcState.hole_cards)
  return hole_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* AcpcState::add_hole_cards() {
  // @@protoc_insertion_point(field_add:Pb.AcpcState.hole_cards)
  return hole_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
AcpcState::mutable_hole_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.hole_cards)
  return &hole_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
AcpcState::hole_cards() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.hole_cards)
  return hole_cards_;
}

// uint32 cur_player_pos = 11;
inline void AcpcState::clear_cur_player_pos() {
  cur_player_pos_ = 0u;
}
inline ::google::protobuf::uint32 AcpcState::cur_player_pos() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.cur_player_pos)
  return cur_player_pos_;
}
inline void AcpcState::set_cur_player_pos(::google::protobuf::uint32 value) {
  
  cur_player_pos_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.cur_player_pos)
}

// repeated .Pb.HoleCards player_hole_cards = 12;
inline int AcpcState::player_hole_cards_size() const {
  return player_hole_cards_.size();
}
inline void AcpcState::clear_player_hole_cards() {
  player_hole_cards_.Clear();
}
inline const ::Pb::HoleCards& AcpcState::player_hole_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.player_hole_cards)
  return player_hole_cards_.Get(index);
}
inline ::Pb::HoleCards* AcpcState::mutable_player_hole_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcState.player_hole_cards)
  return player_hole_cards_.Mutable(index);
}
inline ::Pb::HoleCards* AcpcState::add_player_hole_cards() {
  // @@protoc_insertion_point(field_add:Pb.AcpcState.player_hole_cards)
  return player_hole_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::HoleCards >*
AcpcState::mutable_player_hole_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.player_hole_cards)
  return &player_hole_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::HoleCards >&
AcpcState::player_hole_cards() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.player_hole_cards)
  return player_hole_cards_;
}

// repeated int32 round_spent = 13;
inline int AcpcState::round_spent_size() const {
  return round_spent_.size();
}
inline void AcpcState::clear_round_spent() {
  round_spent_.Clear();
}
inline ::google::protobuf::int32 AcpcState::round_spent(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.round_spent)
  return round_spent_.Get(index);
}
inline void AcpcState::set_round_spent(int index, ::google::protobuf::int32 value) {
  round_spent_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.AcpcState.round_spent)
}
inline void AcpcState::add_round_spent(::google::protobuf::int32 value) {
  round_spent_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.AcpcState.round_spent)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AcpcState::round_spent() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.round_spent)
  return round_spent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AcpcState::mutable_round_spent() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.round_spent)
  return &round_spent_;
}

// repeated string card_type = 14;
inline int AcpcState::card_type_size() const {
  return card_type_.size();
}
inline void AcpcState::clear_card_type() {
  card_type_.Clear();
}
inline const ::std::string& AcpcState::card_type(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.card_type)
  return card_type_.Get(index);
}
inline ::std::string* AcpcState::mutable_card_type(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcState.card_type)
  return card_type_.Mutable(index);
}
inline void AcpcState::set_card_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Pb.AcpcState.card_type)
  card_type_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AcpcState::set_card_type(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Pb.AcpcState.card_type)
  card_type_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AcpcState::set_card_type(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  card_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Pb.AcpcState.card_type)
}
inline void AcpcState::set_card_type(int index, const char* value, size_t size) {
  card_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcState.card_type)
}
inline ::std::string* AcpcState::add_card_type() {
  // @@protoc_insertion_point(field_add_mutable:Pb.AcpcState.card_type)
  return card_type_.Add();
}
inline void AcpcState::add_card_type(const ::std::string& value) {
  card_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Pb.AcpcState.card_type)
}
#if LANG_CXX11
inline void AcpcState::add_card_type(::std::string&& value) {
  card_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Pb.AcpcState.card_type)
}
#endif
inline void AcpcState::add_card_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  card_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Pb.AcpcState.card_type)
}
inline void AcpcState::add_card_type(const char* value, size_t size) {
  card_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Pb.AcpcState.card_type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AcpcState::card_type() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.card_type)
  return card_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AcpcState::mutable_card_type() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.card_type)
  return &card_type_;
}

// repeated int32 score = 15;
inline int AcpcState::score_size() const {
  return score_.size();
}
inline void AcpcState::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AcpcState::score(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.score)
  return score_.Get(index);
}
inline void AcpcState::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.AcpcState.score)
}
inline void AcpcState::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.AcpcState.score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AcpcState::score() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AcpcState::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.score)
  return &score_;
}

// uint32 dealer_role_id = 16;
inline void AcpcState::clear_dealer_role_id() {
  dealer_role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcState::dealer_role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.dealer_role_id)
  return dealer_role_id_;
}
inline void AcpcState::set_dealer_role_id(::google::protobuf::uint32 value) {
  
  dealer_role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.dealer_role_id)
}

// uint32 self_role_pos = 17;
inline void AcpcState::clear_self_role_pos() {
  self_role_pos_ = 0u;
}
inline ::google::protobuf::uint32 AcpcState::self_role_pos() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.self_role_pos)
  return self_role_pos_;
}
inline void AcpcState::set_self_role_pos(::google::protobuf::uint32 value) {
  
  self_role_pos_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcState.self_role_pos)
}

// repeated .Pb.DRoleScore role_score = 18;
inline int AcpcState::role_score_size() const {
  return role_score_.size();
}
inline void AcpcState::clear_role_score() {
  role_score_.Clear();
}
inline const ::Pb::DRoleScore& AcpcState::role_score(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcState.role_score)
  return role_score_.Get(index);
}
inline ::Pb::DRoleScore* AcpcState::mutable_role_score(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcState.role_score)
  return role_score_.Mutable(index);
}
inline ::Pb::DRoleScore* AcpcState::add_role_score() {
  // @@protoc_insertion_point(field_add:Pb.AcpcState.role_score)
  return role_score_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::DRoleScore >*
AcpcState::mutable_role_score() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcState.role_score)
  return &role_score_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::DRoleScore >&
AcpcState::role_score() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcState.role_score)
  return role_score_;
}

// -------------------------------------------------------------------

// RoleInfo

// uint32 role_id = 1;
inline void RoleInfo::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 RoleInfo::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoleInfo.role_id)
  return role_id_;
}
inline void RoleInfo::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleInfo.role_id)
}

// string role_name = 2;
inline void RoleInfo::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleInfo::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.RoleInfo.role_name)
  return role_name_.GetNoArena();
}
inline void RoleInfo::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoleInfo.role_name)
}
#if LANG_CXX11
inline void RoleInfo::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoleInfo.role_name)
}
#endif
inline void RoleInfo::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoleInfo.role_name)
}
inline void RoleInfo::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoleInfo.role_name)
}
inline ::std::string* RoleInfo::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoleInfo.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleInfo::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.RoleInfo.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleInfo::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoleInfo.role_name)
}

// uint32 role_type = 3;
inline void RoleInfo::clear_role_type() {
  role_type_ = 0u;
}
inline ::google::protobuf::uint32 RoleInfo::role_type() const {
  // @@protoc_insertion_point(field_get:Pb.RoleInfo.role_type)
  return role_type_;
}
inline void RoleInfo::set_role_type(::google::protobuf::uint32 value) {
  
  role_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleInfo.role_type)
}

// string role_img = 4;
inline void RoleInfo::clear_role_img() {
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleInfo::role_img() const {
  // @@protoc_insertion_point(field_get:Pb.RoleInfo.role_img)
  return role_img_.GetNoArena();
}
inline void RoleInfo::set_role_img(const ::std::string& value) {
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoleInfo.role_img)
}
#if LANG_CXX11
inline void RoleInfo::set_role_img(::std::string&& value) {
  
  role_img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoleInfo.role_img)
}
#endif
inline void RoleInfo::set_role_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoleInfo.role_img)
}
inline void RoleInfo::set_role_img(const char* value, size_t size) {
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoleInfo.role_img)
}
inline ::std::string* RoleInfo::mutable_role_img() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoleInfo.role_img)
  return role_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleInfo::release_role_img() {
  // @@protoc_insertion_point(field_release:Pb.RoleInfo.role_img)
  
  return role_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleInfo::set_allocated_role_img(::std::string* role_img) {
  if (role_img != NULL) {
    
  } else {
    
  }
  role_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_img);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoleInfo.role_img)
}

// uint32 role_seat = 5;
inline void RoleInfo::clear_role_seat() {
  role_seat_ = 0u;
}
inline ::google::protobuf::uint32 RoleInfo::role_seat() const {
  // @@protoc_insertion_point(field_get:Pb.RoleInfo.role_seat)
  return role_seat_;
}
inline void RoleInfo::set_role_seat(::google::protobuf::uint32 value) {
  
  role_seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleInfo.role_seat)
}

// uint32 is_ready = 6;
inline void RoleInfo::clear_is_ready() {
  is_ready_ = 0u;
}
inline ::google::protobuf::uint32 RoleInfo::is_ready() const {
  // @@protoc_insertion_point(field_get:Pb.RoleInfo.is_ready)
  return is_ready_;
}
inline void RoleInfo::set_is_ready(::google::protobuf::uint32 value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleInfo.is_ready)
}

// -------------------------------------------------------------------

// RoomRole

// uint32 role_id = 1;
inline void RoomRole::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.role_id)
  return role_id_;
}
inline void RoomRole::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.role_id)
}

// uint32 role_seat = 2;
inline void RoomRole::clear_role_seat() {
  role_seat_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::role_seat() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.role_seat)
  return role_seat_;
}
inline void RoomRole::set_role_seat(::google::protobuf::uint32 value) {
  
  role_seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.role_seat)
}

// uint32 server_id = 3;
inline void RoomRole::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::server_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.server_id)
  return server_id_;
}
inline void RoomRole::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.server_id)
}

// uint64 cliconn_id = 4;
inline void RoomRole::clear_cliconn_id() {
  cliconn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoomRole::cliconn_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.cliconn_id)
  return cliconn_id_;
}
inline void RoomRole::set_cliconn_id(::google::protobuf::uint64 value) {
  
  cliconn_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.cliconn_id)
}

// uint32 reset_id = 5;
inline void RoomRole::clear_reset_id() {
  reset_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::reset_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.reset_id)
  return reset_id_;
}
inline void RoomRole::set_reset_id(::google::protobuf::uint32 value) {
  
  reset_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.reset_id)
}

// uint32 is_ready = 6;
inline void RoomRole::clear_is_ready() {
  is_ready_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::is_ready() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.is_ready)
  return is_ready_;
}
inline void RoomRole::set_is_ready(::google::protobuf::uint32 value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.is_ready)
}

// uint32 hosted = 7;
inline void RoomRole::clear_hosted() {
  hosted_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::hosted() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.hosted)
  return hosted_;
}
inline void RoomRole::set_hosted(::google::protobuf::uint32 value) {
  
  hosted_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.hosted)
}

// uint32 join_type = 8;
inline void RoomRole::clear_join_type() {
  join_type_ = 0u;
}
inline ::google::protobuf::uint32 RoomRole::join_type() const {
  // @@protoc_insertion_point(field_get:Pb.RoomRole.join_type)
  return join_type_;
}
inline void RoomRole::set_join_type(::google::protobuf::uint32 value) {
  
  join_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomRole.join_type)
}

// -------------------------------------------------------------------

// RoomRoleList

// repeated .Pb.RoomRole role_info = 1;
inline int RoomRoleList::role_info_size() const {
  return role_info_.size();
}
inline void RoomRoleList::clear_role_info() {
  role_info_.Clear();
}
inline const ::Pb::RoomRole& RoomRoleList::role_info(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RoomRoleList.role_info)
  return role_info_.Get(index);
}
inline ::Pb::RoomRole* RoomRoleList::mutable_role_info(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RoomRoleList.role_info)
  return role_info_.Mutable(index);
}
inline ::Pb::RoomRole* RoomRoleList::add_role_info() {
  // @@protoc_insertion_point(field_add:Pb.RoomRoleList.role_info)
  return role_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >*
RoomRoleList::mutable_role_info() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RoomRoleList.role_info)
  return &role_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >&
RoomRoleList::role_info() const {
  // @@protoc_insertion_point(field_list:Pb.RoomRoleList.role_info)
  return role_info_;
}

// -------------------------------------------------------------------

// RoleScore

// uint32 role_seat = 1;
inline void RoleScore::clear_role_seat() {
  role_seat_ = 0u;
}
inline ::google::protobuf::uint32 RoleScore::role_seat() const {
  // @@protoc_insertion_point(field_get:Pb.RoleScore.role_seat)
  return role_seat_;
}
inline void RoleScore::set_role_seat(::google::protobuf::uint32 value) {
  
  role_seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleScore.role_seat)
}

// uint32 role_id = 2;
inline void RoleScore::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 RoleScore::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoleScore.role_id)
  return role_id_;
}
inline void RoleScore::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleScore.role_id)
}

// string role_name = 3;
inline void RoleScore::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleScore::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.RoleScore.role_name)
  return role_name_.GetNoArena();
}
inline void RoleScore::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoleScore.role_name)
}
#if LANG_CXX11
inline void RoleScore::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoleScore.role_name)
}
#endif
inline void RoleScore::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoleScore.role_name)
}
inline void RoleScore::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoleScore.role_name)
}
inline ::std::string* RoleScore::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoleScore.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleScore::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.RoleScore.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleScore::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoleScore.role_name)
}

// int32 score = 4;
inline void RoleScore::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 RoleScore::score() const {
  // @@protoc_insertion_point(field_get:Pb.RoleScore.score)
  return score_;
}
inline void RoleScore::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleScore.score)
}

// repeated .Pb.AcpcCard hole_cards = 5;
inline int RoleScore::hole_cards_size() const {
  return hole_cards_.size();
}
inline void RoleScore::clear_hole_cards() {
  hole_cards_.Clear();
}
inline const ::Pb::AcpcCard& RoleScore::hole_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RoleScore.hole_cards)
  return hole_cards_.Get(index);
}
inline ::Pb::AcpcCard* RoleScore::mutable_hole_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RoleScore.hole_cards)
  return hole_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* RoleScore::add_hole_cards() {
  // @@protoc_insertion_point(field_add:Pb.RoleScore.hole_cards)
  return hole_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
RoleScore::mutable_hole_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RoleScore.hole_cards)
  return &hole_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
RoleScore::hole_cards() const {
  // @@protoc_insertion_point(field_list:Pb.RoleScore.hole_cards)
  return hole_cards_;
}

// -------------------------------------------------------------------

// RoomAttr

// uint32 role_id = 1;
inline void RoomAttr::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomAttr::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.role_id)
  return role_id_;
}
inline void RoomAttr::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.role_id)
}

// string role_name = 2;
inline void RoomAttr::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomAttr::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.role_name)
  return role_name_.GetNoArena();
}
inline void RoomAttr::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.role_name)
}
#if LANG_CXX11
inline void RoomAttr::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomAttr.role_name)
}
#endif
inline void RoomAttr::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomAttr.role_name)
}
inline void RoomAttr::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomAttr.role_name)
}
inline ::std::string* RoomAttr::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomAttr.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomAttr::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.RoomAttr.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomAttr::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomAttr.role_name)
}

// string room_name = 3;
inline void RoomAttr::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomAttr::room_name() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.room_name)
  return room_name_.GetNoArena();
}
inline void RoomAttr::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.room_name)
}
#if LANG_CXX11
inline void RoomAttr::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomAttr.room_name)
}
#endif
inline void RoomAttr::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomAttr.room_name)
}
inline void RoomAttr::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomAttr.room_name)
}
inline ::std::string* RoomAttr::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomAttr.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomAttr::release_room_name() {
  // @@protoc_insertion_point(field_release:Pb.RoomAttr.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomAttr::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomAttr.room_name)
}

// uint32 game_type = 4;
inline void RoomAttr::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 RoomAttr::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.game_type)
  return game_type_;
}
inline void RoomAttr::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.game_type)
}

// uint32 difficulty = 5;
inline void RoomAttr::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 RoomAttr::difficulty() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.difficulty)
  return difficulty_;
}
inline void RoomAttr::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.difficulty)
}

// string password = 6;
inline void RoomAttr::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomAttr::password() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.password)
  return password_.GetNoArena();
}
inline void RoomAttr::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.password)
}
#if LANG_CXX11
inline void RoomAttr::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomAttr.password)
}
#endif
inline void RoomAttr::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomAttr.password)
}
inline void RoomAttr::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomAttr.password)
}
inline ::std::string* RoomAttr::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomAttr.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomAttr::release_password() {
  // @@protoc_insertion_point(field_release:Pb.RoomAttr.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomAttr::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomAttr.password)
}

// string version = 7;
inline void RoomAttr::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomAttr::version() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.version)
  return version_.GetNoArena();
}
inline void RoomAttr::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.version)
}
#if LANG_CXX11
inline void RoomAttr::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomAttr.version)
}
#endif
inline void RoomAttr::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomAttr.version)
}
inline void RoomAttr::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomAttr.version)
}
inline ::std::string* RoomAttr::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomAttr.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomAttr::release_version() {
  // @@protoc_insertion_point(field_release:Pb.RoomAttr.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomAttr::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomAttr.version)
}

// uint32 server_id = 8;
inline void RoomAttr::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomAttr::server_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomAttr.server_id)
  return server_id_;
}
inline void RoomAttr::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomAttr.server_id)
}

// -------------------------------------------------------------------

// RoomCanJoin

// uint32 role_id = 1;
inline void RoomCanJoin::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomCanJoin::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.role_id)
  return role_id_;
}
inline void RoomCanJoin::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.role_id)
}

// string role_name = 2;
inline void RoomCanJoin::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomCanJoin::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.role_name)
  return role_name_.GetNoArena();
}
inline void RoomCanJoin::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.role_name)
}
#if LANG_CXX11
inline void RoomCanJoin::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomCanJoin.role_name)
}
#endif
inline void RoomCanJoin::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomCanJoin.role_name)
}
inline void RoomCanJoin::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomCanJoin.role_name)
}
inline ::std::string* RoomCanJoin::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomCanJoin.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomCanJoin::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.RoomCanJoin.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomCanJoin::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomCanJoin.role_name)
}

// string room_name = 3;
inline void RoomCanJoin::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomCanJoin::room_name() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.room_name)
  return room_name_.GetNoArena();
}
inline void RoomCanJoin::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.room_name)
}
#if LANG_CXX11
inline void RoomCanJoin::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomCanJoin.room_name)
}
#endif
inline void RoomCanJoin::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomCanJoin.room_name)
}
inline void RoomCanJoin::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomCanJoin.room_name)
}
inline ::std::string* RoomCanJoin::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomCanJoin.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomCanJoin::release_room_name() {
  // @@protoc_insertion_point(field_release:Pb.RoomCanJoin.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomCanJoin::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomCanJoin.room_name)
}

// uint32 game_type = 4;
inline void RoomCanJoin::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 RoomCanJoin::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.game_type)
  return game_type_;
}
inline void RoomCanJoin::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.game_type)
}

// uint32 difficulty = 5;
inline void RoomCanJoin::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 RoomCanJoin::difficulty() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.difficulty)
  return difficulty_;
}
inline void RoomCanJoin::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.difficulty)
}

// string version = 6;
inline void RoomCanJoin::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomCanJoin::version() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.version)
  return version_.GetNoArena();
}
inline void RoomCanJoin::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.version)
}
#if LANG_CXX11
inline void RoomCanJoin::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RoomCanJoin.version)
}
#endif
inline void RoomCanJoin::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RoomCanJoin.version)
}
inline void RoomCanJoin::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RoomCanJoin.version)
}
inline ::std::string* RoomCanJoin::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RoomCanJoin.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomCanJoin::release_version() {
  // @@protoc_insertion_point(field_release:Pb.RoomCanJoin.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomCanJoin::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Pb.RoomCanJoin.version)
}

// uint32 server_id = 7;
inline void RoomCanJoin::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 RoomCanJoin::server_id() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.server_id)
  return server_id_;
}
inline void RoomCanJoin::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.server_id)
}

// uint32 player_cnt = 8;
inline void RoomCanJoin::clear_player_cnt() {
  player_cnt_ = 0u;
}
inline ::google::protobuf::uint32 RoomCanJoin::player_cnt() const {
  // @@protoc_insertion_point(field_get:Pb.RoomCanJoin.player_cnt)
  return player_cnt_;
}
inline void RoomCanJoin::set_player_cnt(::google::protobuf::uint32 value) {
  
  player_cnt_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoomCanJoin.player_cnt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Pb::DP_CMD> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pb::DP_CMD>() {
  return ::Pb::DP_CMD_descriptor();
}
template <> struct is_proto_enum< ::Pb::DP_ERRCODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pb::DP_ERRCODE>() {
  return ::Pb::DP_ERRCODE_descriptor();
}
template <> struct is_proto_enum< ::Pb::SERVER_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pb::SERVER_TYPE>() {
  return ::Pb::SERVER_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2eproto__INCLUDED
