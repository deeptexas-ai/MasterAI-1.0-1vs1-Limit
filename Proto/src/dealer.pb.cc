// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dealer.proto

#include "dealer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class DRoleStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DRoleState>
      _instance;
} _DRoleState_default_instance_;
class DRoleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DRoleInfo>
      _instance;
} _DRoleInfo_default_instance_;
class DRequestCardsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DRequestCardsReq>
      _instance;
} _DRequestCardsReq_default_instance_;
class DRequestCardsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DRequestCardsResp>
      _instance;
} _DRequestCardsResp_default_instance_;
class DNotifyMatchStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNotifyMatchState>
      _instance;
} _DNotifyMatchState_default_instance_;
class BCRequestCardsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BCRequestCardsReq>
      _instance;
} _BCRequestCardsReq_default_instance_;
class BCRequestCardsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BCRequestCardsResp>
      _instance;
} _BCRequestCardsResp_default_instance_;
}  // namespace Pb
namespace protobuf_dealer_2eproto {
void InitDefaultsDRoleStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_DRoleState_default_instance_;
    new (ptr) ::Pb::DRoleState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::DRoleState::InitAsDefaultInstance();
}

void InitDefaultsDRoleState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDRoleStateImpl);
}

void InitDefaultsDRoleInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_DRoleInfo_default_instance_;
    new (ptr) ::Pb::DRoleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::DRoleInfo::InitAsDefaultInstance();
}

void InitDefaultsDRoleInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDRoleInfoImpl);
}

void InitDefaultsDRequestCardsReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dealer_2eproto::InitDefaultsDRoleInfo();
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_DRequestCardsReq_default_instance_;
    new (ptr) ::Pb::DRequestCardsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::DRequestCardsReq::InitAsDefaultInstance();
}

void InitDefaultsDRequestCardsReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDRequestCardsReqImpl);
}

void InitDefaultsDRequestCardsRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  protobuf_system_2eproto::InitDefaultsHoleCards();
  {
    void* ptr = &::Pb::_DRequestCardsResp_default_instance_;
    new (ptr) ::Pb::DRequestCardsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::DRequestCardsResp::InitAsDefaultInstance();
}

void InitDefaultsDRequestCardsResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDRequestCardsRespImpl);
}

void InitDefaultsDNotifyMatchStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  protobuf_dealer_2eproto::InitDefaultsDRoleState();
  protobuf_acpc_2eproto::InitDefaultsRoleAction();
  {
    void* ptr = &::Pb::_DNotifyMatchState_default_instance_;
    new (ptr) ::Pb::DNotifyMatchState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::DNotifyMatchState::InitAsDefaultInstance();
}

void InitDefaultsDNotifyMatchState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNotifyMatchStateImpl);
}

void InitDefaultsBCRequestCardsReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_BCRequestCardsReq_default_instance_;
    new (ptr) ::Pb::BCRequestCardsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::BCRequestCardsReq::InitAsDefaultInstance();
}

void InitDefaultsBCRequestCardsReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBCRequestCardsReqImpl);
}

void InitDefaultsBCRequestCardsRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_BCRequestCardsResp_default_instance_;
    new (ptr) ::Pb::BCRequestCardsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::BCRequestCardsResp::InitAsDefaultInstance();
}

void InitDefaultsBCRequestCardsResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBCRequestCardsRespImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, fold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleState, turn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleInfo, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleInfo, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRoleInfo, hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, dealer_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, role_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsReq, board_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsResp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsResp, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsResp, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsResp, board_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DRequestCardsResp, hole_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, dealer_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, board_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, role_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, role_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::DNotifyMatchState, round_spent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsReq, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsReq, hand_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsResp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsResp, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BCRequestCardsResp, cards_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::DRoleState)},
  { 12, -1, sizeof(::Pb::DRoleInfo)},
  { 20, -1, sizeof(::Pb::DRequestCardsReq)},
  { 31, -1, sizeof(::Pb::DRequestCardsResp)},
  { 41, -1, sizeof(::Pb::DNotifyMatchState)},
  { 57, -1, sizeof(::Pb::BCRequestCardsReq)},
  { 64, -1, sizeof(::Pb::BCRequestCardsResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_DRoleState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_DRoleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_DRequestCardsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_DRequestCardsResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_DNotifyMatchState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_BCRequestCardsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_BCRequestCardsResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dealer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014dealer.proto\022\002Pb\032\014system.proto\032\nacpc.p"
      "roto\"\214\001\n\nDRoleState\022\017\n\007role_id\030\001 \001(\r\022\021\n\t"
      "role_name\030\002 \001(\t\022\r\n\005spent\030\003 \001(\r\022\014\n\004fold\030\004"
      " \001(\r\022 \n\nhole_cards\030\005 \003(\0132\014.Pb.AcpcCard\022\r"
      "\n\005Score\030\006 \001(\005\022\014\n\004turn\030\007 \001(\005\"Q\n\tDRoleInfo"
      "\022\017\n\007role_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022 \n\n"
      "hole_cards\030\003 \003(\0132\014.Pb.AcpcCard\"\235\001\n\020DRequ"
      "estCardsReq\022\017\n\007room_id\030\001 \001(\004\022\017\n\007hand_id\030"
      "\002 \001(\r\022\r\n\005round\030\003 \001(\r\022\023\n\013dealer_seat\030\004 \001("
      "\r\022 \n\trole_info\030\005 \003(\0132\r.Pb.DRoleInfo\022!\n\013b"
      "oard_cards\030\006 \003(\0132\014.Pb.AcpcCard\"\212\001\n\021DRequ"
      "estCardsResp\022\017\n\007room_id\030\001 \001(\004\022\017\n\007hand_id"
      "\030\002 \001(\r\022\r\n\005round\030\003 \001(\r\022!\n\013board_cards\030\004 \003"
      "(\0132\014.Pb.AcpcCard\022!\n\nhole_cards\030\005 \003(\0132\r.P"
      "b.HoleCards\"\215\002\n\021DNotifyMatchState\022\017\n\007roo"
      "m_id\030\001 \001(\004\022\014\n\004mode\030\002 \001(\r\022\023\n\013dealer_seat\030"
      "\003 \001(\r\022\017\n\007hand_id\030\004 \001(\r\022\r\n\005round\030\005 \001(\r\022\020\n"
      "\010finished\030\006 \001(\r\022\021\n\tmax_spent\030\007 \001(\r\022!\n\013bo"
      "ard_cards\030\010 \003(\0132\014.Pb.AcpcCard\022\"\n\nrole_st"
      "ate\030\t \003(\0132\016.Pb.DRoleState\022#\n\013role_action"
      "\030\n \003(\0132\016.Pb.RoleAction\022\023\n\013round_spent\030\013 "
      "\003(\005\"5\n\021BCRequestCardsReq\022\017\n\007room_id\030\001 \001("
      "\004\022\017\n\007hand_id\030\002 \001(\r\"S\n\022BCRequestCardsResp"
      "\022\017\n\007room_id\030\001 \001(\004\022\017\n\007hand_id\030\002 \001(\r\022\033\n\005ca"
      "rds\030\003 \003(\0132\014.Pb.AcpcCardb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dealer.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
  ::protobuf_acpc_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dealer_2eproto
namespace Pb {

// ===================================================================

void DRoleState::InitAsDefaultInstance() {
}
void DRoleState::clear_hole_cards() {
  hole_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DRoleState::kRoleIdFieldNumber;
const int DRoleState::kRoleNameFieldNumber;
const int DRoleState::kSpentFieldNumber;
const int DRoleState::kFoldFieldNumber;
const int DRoleState::kHoleCardsFieldNumber;
const int DRoleState::kScoreFieldNumber;
const int DRoleState::kTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DRoleState::DRoleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsDRoleState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.DRoleState)
}
DRoleState::DRoleState(const DRoleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:Pb.DRoleState)
}

void DRoleState::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(turn_));
  _cached_size_ = 0;
}

DRoleState::~DRoleState() {
  // @@protoc_insertion_point(destructor:Pb.DRoleState)
  SharedDtor();
}

void DRoleState::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DRoleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DRoleState::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DRoleState& DRoleState::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsDRoleState();
  return *internal_default_instance();
}

DRoleState* DRoleState::New(::google::protobuf::Arena* arena) const {
  DRoleState* n = new DRoleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DRoleState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.DRoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(turn_));
  _internal_metadata_.Clear();
}

bool DRoleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.DRoleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.DRoleState.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 spent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.DRoleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.DRoleState)
  return false;
#undef DO_
}

void DRoleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.DRoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.DRoleState.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // uint32 spent = 3;
  if (this->spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->spent(), output);
  }

  // uint32 fold = 4;
  if (this->fold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fold(), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hole_cards(static_cast<int>(i)), output);
  }

  // int32 Score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // int32 turn = 7;
  if (this->turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->turn(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.DRoleState)
}

::google::protobuf::uint8* DRoleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.DRoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.DRoleState.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // uint32 spent = 3;
  if (this->spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->spent(), target);
  }

  // uint32 fold = 4;
  if (this->fold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fold(), target);
  }

  // repeated .Pb.AcpcCard hole_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  // int32 Score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // int32 turn = 7;
  if (this->turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->turn(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.DRoleState)
  return target;
}

size_t DRoleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.DRoleState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard hole_cards = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 spent = 3;
  if (this->spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spent());
  }

  // uint32 fold = 4;
  if (this->fold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fold());
  }

  // int32 Score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // int32 turn = 7;
  if (this->turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DRoleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.DRoleState)
  GOOGLE_DCHECK_NE(&from, this);
  const DRoleState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DRoleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.DRoleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.DRoleState)
    MergeFrom(*source);
  }
}

void DRoleState::MergeFrom(const DRoleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.DRoleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.spent() != 0) {
    set_spent(from.spent());
  }
  if (from.fold() != 0) {
    set_fold(from.fold());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.turn() != 0) {
    set_turn(from.turn());
  }
}

void DRoleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.DRoleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRoleState::CopyFrom(const DRoleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.DRoleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRoleState::IsInitialized() const {
  return true;
}

void DRoleState::Swap(DRoleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DRoleState::InternalSwap(DRoleState* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  role_name_.Swap(&other->role_name_);
  swap(role_id_, other->role_id_);
  swap(spent_, other->spent_);
  swap(fold_, other->fold_);
  swap(score_, other->score_);
  swap(turn_, other->turn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DRoleState::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DRoleInfo::InitAsDefaultInstance() {
}
void DRoleInfo::clear_hole_cards() {
  hole_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DRoleInfo::kRoleIdFieldNumber;
const int DRoleInfo::kRoleNameFieldNumber;
const int DRoleInfo::kHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DRoleInfo::DRoleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsDRoleInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.DRoleInfo)
}
DRoleInfo::DRoleInfo(const DRoleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.DRoleInfo)
}

void DRoleInfo::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_id_ = 0u;
  _cached_size_ = 0;
}

DRoleInfo::~DRoleInfo() {
  // @@protoc_insertion_point(destructor:Pb.DRoleInfo)
  SharedDtor();
}

void DRoleInfo::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DRoleInfo::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DRoleInfo& DRoleInfo::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsDRoleInfo();
  return *internal_default_instance();
}

DRoleInfo* DRoleInfo::New(::google::protobuf::Arena* arena) const {
  DRoleInfo* n = new DRoleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.DRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.DRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.DRoleInfo.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.DRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.DRoleInfo)
  return false;
#undef DO_
}

void DRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.DRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.DRoleInfo.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hole_cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.DRoleInfo)
}

::google::protobuf::uint8* DRoleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.DRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.DRoleInfo.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // repeated .Pb.AcpcCard hole_cards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.DRoleInfo)
  return target;
}

size_t DRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.DRoleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard hole_cards = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.DRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DRoleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DRoleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.DRoleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.DRoleInfo)
    MergeFrom(*source);
  }
}

void DRoleInfo::MergeFrom(const DRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.DRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void DRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.DRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRoleInfo::CopyFrom(const DRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.DRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRoleInfo::IsInitialized() const {
  return true;
}

void DRoleInfo::Swap(DRoleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DRoleInfo::InternalSwap(DRoleInfo* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  role_name_.Swap(&other->role_name_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DRoleInfo::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DRequestCardsReq::InitAsDefaultInstance() {
}
void DRequestCardsReq::clear_board_cards() {
  board_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DRequestCardsReq::kRoomIdFieldNumber;
const int DRequestCardsReq::kHandIdFieldNumber;
const int DRequestCardsReq::kRoundFieldNumber;
const int DRequestCardsReq::kDealerSeatFieldNumber;
const int DRequestCardsReq::kRoleInfoFieldNumber;
const int DRequestCardsReq::kBoardCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DRequestCardsReq::DRequestCardsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsDRequestCardsReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.DRequestCardsReq)
}
DRequestCardsReq::DRequestCardsReq(const DRequestCardsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_info_(from.role_info_),
      board_cards_(from.board_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealer_seat_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_seat_));
  // @@protoc_insertion_point(copy_constructor:Pb.DRequestCardsReq)
}

void DRequestCardsReq::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_seat_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_seat_));
  _cached_size_ = 0;
}

DRequestCardsReq::~DRequestCardsReq() {
  // @@protoc_insertion_point(destructor:Pb.DRequestCardsReq)
  SharedDtor();
}

void DRequestCardsReq::SharedDtor() {
}

void DRequestCardsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DRequestCardsReq::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DRequestCardsReq& DRequestCardsReq::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsDRequestCardsReq();
  return *internal_default_instance();
}

DRequestCardsReq* DRequestCardsReq::New(::google::protobuf::Arena* arena) const {
  DRequestCardsReq* n = new DRequestCardsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DRequestCardsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.DRequestCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_info_.Clear();
  board_cards_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_seat_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_seat_));
  _internal_metadata_.Clear();
}

bool DRequestCardsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.DRequestCardsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_seat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.DRoleInfo role_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.DRequestCardsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.DRequestCardsReq)
  return false;
#undef DO_
}

void DRequestCardsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.DRequestCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hand_id(), output);
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round(), output);
  }

  // uint32 dealer_seat = 4;
  if (this->dealer_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dealer_seat(), output);
  }

  // repeated .Pb.DRoleInfo role_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_info(static_cast<int>(i)), output);
  }

  // repeated .Pb.AcpcCard board_cards = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->board_cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.DRequestCardsReq)
}

::google::protobuf::uint8* DRequestCardsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.DRequestCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hand_id(), target);
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round(), target);
  }

  // uint32 dealer_seat = 4;
  if (this->dealer_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dealer_seat(), target);
  }

  // repeated .Pb.DRoleInfo role_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->role_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.AcpcCard board_cards = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.DRequestCardsReq)
  return target;
}

size_t DRequestCardsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.DRequestCardsReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.DRoleInfo role_info = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->role_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_info(static_cast<int>(i)));
    }
  }

  // repeated .Pb.AcpcCard board_cards = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 dealer_seat = 4;
  if (this->dealer_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_seat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DRequestCardsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.DRequestCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DRequestCardsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DRequestCardsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.DRequestCardsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.DRequestCardsReq)
    MergeFrom(*source);
  }
}

void DRequestCardsReq::MergeFrom(const DRequestCardsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.DRequestCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_info_.MergeFrom(from.role_info_);
  board_cards_.MergeFrom(from.board_cards_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.dealer_seat() != 0) {
    set_dealer_seat(from.dealer_seat());
  }
}

void DRequestCardsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.DRequestCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRequestCardsReq::CopyFrom(const DRequestCardsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.DRequestCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRequestCardsReq::IsInitialized() const {
  return true;
}

void DRequestCardsReq::Swap(DRequestCardsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DRequestCardsReq::InternalSwap(DRequestCardsReq* other) {
  using std::swap;
  role_info_.InternalSwap(&other->role_info_);
  board_cards_.InternalSwap(&other->board_cards_);
  swap(room_id_, other->room_id_);
  swap(hand_id_, other->hand_id_);
  swap(round_, other->round_);
  swap(dealer_seat_, other->dealer_seat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DRequestCardsReq::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DRequestCardsResp::InitAsDefaultInstance() {
}
void DRequestCardsResp::clear_board_cards() {
  board_cards_.Clear();
}
void DRequestCardsResp::clear_hole_cards() {
  hole_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DRequestCardsResp::kRoomIdFieldNumber;
const int DRequestCardsResp::kHandIdFieldNumber;
const int DRequestCardsResp::kRoundFieldNumber;
const int DRequestCardsResp::kBoardCardsFieldNumber;
const int DRequestCardsResp::kHoleCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DRequestCardsResp::DRequestCardsResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsDRequestCardsResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.DRequestCardsResp)
}
DRequestCardsResp::DRequestCardsResp(const DRequestCardsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      board_cards_(from.board_cards_),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:Pb.DRequestCardsResp)
}

void DRequestCardsResp::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(round_));
  _cached_size_ = 0;
}

DRequestCardsResp::~DRequestCardsResp() {
  // @@protoc_insertion_point(destructor:Pb.DRequestCardsResp)
  SharedDtor();
}

void DRequestCardsResp::SharedDtor() {
}

void DRequestCardsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DRequestCardsResp::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DRequestCardsResp& DRequestCardsResp::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsDRequestCardsResp();
  return *internal_default_instance();
}

DRequestCardsResp* DRequestCardsResp::New(::google::protobuf::Arena* arena) const {
  DRequestCardsResp* n = new DRequestCardsResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DRequestCardsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.DRequestCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  board_cards_.Clear();
  hole_cards_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(round_));
  _internal_metadata_.Clear();
}

bool DRequestCardsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.DRequestCardsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.HoleCards hole_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.DRequestCardsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.DRequestCardsResp)
  return false;
#undef DO_
}

void DRequestCardsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.DRequestCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hand_id(), output);
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round(), output);
  }

  // repeated .Pb.AcpcCard board_cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->board_cards(static_cast<int>(i)), output);
  }

  // repeated .Pb.HoleCards hole_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hole_cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.DRequestCardsResp)
}

::google::protobuf::uint8* DRequestCardsResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.DRequestCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hand_id(), target);
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round(), target);
  }

  // repeated .Pb.AcpcCard board_cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.HoleCards hole_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.DRequestCardsResp)
  return target;
}

size_t DRequestCardsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.DRequestCardsResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard board_cards = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.HoleCards hole_cards = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DRequestCardsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.DRequestCardsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DRequestCardsResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DRequestCardsResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.DRequestCardsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.DRequestCardsResp)
    MergeFrom(*source);
  }
}

void DRequestCardsResp::MergeFrom(const DRequestCardsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.DRequestCardsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  board_cards_.MergeFrom(from.board_cards_);
  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void DRequestCardsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.DRequestCardsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRequestCardsResp::CopyFrom(const DRequestCardsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.DRequestCardsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRequestCardsResp::IsInitialized() const {
  return true;
}

void DRequestCardsResp::Swap(DRequestCardsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DRequestCardsResp::InternalSwap(DRequestCardsResp* other) {
  using std::swap;
  board_cards_.InternalSwap(&other->board_cards_);
  hole_cards_.InternalSwap(&other->hole_cards_);
  swap(room_id_, other->room_id_);
  swap(hand_id_, other->hand_id_);
  swap(round_, other->round_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DRequestCardsResp::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNotifyMatchState::InitAsDefaultInstance() {
}
void DNotifyMatchState::clear_board_cards() {
  board_cards_.Clear();
}
void DNotifyMatchState::clear_role_action() {
  role_action_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNotifyMatchState::kRoomIdFieldNumber;
const int DNotifyMatchState::kModeFieldNumber;
const int DNotifyMatchState::kDealerSeatFieldNumber;
const int DNotifyMatchState::kHandIdFieldNumber;
const int DNotifyMatchState::kRoundFieldNumber;
const int DNotifyMatchState::kFinishedFieldNumber;
const int DNotifyMatchState::kMaxSpentFieldNumber;
const int DNotifyMatchState::kBoardCardsFieldNumber;
const int DNotifyMatchState::kRoleStateFieldNumber;
const int DNotifyMatchState::kRoleActionFieldNumber;
const int DNotifyMatchState::kRoundSpentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNotifyMatchState::DNotifyMatchState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsDNotifyMatchState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.DNotifyMatchState)
}
DNotifyMatchState::DNotifyMatchState(const DNotifyMatchState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      board_cards_(from.board_cards_),
      role_state_(from.role_state_),
      role_action_(from.role_action_),
      round_spent_(from.round_spent_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spent_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(max_spent_));
  // @@protoc_insertion_point(copy_constructor:Pb.DNotifyMatchState)
}

void DNotifyMatchState::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_spent_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(max_spent_));
  _cached_size_ = 0;
}

DNotifyMatchState::~DNotifyMatchState() {
  // @@protoc_insertion_point(destructor:Pb.DNotifyMatchState)
  SharedDtor();
}

void DNotifyMatchState::SharedDtor() {
}

void DNotifyMatchState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNotifyMatchState::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNotifyMatchState& DNotifyMatchState::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsDNotifyMatchState();
  return *internal_default_instance();
}

DNotifyMatchState* DNotifyMatchState::New(::google::protobuf::Arena* arena) const {
  DNotifyMatchState* n = new DNotifyMatchState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNotifyMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.DNotifyMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  board_cards_.Clear();
  role_state_.Clear();
  role_action_.Clear();
  round_spent_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_spent_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(max_spent_));
  _internal_metadata_.Clear();
}

bool DNotifyMatchState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.DNotifyMatchState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finished = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_spent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.DRoleState role_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.RoleAction role_action = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 round_spent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_spent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_round_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.DNotifyMatchState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.DNotifyMatchState)
  return false;
#undef DO_
}

void DNotifyMatchState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.DNotifyMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  // uint32 dealer_seat = 3;
  if (this->dealer_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dealer_seat(), output);
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_id(), output);
  }

  // uint32 round = 5;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->round(), output);
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->finished(), output);
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_spent(), output);
  }

  // repeated .Pb.AcpcCard board_cards = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->board_cards(static_cast<int>(i)), output);
  }

  // repeated .Pb.DRoleState role_state = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_state(static_cast<int>(i)), output);
  }

  // repeated .Pb.RoleAction role_action = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_action_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->role_action(static_cast<int>(i)), output);
  }

  // repeated int32 round_spent = 11;
  if (this->round_spent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _round_spent_cached_byte_size_));
  }
  for (int i = 0, n = this->round_spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->round_spent(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.DNotifyMatchState)
}

::google::protobuf::uint8* DNotifyMatchState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.DNotifyMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  // uint32 dealer_seat = 3;
  if (this->dealer_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dealer_seat(), target);
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_id(), target);
  }

  // uint32 round = 5;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->round(), target);
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->finished(), target);
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_spent(), target);
  }

  // repeated .Pb.AcpcCard board_cards = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.DRoleState role_state = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->role_state(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.RoleAction role_action = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_action_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->role_action(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 round_spent = 11;
  if (this->round_spent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _round_spent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->round_spent_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.DNotifyMatchState)
  return target;
}

size_t DNotifyMatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.DNotifyMatchState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard board_cards = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.DRoleState role_state = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->role_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_state(static_cast<int>(i)));
    }
  }

  // repeated .Pb.RoleAction role_action = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->role_action_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_action(static_cast<int>(i)));
    }
  }

  // repeated int32 round_spent = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->round_spent_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _round_spent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  // uint32 dealer_seat = 3;
  if (this->dealer_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_seat());
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  // uint32 round = 5;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished());
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_spent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNotifyMatchState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.DNotifyMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  const DNotifyMatchState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNotifyMatchState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.DNotifyMatchState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.DNotifyMatchState)
    MergeFrom(*source);
  }
}

void DNotifyMatchState::MergeFrom(const DNotifyMatchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.DNotifyMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  board_cards_.MergeFrom(from.board_cards_);
  role_state_.MergeFrom(from.role_state_);
  role_action_.MergeFrom(from.role_action_);
  round_spent_.MergeFrom(from.round_spent_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.dealer_seat() != 0) {
    set_dealer_seat(from.dealer_seat());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
}

void DNotifyMatchState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.DNotifyMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNotifyMatchState::CopyFrom(const DNotifyMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.DNotifyMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNotifyMatchState::IsInitialized() const {
  return true;
}

void DNotifyMatchState::Swap(DNotifyMatchState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNotifyMatchState::InternalSwap(DNotifyMatchState* other) {
  using std::swap;
  board_cards_.InternalSwap(&other->board_cards_);
  role_state_.InternalSwap(&other->role_state_);
  role_action_.InternalSwap(&other->role_action_);
  round_spent_.InternalSwap(&other->round_spent_);
  swap(room_id_, other->room_id_);
  swap(mode_, other->mode_);
  swap(dealer_seat_, other->dealer_seat_);
  swap(hand_id_, other->hand_id_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  swap(max_spent_, other->max_spent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNotifyMatchState::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BCRequestCardsReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BCRequestCardsReq::kRoomIdFieldNumber;
const int BCRequestCardsReq::kHandIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BCRequestCardsReq::BCRequestCardsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsBCRequestCardsReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.BCRequestCardsReq)
}
BCRequestCardsReq::BCRequestCardsReq(const BCRequestCardsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.BCRequestCardsReq)
}

void BCRequestCardsReq::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _cached_size_ = 0;
}

BCRequestCardsReq::~BCRequestCardsReq() {
  // @@protoc_insertion_point(destructor:Pb.BCRequestCardsReq)
  SharedDtor();
}

void BCRequestCardsReq::SharedDtor() {
}

void BCRequestCardsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCRequestCardsReq::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BCRequestCardsReq& BCRequestCardsReq::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsBCRequestCardsReq();
  return *internal_default_instance();
}

BCRequestCardsReq* BCRequestCardsReq::New(::google::protobuf::Arena* arena) const {
  BCRequestCardsReq* n = new BCRequestCardsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BCRequestCardsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.BCRequestCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _internal_metadata_.Clear();
}

bool BCRequestCardsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.BCRequestCardsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.BCRequestCardsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.BCRequestCardsReq)
  return false;
#undef DO_
}

void BCRequestCardsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.BCRequestCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hand_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.BCRequestCardsReq)
}

::google::protobuf::uint8* BCRequestCardsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.BCRequestCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hand_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.BCRequestCardsReq)
  return target;
}

size_t BCRequestCardsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.BCRequestCardsReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCRequestCardsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.BCRequestCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BCRequestCardsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BCRequestCardsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.BCRequestCardsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.BCRequestCardsReq)
    MergeFrom(*source);
  }
}

void BCRequestCardsReq::MergeFrom(const BCRequestCardsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.BCRequestCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
}

void BCRequestCardsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.BCRequestCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCRequestCardsReq::CopyFrom(const BCRequestCardsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.BCRequestCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCRequestCardsReq::IsInitialized() const {
  return true;
}

void BCRequestCardsReq::Swap(BCRequestCardsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BCRequestCardsReq::InternalSwap(BCRequestCardsReq* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(hand_id_, other->hand_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BCRequestCardsReq::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BCRequestCardsResp::InitAsDefaultInstance() {
}
void BCRequestCardsResp::clear_cards() {
  cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BCRequestCardsResp::kRoomIdFieldNumber;
const int BCRequestCardsResp::kHandIdFieldNumber;
const int BCRequestCardsResp::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BCRequestCardsResp::BCRequestCardsResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dealer_2eproto::InitDefaultsBCRequestCardsResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.BCRequestCardsResp)
}
BCRequestCardsResp::BCRequestCardsResp(const BCRequestCardsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cards_(from.cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.BCRequestCardsResp)
}

void BCRequestCardsResp::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _cached_size_ = 0;
}

BCRequestCardsResp::~BCRequestCardsResp() {
  // @@protoc_insertion_point(destructor:Pb.BCRequestCardsResp)
  SharedDtor();
}

void BCRequestCardsResp::SharedDtor() {
}

void BCRequestCardsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCRequestCardsResp::descriptor() {
  ::protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BCRequestCardsResp& BCRequestCardsResp::default_instance() {
  ::protobuf_dealer_2eproto::InitDefaultsBCRequestCardsResp();
  return *internal_default_instance();
}

BCRequestCardsResp* BCRequestCardsResp::New(::google::protobuf::Arena* arena) const {
  BCRequestCardsResp* n = new BCRequestCardsResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BCRequestCardsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.BCRequestCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _internal_metadata_.Clear();
}

bool BCRequestCardsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.BCRequestCardsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.BCRequestCardsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.BCRequestCardsResp)
  return false;
#undef DO_
}

void BCRequestCardsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.BCRequestCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hand_id(), output);
  }

  // repeated .Pb.AcpcCard cards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.BCRequestCardsResp)
}

::google::protobuf::uint8* BCRequestCardsResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.BCRequestCardsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hand_id(), target);
  }

  // repeated .Pb.AcpcCard cards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.BCRequestCardsResp)
  return target;
}

size_t BCRequestCardsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.BCRequestCardsResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard cards = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cards(static_cast<int>(i)));
    }
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 hand_id = 2;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCRequestCardsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.BCRequestCardsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const BCRequestCardsResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BCRequestCardsResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.BCRequestCardsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.BCRequestCardsResp)
    MergeFrom(*source);
  }
}

void BCRequestCardsResp::MergeFrom(const BCRequestCardsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.BCRequestCardsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
}

void BCRequestCardsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.BCRequestCardsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCRequestCardsResp::CopyFrom(const BCRequestCardsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.BCRequestCardsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCRequestCardsResp::IsInitialized() const {
  return true;
}

void BCRequestCardsResp::Swap(BCRequestCardsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BCRequestCardsResp::InternalSwap(BCRequestCardsResp* other) {
  using std::swap;
  cards_.InternalSwap(&other->cards_);
  swap(room_id_, other->room_id_);
  swap(hand_id_, other->hand_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BCRequestCardsResp::GetMetadata() const {
  protobuf_dealer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dealer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
