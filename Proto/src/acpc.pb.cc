// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpc.proto

#include "acpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class ReportLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportLog>
      _instance;
} _ReportLog_default_instance_;
class ReportLogsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportLogs>
      _instance;
} _ReportLogs_default_instance_;
class AudienceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Audience>
      _instance;
} _Audience_default_instance_;
class AcpcRoomCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcRoomCreate>
      _instance;
} _AcpcRoomCreate_default_instance_;
class AcpcEnterRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcEnterRoomReq>
      _instance;
} _AcpcEnterRoomReq_default_instance_;
class AcpcEnterRoomRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcEnterRoomResp>
      _instance;
} _AcpcEnterRoomResp_default_instance_;
class AcpcEnterRoomBroadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcEnterRoomBroad>
      _instance;
} _AcpcEnterRoomBroad_default_instance_;
class AcpcLeaveRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcLeaveRoomReq>
      _instance;
} _AcpcLeaveRoomReq_default_instance_;
class AcpcLeaveRoomRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcLeaveRoomResp>
      _instance;
} _AcpcLeaveRoomResp_default_instance_;
class AcpcLeaveRoomBroadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcLeaveRoomBroad>
      _instance;
} _AcpcLeaveRoomBroad_default_instance_;
class AcpcQueryCanJoinRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcQueryCanJoinRoom>
      _instance;
} _AcpcQueryCanJoinRoom_default_instance_;
class AcpcReadyReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcReadyReq>
      _instance;
} _AcpcReadyReq_default_instance_;
class AcpcReadyRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcReadyResp>
      _instance;
} _AcpcReadyResp_default_instance_;
class AcpcReadyBroadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcReadyBroad>
      _instance;
} _AcpcReadyBroad_default_instance_;
class AcpcMatchStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcMatchStart>
      _instance;
} _AcpcMatchStart_default_instance_;
class AcpcRoleActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcRoleAction>
      _instance;
} _AcpcRoleAction_default_instance_;
class AcpcBroadRoleActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcBroadRoleAction>
      _instance;
} _AcpcBroadRoleAction_default_instance_;
class AcpcMatchStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcMatchState>
      _instance;
} _AcpcMatchState_default_instance_;
class AcpcMatchScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcMatchScore>
      _instance;
} _AcpcMatchScore_default_instance_;
class AcpcForTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcpcForTest>
      _instance;
} _AcpcForTest_default_instance_;
class CheckRoomTimeoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckRoomTimeout>
      _instance;
} _CheckRoomTimeout_default_instance_;
class SetDealerModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetDealerMode>
      _instance;
} _SetDealerMode_default_instance_;
class RoleStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleState>
      _instance;
} _RoleState_default_instance_;
class RoleActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleAction>
      _instance;
} _RoleAction_default_instance_;
class QueryMatchStateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryMatchStateReq>
      _instance;
} _QueryMatchStateReq_default_instance_;
class QueryMatchStateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryMatchStateResp>
      _instance;
} _QueryMatchStateResp_default_instance_;
class RedisRoomBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisRoomBase>
      _instance;
} _RedisRoomBase_default_instance_;
class RedisRoomActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisRoomAction>
      _instance;
} _RedisRoomAction_default_instance_;
class RedisRoomReadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisRoomReady>
      _instance;
} _RedisRoomReady_default_instance_;
}  // namespace Pb
namespace protobuf_acpc_2eproto {
void InitDefaultsReportLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_ReportLog_default_instance_;
    new (ptr) ::Pb::ReportLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ReportLog::InitAsDefaultInstance();
}

void InitDefaultsReportLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReportLogImpl);
}

void InitDefaultsReportLogsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_acpc_2eproto::InitDefaultsReportLog();
  {
    void* ptr = &::Pb::_ReportLogs_default_instance_;
    new (ptr) ::Pb::ReportLogs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::ReportLogs::InitAsDefaultInstance();
}

void InitDefaultsReportLogs() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReportLogsImpl);
}

void InitDefaultsAudienceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_Audience_default_instance_;
    new (ptr) ::Pb::Audience();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::Audience::InitAsDefaultInstance();
}

void InitDefaultsAudience() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAudienceImpl);
}

void InitDefaultsAcpcRoomCreateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcRoomCreate_default_instance_;
    new (ptr) ::Pb::AcpcRoomCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcRoomCreate::InitAsDefaultInstance();
}

void InitDefaultsAcpcRoomCreate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcRoomCreateImpl);
}

void InitDefaultsAcpcEnterRoomReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcEnterRoomReq_default_instance_;
    new (ptr) ::Pb::AcpcEnterRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcEnterRoomReq::InitAsDefaultInstance();
}

void InitDefaultsAcpcEnterRoomReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcEnterRoomReqImpl);
}

void InitDefaultsAcpcEnterRoomRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsRoleInfo();
  protobuf_acpc_2eproto::InitDefaultsAudience();
  {
    void* ptr = &::Pb::_AcpcEnterRoomResp_default_instance_;
    new (ptr) ::Pb::AcpcEnterRoomResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcEnterRoomResp::InitAsDefaultInstance();
}

void InitDefaultsAcpcEnterRoomResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcEnterRoomRespImpl);
}

void InitDefaultsAcpcEnterRoomBroadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsRoleInfo();
  {
    void* ptr = &::Pb::_AcpcEnterRoomBroad_default_instance_;
    new (ptr) ::Pb::AcpcEnterRoomBroad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcEnterRoomBroad::InitAsDefaultInstance();
}

void InitDefaultsAcpcEnterRoomBroad() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcEnterRoomBroadImpl);
}

void InitDefaultsAcpcLeaveRoomReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcLeaveRoomReq_default_instance_;
    new (ptr) ::Pb::AcpcLeaveRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcLeaveRoomReq::InitAsDefaultInstance();
}

void InitDefaultsAcpcLeaveRoomReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcLeaveRoomReqImpl);
}

void InitDefaultsAcpcLeaveRoomRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcLeaveRoomResp_default_instance_;
    new (ptr) ::Pb::AcpcLeaveRoomResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcLeaveRoomResp::InitAsDefaultInstance();
}

void InitDefaultsAcpcLeaveRoomResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcLeaveRoomRespImpl);
}

void InitDefaultsAcpcLeaveRoomBroadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcLeaveRoomBroad_default_instance_;
    new (ptr) ::Pb::AcpcLeaveRoomBroad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcLeaveRoomBroad::InitAsDefaultInstance();
}

void InitDefaultsAcpcLeaveRoomBroad() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcLeaveRoomBroadImpl);
}

void InitDefaultsAcpcQueryCanJoinRoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsRoomCanJoin();
  {
    void* ptr = &::Pb::_AcpcQueryCanJoinRoom_default_instance_;
    new (ptr) ::Pb::AcpcQueryCanJoinRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcQueryCanJoinRoom::InitAsDefaultInstance();
}

void InitDefaultsAcpcQueryCanJoinRoom() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcQueryCanJoinRoomImpl);
}

void InitDefaultsAcpcReadyReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcReadyReq_default_instance_;
    new (ptr) ::Pb::AcpcReadyReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcReadyReq::InitAsDefaultInstance();
}

void InitDefaultsAcpcReadyReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcReadyReqImpl);
}

void InitDefaultsAcpcReadyRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcReadyResp_default_instance_;
    new (ptr) ::Pb::AcpcReadyResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcReadyResp::InitAsDefaultInstance();
}

void InitDefaultsAcpcReadyResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcReadyRespImpl);
}

void InitDefaultsAcpcReadyBroadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcReadyBroad_default_instance_;
    new (ptr) ::Pb::AcpcReadyBroad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcReadyBroad::InitAsDefaultInstance();
}

void InitDefaultsAcpcReadyBroad() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcReadyBroadImpl);
}

void InitDefaultsAcpcMatchStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcMatchStart_default_instance_;
    new (ptr) ::Pb::AcpcMatchStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcMatchStart::InitAsDefaultInstance();
}

void InitDefaultsAcpcMatchStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcMatchStartImpl);
}

void InitDefaultsAcpcRoleActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcRoleAction_default_instance_;
    new (ptr) ::Pb::AcpcRoleAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcRoleAction::InitAsDefaultInstance();
}

void InitDefaultsAcpcRoleAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcRoleActionImpl);
}

void InitDefaultsAcpcBroadRoleActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcBroadRoleAction_default_instance_;
    new (ptr) ::Pb::AcpcBroadRoleAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcBroadRoleAction::InitAsDefaultInstance();
}

void InitDefaultsAcpcBroadRoleAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcBroadRoleActionImpl);
}

void InitDefaultsAcpcMatchStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcState();
  protobuf_acpc_2eproto::InitDefaultsAcpcRoleAction();
  {
    void* ptr = &::Pb::_AcpcMatchState_default_instance_;
    new (ptr) ::Pb::AcpcMatchState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcMatchState::InitAsDefaultInstance();
}

void InitDefaultsAcpcMatchState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcMatchStateImpl);
}

void InitDefaultsAcpcMatchScoreImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsRoleScore();
  {
    void* ptr = &::Pb::_AcpcMatchScore_default_instance_;
    new (ptr) ::Pb::AcpcMatchScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcMatchScore::InitAsDefaultInstance();
}

void InitDefaultsAcpcMatchScore() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcMatchScoreImpl);
}

void InitDefaultsAcpcForTestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_AcpcForTest_default_instance_;
    new (ptr) ::Pb::AcpcForTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::AcpcForTest::InitAsDefaultInstance();
}

void InitDefaultsAcpcForTest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcpcForTestImpl);
}

void InitDefaultsCheckRoomTimeoutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_CheckRoomTimeout_default_instance_;
    new (ptr) ::Pb::CheckRoomTimeout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::CheckRoomTimeout::InitAsDefaultInstance();
}

void InitDefaultsCheckRoomTimeout() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCheckRoomTimeoutImpl);
}

void InitDefaultsSetDealerModeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_SetDealerMode_default_instance_;
    new (ptr) ::Pb::SetDealerMode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::SetDealerMode::InitAsDefaultInstance();
}

void InitDefaultsSetDealerMode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetDealerModeImpl);
}

void InitDefaultsRoleStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_RoleState_default_instance_;
    new (ptr) ::Pb::RoleState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoleState::InitAsDefaultInstance();
}

void InitDefaultsRoleState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleStateImpl);
}

void InitDefaultsRoleActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RoleAction_default_instance_;
    new (ptr) ::Pb::RoleAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RoleAction::InitAsDefaultInstance();
}

void InitDefaultsRoleAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleActionImpl);
}

void InitDefaultsQueryMatchStateReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_QueryMatchStateReq_default_instance_;
    new (ptr) ::Pb::QueryMatchStateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::QueryMatchStateReq::InitAsDefaultInstance();
}

void InitDefaultsQueryMatchStateReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryMatchStateReqImpl);
}

void InitDefaultsQueryMatchStateRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  protobuf_acpc_2eproto::InitDefaultsRoleState();
  protobuf_acpc_2eproto::InitDefaultsRoleAction();
  {
    void* ptr = &::Pb::_QueryMatchStateResp_default_instance_;
    new (ptr) ::Pb::QueryMatchStateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::QueryMatchStateResp::InitAsDefaultInstance();
}

void InitDefaultsQueryMatchStateResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryMatchStateRespImpl);
}

void InitDefaultsRedisRoomBaseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_RedisRoomBase_default_instance_;
    new (ptr) ::Pb::RedisRoomBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RedisRoomBase::InitAsDefaultInstance();
}

void InitDefaultsRedisRoomBase() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedisRoomBaseImpl);
}

void InitDefaultsRedisRoomActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsAcpcRound();
  protobuf_system_2eproto::InitDefaultsAcpcCard();
  {
    void* ptr = &::Pb::_RedisRoomAction_default_instance_;
    new (ptr) ::Pb::RedisRoomAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RedisRoomAction::InitAsDefaultInstance();
}

void InitDefaultsRedisRoomAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedisRoomActionImpl);
}

void InitDefaultsRedisRoomReadyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_2eproto::InitDefaultsRoomRole();
  {
    void* ptr = &::Pb::_RedisRoomReady_default_instance_;
    new (ptr) ::Pb::RedisRoomReady();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::RedisRoomReady::InitAsDefaultInstance();
}

void InitDefaultsRedisRoomReady() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedisRoomReadyImpl);
}

::google::protobuf::Metadata file_level_metadata[29];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLog, tv_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLog, tv_usec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLog, opt_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLog, opt_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLog, before_pot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::ReportLogs, report_logs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::Audience, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::Audience, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::Audience, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::Audience, role_img_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, room_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, acpc_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, acpc_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, brain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoomCreate, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, sophia_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, rm_test_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomReq, join_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, self_role_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, role_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, audience_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, rm_test_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomResp, hand_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomBroad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomBroad, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomBroad, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomBroad, enter_role_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcEnterRoomBroad, rm_test_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomReq, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomResp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomResp, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomBroad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomBroad, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomBroad, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcLeaveRoomBroad, leave_role_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcQueryCanJoinRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcQueryCanJoinRoom, room_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyReq, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyReq, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyReq, cfr_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyReq, dealer_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyResp, dealer_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyResp, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyBroad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyBroad, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyBroad, ready_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcReadyBroad, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchStart, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchStart, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchStart, hand_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, action_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcRoleAction, robot_cfr_model_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcBroadRoleAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcBroadRoleAction, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcBroadRoleAction, action_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcBroadRoleAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcBroadRoleAction, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcBroadRoleAction, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, robot_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, cfr_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, robot_delay_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchState, robot_cfr_model_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchScore, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchScore, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcMatchScore, role_scores_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcForTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcForTest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcForTest, robot_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::AcpcForTest, game_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CheckRoomTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::CheckRoomTimeout, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::SetDealerMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::SetDealerMode, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::SetDealerMode, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::SetDealerMode, dealer_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleState, spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleState, fold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleState, hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleState, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleState, turn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleAction, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleAction, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RoleAction, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateReq, role_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, dealer_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, board_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, allow_raise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, role_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::QueryMatchStateResp, role_action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, robot_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, sophia_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, dealer_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, alloc_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomBase, expire_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, max_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, min_nolimit_raise_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, round_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, fold_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, board_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, round_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, dealer_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, action_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, action_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomAction, report_logs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, role_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, is_running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, p0seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, tcards_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::RedisRoomReady, cfr_model_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::ReportLog)},
  { 10, -1, sizeof(::Pb::ReportLogs)},
  { 16, -1, sizeof(::Pb::Audience)},
  { 24, -1, sizeof(::Pb::AcpcRoomCreate)},
  { 40, -1, sizeof(::Pb::AcpcEnterRoomReq)},
  { 51, -1, sizeof(::Pb::AcpcEnterRoomResp)},
  { 64, -1, sizeof(::Pb::AcpcEnterRoomBroad)},
  { 73, -1, sizeof(::Pb::AcpcLeaveRoomReq)},
  { 80, -1, sizeof(::Pb::AcpcLeaveRoomResp)},
  { 88, -1, sizeof(::Pb::AcpcLeaveRoomBroad)},
  { 96, -1, sizeof(::Pb::AcpcQueryCanJoinRoom)},
  { 102, -1, sizeof(::Pb::AcpcReadyReq)},
  { 111, -1, sizeof(::Pb::AcpcReadyResp)},
  { 119, -1, sizeof(::Pb::AcpcReadyBroad)},
  { 127, -1, sizeof(::Pb::AcpcMatchStart)},
  { 135, -1, sizeof(::Pb::AcpcRoleAction)},
  { 146, -1, sizeof(::Pb::AcpcBroadRoleAction)},
  { 156, -1, sizeof(::Pb::AcpcMatchState)},
  { 168, -1, sizeof(::Pb::AcpcMatchScore)},
  { 176, -1, sizeof(::Pb::AcpcForTest)},
  { 184, -1, sizeof(::Pb::CheckRoomTimeout)},
  { 190, -1, sizeof(::Pb::SetDealerMode)},
  { 198, -1, sizeof(::Pb::RoleState)},
  { 208, -1, sizeof(::Pb::RoleAction)},
  { 217, -1, sizeof(::Pb::QueryMatchStateReq)},
  { 223, -1, sizeof(::Pb::QueryMatchStateResp)},
  { 239, -1, sizeof(::Pb::RedisRoomBase)},
  { 251, -1, sizeof(::Pb::RedisRoomAction)},
  { 271, -1, sizeof(::Pb::RedisRoomReady)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ReportLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_ReportLogs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_Audience_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcRoomCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcEnterRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcEnterRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcEnterRoomBroad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcLeaveRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcLeaveRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcLeaveRoomBroad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcQueryCanJoinRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcReadyResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcReadyBroad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcMatchStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcRoleAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcBroadRoleAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcMatchState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcMatchScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_AcpcForTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_CheckRoomTimeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_SetDealerMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoleState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RoleAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_QueryMatchStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_QueryMatchStateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RedisRoomBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RedisRoomAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_RedisRoomReady_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "acpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nacpc.proto\022\002Pb\032\014system.proto\"f\n\tReport"
      "Log\022\016\n\006tv_sec\030\001 \001(\r\022\017\n\007tv_usec\030\002 \001(\r\022\020\n\010"
      "opt_time\030\003 \001(\r\022\022\n\nopt_source\030\004 \001(\r\022\022\n\nbe"
      "fore_pot\030\005 \001(\r\"0\n\nReportLogs\022\"\n\013report_l"
      "ogs\030\001 \003(\0132\r.Pb.ReportLog\"@\n\010Audience\022\017\n\007"
      "role_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\020\n\010role"
      "_img\030\003 \001(\t\"\330\001\n\016AcpcRoomCreate\022\017\n\007role_id"
      "\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\021\n\troom_name\030\003"
      " \001(\t\022\021\n\tgame_type\030\004 \001(\r\022\022\n\ndifficulty\030\005 "
      "\001(\r\022\020\n\010password\030\006 \001(\t\022\017\n\007version\030\007 \001(\t\022\017"
      "\n\007acpc_ip\030\010 \001(\t\022\021\n\tacpc_port\030\t \001(\r\022\020\n\010br"
      "ain_id\030\n \001(\r\022\017\n\007room_id\030\013 \001(\004\"\206\001\n\020AcpcEn"
      "terRoomReq\022\017\n\007room_id\030\001 \001(\004\022\017\n\007role_id\030\002"
      " \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\023\n\013sophia_name\030\004"
      " \001(\t\022\025\n\rrm_test_param\030\005 \001(\t\022\021\n\tjoin_type"
      "\030\006 \001(\r\"\315\001\n\021AcpcEnterRoomResp\022\017\n\007room_id\030"
      "\001 \001(\004\022\017\n\007role_id\030\002 \001(\r\022\021\n\tgame_type\030\003 \001("
      "\r\022\025\n\rself_role_pos\030\004 \001(\r\022\037\n\trole_info\030\005 "
      "\003(\0132\014.Pb.RoleInfo\022#\n\raudience_list\030\006 \003(\013"
      "2\014.Pb.Audience\022\025\n\rrm_test_param\030\007 \001(\t\022\017\n"
      "\007hand_id\030\010 \001(\r\"t\n\022AcpcEnterRoomBroad\022\017\n\007"
      "room_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\r\022%\n\017enter_"
      "role_info\030\003 \001(\0132\014.Pb.RoleInfo\022\025\n\rrm_test"
      "_param\030\004 \001(\t\"4\n\020AcpcLeaveRoomReq\022\017\n\007role"
      "_id\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\004\"E\n\021AcpcLeaveR"
      "oomResp\022\017\n\007role_id\030\001 \001(\r\022\017\n\007room_id\030\002 \001("
      "\004\022\016\n\006reason\030\003 \001(\r\"M\n\022AcpcLeaveRoomBroad\022"
      "\017\n\007role_id\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\004\022\025\n\rlea"
      "ve_role_id\030\003 \001(\r\":\n\024AcpcQueryCanJoinRoom"
      "\022\"\n\troom_list\030\001 \003(\0132\017.Pb.RoomCanJoin\"X\n\014"
      "AcpcReadyReq\022\017\n\007role_id\030\001 \001(\r\022\017\n\007room_id"
      "\030\002 \001(\004\022\021\n\tcfr_model\030\003 \001(\t\022\023\n\013dealer_mode"
      "\030\004 \001(\r\"F\n\rAcpcReadyResp\022\017\n\007role_id\030\001 \001(\r"
      "\022\023\n\013dealer_mode\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\004\"I"
      "\n\016AcpcReadyBroad\022\017\n\007role_id\030\001 \001(\r\022\025\n\rrea"
      "dy_role_id\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\004\"C\n\016Acp"
      "cMatchStart\022\017\n\007room_id\030\001 \001(\004\022\017\n\007role_id\030"
      "\002 \001(\r\022\017\n\007hand_id\030\003 \001(\r\"\204\001\n\016AcpcRoleActio"
      "n\022\017\n\007role_id\030\001 \001(\r\022\016\n\006action\030\002 \001(\r\022\014\n\004si"
      "ze\030\003 \001(\r\022\023\n\013action_rate\030\004 \001(\t\022\017\n\007room_id"
      "\030\005 \001(\004\022\035\n\025robot_cfr_model_param\030\006 \001(\t\"m\n"
      "\023AcpcBroadRoleAction\022\017\n\007role_id\030\001 \001(\r\022\026\n"
      "\016action_role_id\030\002 \001(\r\022\016\n\006action\030\003 \001(\r\022\014\n"
      "\004size\030\004 \001(\r\022\017\n\007room_id\030\005 \001(\004\"\306\001\n\016AcpcMat"
      "chState\022\017\n\007room_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001("
      "\r\022\034\n\005state\030\003 \001(\0132\r.Pb.AcpcState\022(\n\014robot"
      "_action\030\004 \001(\0132\022.Pb.AcpcRoleAction\022\021\n\tcfr"
      "_model\030\005 \001(\t\022\030\n\020robot_delay_flag\030\006 \001(\r\022\035"
      "\n\025robot_cfr_model_param\030\007 \001(\t\"V\n\016AcpcMat"
      "chScore\022\017\n\007room_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001("
      "\r\022\"\n\013role_scores\030\003 \003(\0132\r.Pb.RoleScore\"E\n"
      "\013AcpcForTest\022\020\n\010password\030\001 \001(\t\022\021\n\trobot_"
      "cnt\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\"#\n\020CheckRoo"
      "mTimeout\022\017\n\007room_id\030\001 \001(\004\"F\n\rSetDealerMo"
      "de\022\017\n\007room_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\r\022\023\n\013"
      "dealer_mode\030\003 \001(\r\"g\n\tRoleState\022\r\n\005spent\030"
      "\001 \001(\r\022\014\n\004fold\030\002 \001(\r\022 \n\nhole_cards\030\003 \003(\0132"
      "\014.Pb.AcpcCard\022\r\n\005Score\030\004 \001(\005\022\014\n\004turn\030\005 \001"
      "(\005\"E\n\nRoleAction\022\014\n\004seat\030\001 \001(\r\022\r\n\005round\030"
      "\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\014\n\004size\030\004 \001(\005\"%\n\022Que"
      "ryMatchStateReq\022\017\n\007role_id\030\001 \001(\r\"\224\002\n\023Que"
      "ryMatchStateResp\022\017\n\007room_id\030\001 \001(\004\022\026\n\016dea"
      "ler_role_id\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\017\n\007ha"
      "nd_id\030\004 \001(\r\022\r\n\005round\030\005 \001(\r\022\020\n\010finished\030\006"
      " \001(\r\022\021\n\tmax_spent\030\007 \001(\r\022!\n\013board_cards\030\010"
      " \003(\0132\014.Pb.AcpcCard\022\023\n\013allow_raise\030\t \003(\r\022"
      "!\n\nrole_state\030\n \003(\0132\r.Pb.RoleState\022#\n\013ro"
      "le_action\030\013 \003(\0132\016.Pb.RoleAction\"\233\001\n\rRedi"
      "sRoomBase\022\017\n\007room_id\030\001 \001(\004\022\021\n\tgame_type\030"
      "\002 \001(\r\022\023\n\013robot_param\030\003 \001(\t\022\023\n\013sophia_nam"
      "e\030\004 \001(\t\022\023\n\013dealer_mode\030\005 \001(\r\022\022\n\nalloc_se"
      "at\030\006 \001(\r\022\023\n\013expire_time\030\007 \001(\r\"\356\002\n\017RedisR"
      "oomAction\022\017\n\007hand_id\030\001 \001(\005\022\021\n\tmax_spent\030"
      "\002 \001(\005\022\034\n\024min_nolimit_raise_to\030\003 \001(\005\022\r\n\005s"
      "pent\030\004 \003(\005\022$\n\rround_actions\030\005 \003(\0132\r.Pb.A"
      "cpcRound\022\r\n\005round\030\006 \001(\005\022\020\n\010finished\030\007 \001("
      "\005\022\024\n\014fold_players\030\010 \003(\005\022!\n\013board_cards\030\t"
      " \003(\0132\014.Pb.AcpcCard\022 \n\nhole_cards\030\n \003(\0132\014"
      ".Pb.AcpcCard\022\023\n\013round_spent\030\013 \003(\005\022\024\n\014dea"
      "ler_round\030\014 \001(\r\022\023\n\013action_time\030\r \001(\r\022\023\n\013"
      "action_rate\030\016 \001(\t\022\023\n\013report_logs\030\017 \001(\t\"\221"
      "\001\n\016RedisRoomReady\022\037\n\trole_info\030\001 \003(\0132\014.P"
      "b.RoomRole\022\022\n\nis_running\030\002 \001(\010\022\021\n\tgame_t"
      "ime\030\003 \001(\r\022\016\n\006p0seat\030\004 \001(\r\022\024\n\014tcards_inde"
      "x\030\005 \001(\r\022\021\n\tcfr_model\030\006 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "acpc.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_acpc_2eproto
namespace Pb {

// ===================================================================

void ReportLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportLog::kTvSecFieldNumber;
const int ReportLog::kTvUsecFieldNumber;
const int ReportLog::kOptTimeFieldNumber;
const int ReportLog::kOptSourceFieldNumber;
const int ReportLog::kBeforePotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportLog::ReportLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsReportLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ReportLog)
}
ReportLog::ReportLog(const ReportLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tv_sec_, &from.tv_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&before_pot_) -
    reinterpret_cast<char*>(&tv_sec_)) + sizeof(before_pot_));
  // @@protoc_insertion_point(copy_constructor:Pb.ReportLog)
}

void ReportLog::SharedCtor() {
  ::memset(&tv_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&before_pot_) -
      reinterpret_cast<char*>(&tv_sec_)) + sizeof(before_pot_));
  _cached_size_ = 0;
}

ReportLog::~ReportLog() {
  // @@protoc_insertion_point(destructor:Pb.ReportLog)
  SharedDtor();
}

void ReportLog::SharedDtor() {
}

void ReportLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportLog::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportLog& ReportLog::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsReportLog();
  return *internal_default_instance();
}

ReportLog* ReportLog::New(::google::protobuf::Arena* arena) const {
  ReportLog* n = new ReportLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportLog::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ReportLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tv_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&before_pot_) -
      reinterpret_cast<char*>(&tv_sec_)) + sizeof(before_pot_));
  _internal_metadata_.Clear();
}

bool ReportLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ReportLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tv_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tv_usec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 opt_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 opt_source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 before_pot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &before_pot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ReportLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ReportLog)
  return false;
#undef DO_
}

void ReportLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ReportLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tv_sec = 1;
  if (this->tv_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tv_sec(), output);
  }

  // uint32 tv_usec = 2;
  if (this->tv_usec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tv_usec(), output);
  }

  // uint32 opt_time = 3;
  if (this->opt_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opt_time(), output);
  }

  // uint32 opt_source = 4;
  if (this->opt_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opt_source(), output);
  }

  // uint32 before_pot = 5;
  if (this->before_pot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->before_pot(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ReportLog)
}

::google::protobuf::uint8* ReportLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ReportLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tv_sec = 1;
  if (this->tv_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tv_sec(), target);
  }

  // uint32 tv_usec = 2;
  if (this->tv_usec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tv_usec(), target);
  }

  // uint32 opt_time = 3;
  if (this->opt_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opt_time(), target);
  }

  // uint32 opt_source = 4;
  if (this->opt_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opt_source(), target);
  }

  // uint32 before_pot = 5;
  if (this->before_pot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->before_pot(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ReportLog)
  return target;
}

size_t ReportLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ReportLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 tv_sec = 1;
  if (this->tv_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tv_sec());
  }

  // uint32 tv_usec = 2;
  if (this->tv_usec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tv_usec());
  }

  // uint32 opt_time = 3;
  if (this->opt_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opt_time());
  }

  // uint32 opt_source = 4;
  if (this->opt_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opt_source());
  }

  // uint32 before_pot = 5;
  if (this->before_pot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->before_pot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ReportLog)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ReportLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ReportLog)
    MergeFrom(*source);
  }
}

void ReportLog::MergeFrom(const ReportLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ReportLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tv_sec() != 0) {
    set_tv_sec(from.tv_sec());
  }
  if (from.tv_usec() != 0) {
    set_tv_usec(from.tv_usec());
  }
  if (from.opt_time() != 0) {
    set_opt_time(from.opt_time());
  }
  if (from.opt_source() != 0) {
    set_opt_source(from.opt_source());
  }
  if (from.before_pot() != 0) {
    set_before_pot(from.before_pot());
  }
}

void ReportLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ReportLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLog::CopyFrom(const ReportLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ReportLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLog::IsInitialized() const {
  return true;
}

void ReportLog::Swap(ReportLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportLog::InternalSwap(ReportLog* other) {
  using std::swap;
  swap(tv_sec_, other->tv_sec_);
  swap(tv_usec_, other->tv_usec_);
  swap(opt_time_, other->opt_time_);
  swap(opt_source_, other->opt_source_);
  swap(before_pot_, other->before_pot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportLog::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportLogs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportLogs::kReportLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportLogs::ReportLogs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsReportLogs();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.ReportLogs)
}
ReportLogs::ReportLogs(const ReportLogs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      report_logs_(from.report_logs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb.ReportLogs)
}

void ReportLogs::SharedCtor() {
  _cached_size_ = 0;
}

ReportLogs::~ReportLogs() {
  // @@protoc_insertion_point(destructor:Pb.ReportLogs)
  SharedDtor();
}

void ReportLogs::SharedDtor() {
}

void ReportLogs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportLogs::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportLogs& ReportLogs::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsReportLogs();
  return *internal_default_instance();
}

ReportLogs* ReportLogs::New(::google::protobuf::Arena* arena) const {
  ReportLogs* n = new ReportLogs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.ReportLogs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_logs_.Clear();
  _internal_metadata_.Clear();
}

bool ReportLogs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.ReportLogs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.ReportLog report_logs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_report_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.ReportLogs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.ReportLogs)
  return false;
#undef DO_
}

void ReportLogs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.ReportLogs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.ReportLog report_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->report_logs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.ReportLogs)
}

::google::protobuf::uint8* ReportLogs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.ReportLogs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.ReportLog report_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->report_logs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.ReportLogs)
  return target;
}

size_t ReportLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.ReportLogs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.ReportLog report_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->report_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->report_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLogs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.ReportLogs)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportLogs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportLogs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.ReportLogs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.ReportLogs)
    MergeFrom(*source);
  }
}

void ReportLogs::MergeFrom(const ReportLogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.ReportLogs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  report_logs_.MergeFrom(from.report_logs_);
}

void ReportLogs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.ReportLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLogs::CopyFrom(const ReportLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.ReportLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLogs::IsInitialized() const {
  return true;
}

void ReportLogs::Swap(ReportLogs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportLogs::InternalSwap(ReportLogs* other) {
  using std::swap;
  report_logs_.InternalSwap(&other->report_logs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportLogs::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Audience::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Audience::kRoleIdFieldNumber;
const int Audience::kRoleNameFieldNumber;
const int Audience::kRoleImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Audience::Audience()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAudience();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.Audience)
}
Audience::Audience(const Audience& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_img().size() > 0) {
    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.Audience)
}

void Audience::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_id_ = 0u;
  _cached_size_ = 0;
}

Audience::~Audience() {
  // @@protoc_insertion_point(destructor:Pb.Audience)
  SharedDtor();
}

void Audience::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Audience::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Audience::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Audience& Audience::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAudience();
  return *internal_default_instance();
}

Audience* Audience::New(::google::protobuf::Arena* arena) const {
  Audience* n = new Audience;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Audience::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.Audience)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Audience::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.Audience)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.Audience.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_img = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_img()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_img().data(), static_cast<int>(this->role_img().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.Audience.role_img"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.Audience)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.Audience)
  return false;
#undef DO_
}

void Audience::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.Audience)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.Audience.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // string role_img = 3;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.Audience.role_img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->role_img(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.Audience)
}

::google::protobuf::uint8* Audience::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.Audience)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.Audience.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // string role_img = 3;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.Audience.role_img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_img(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.Audience)
  return target;
}

size_t Audience::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.Audience)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string role_img = 3;
  if (this->role_img().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_img());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Audience::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.Audience)
  GOOGLE_DCHECK_NE(&from, this);
  const Audience* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Audience>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.Audience)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.Audience)
    MergeFrom(*source);
  }
}

void Audience::MergeFrom(const Audience& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.Audience)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_img().size() > 0) {

    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void Audience::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.Audience)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audience::CopyFrom(const Audience& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.Audience)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audience::IsInitialized() const {
  return true;
}

void Audience::Swap(Audience* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Audience::InternalSwap(Audience* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  role_img_.Swap(&other->role_img_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Audience::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcRoomCreate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcRoomCreate::kRoleIdFieldNumber;
const int AcpcRoomCreate::kRoleNameFieldNumber;
const int AcpcRoomCreate::kRoomNameFieldNumber;
const int AcpcRoomCreate::kGameTypeFieldNumber;
const int AcpcRoomCreate::kDifficultyFieldNumber;
const int AcpcRoomCreate::kPasswordFieldNumber;
const int AcpcRoomCreate::kVersionFieldNumber;
const int AcpcRoomCreate::kAcpcIpFieldNumber;
const int AcpcRoomCreate::kAcpcPortFieldNumber;
const int AcpcRoomCreate::kBrainIdFieldNumber;
const int AcpcRoomCreate::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcRoomCreate::AcpcRoomCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcRoomCreate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcRoomCreate)
}
AcpcRoomCreate::AcpcRoomCreate(const AcpcRoomCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  acpc_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acpc_ip().size() > 0) {
    acpc_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acpc_ip_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&brain_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(brain_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcRoomCreate)
}

void AcpcRoomCreate::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acpc_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brain_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(brain_id_));
  _cached_size_ = 0;
}

AcpcRoomCreate::~AcpcRoomCreate() {
  // @@protoc_insertion_point(destructor:Pb.AcpcRoomCreate)
  SharedDtor();
}

void AcpcRoomCreate::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acpc_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcpcRoomCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcRoomCreate::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcRoomCreate& AcpcRoomCreate::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcRoomCreate();
  return *internal_default_instance();
}

AcpcRoomCreate* AcpcRoomCreate::New(::google::protobuf::Arena* arena) const {
  AcpcRoomCreate* n = new AcpcRoomCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcRoomCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcRoomCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acpc_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brain_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(brain_id_));
  _internal_metadata_.Clear();
}

bool AcpcRoomCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcRoomCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoomCreate.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoomCreate.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoomCreate.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoomCreate.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string acpc_ip = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acpc_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acpc_ip().data(), static_cast<int>(this->acpc_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoomCreate.acpc_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 acpc_port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acpc_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 brain_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcRoomCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcRoomCreate)
  return false;
#undef DO_
}

void AcpcRoomCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcRoomCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_name(), output);
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_type(), output);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficulty(), output);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  // string acpc_ip = 8;
  if (this->acpc_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acpc_ip().data(), static_cast<int>(this->acpc_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.acpc_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->acpc_ip(), output);
  }

  // uint32 acpc_port = 9;
  if (this->acpc_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->acpc_port(), output);
  }

  // uint32 brain_id = 10;
  if (this->brain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->brain_id(), output);
  }

  // uint64 room_id = 11;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcRoomCreate)
}

::google::protobuf::uint8* AcpcRoomCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcRoomCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_type(), target);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->difficulty(), target);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  // string acpc_ip = 8;
  if (this->acpc_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acpc_ip().data(), static_cast<int>(this->acpc_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoomCreate.acpc_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->acpc_ip(), target);
  }

  // uint32 acpc_port = 9;
  if (this->acpc_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->acpc_port(), target);
  }

  // uint32 brain_id = 10;
  if (this->brain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->brain_id(), target);
  }

  // uint64 room_id = 11;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcRoomCreate)
  return target;
}

size_t AcpcRoomCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcRoomCreate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // string password = 6;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string acpc_ip = 8;
  if (this->acpc_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acpc_ip());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 game_type = 4;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // uint32 acpc_port = 9;
  if (this->acpc_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acpc_port());
  }

  // uint64 room_id = 11;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 brain_id = 10;
  if (this->brain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brain_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcRoomCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcRoomCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcRoomCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcRoomCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcRoomCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcRoomCreate)
    MergeFrom(*source);
  }
}

void AcpcRoomCreate::MergeFrom(const AcpcRoomCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcRoomCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.acpc_ip().size() > 0) {

    acpc_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acpc_ip_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.acpc_port() != 0) {
    set_acpc_port(from.acpc_port());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.brain_id() != 0) {
    set_brain_id(from.brain_id());
  }
}

void AcpcRoomCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcRoomCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcRoomCreate::CopyFrom(const AcpcRoomCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcRoomCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcRoomCreate::IsInitialized() const {
  return true;
}

void AcpcRoomCreate::Swap(AcpcRoomCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcRoomCreate::InternalSwap(AcpcRoomCreate* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  room_name_.Swap(&other->room_name_);
  password_.Swap(&other->password_);
  version_.Swap(&other->version_);
  acpc_ip_.Swap(&other->acpc_ip_);
  swap(role_id_, other->role_id_);
  swap(game_type_, other->game_type_);
  swap(difficulty_, other->difficulty_);
  swap(acpc_port_, other->acpc_port_);
  swap(room_id_, other->room_id_);
  swap(brain_id_, other->brain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcRoomCreate::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcEnterRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcEnterRoomReq::kRoomIdFieldNumber;
const int AcpcEnterRoomReq::kRoleIdFieldNumber;
const int AcpcEnterRoomReq::kGameTypeFieldNumber;
const int AcpcEnterRoomReq::kSophiaNameFieldNumber;
const int AcpcEnterRoomReq::kRmTestParamFieldNumber;
const int AcpcEnterRoomReq::kJoinTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcEnterRoomReq::AcpcEnterRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcEnterRoomReq)
}
AcpcEnterRoomReq::AcpcEnterRoomReq(const AcpcEnterRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sophia_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sophia_name().size() > 0) {
    sophia_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sophia_name_);
  }
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rm_test_param().size() > 0) {
    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(join_type_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcEnterRoomReq)
}

void AcpcEnterRoomReq::SharedCtor() {
  sophia_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(join_type_));
  _cached_size_ = 0;
}

AcpcEnterRoomReq::~AcpcEnterRoomReq() {
  // @@protoc_insertion_point(destructor:Pb.AcpcEnterRoomReq)
  SharedDtor();
}

void AcpcEnterRoomReq::SharedDtor() {
  sophia_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rm_test_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcpcEnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcEnterRoomReq::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcEnterRoomReq& AcpcEnterRoomReq::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomReq();
  return *internal_default_instance();
}

AcpcEnterRoomReq* AcpcEnterRoomReq::New(::google::protobuf::Arena* arena) const {
  AcpcEnterRoomReq* n = new AcpcEnterRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcEnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sophia_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(join_type_));
  _internal_metadata_.Clear();
}

bool AcpcEnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcEnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sophia_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sophia_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sophia_name().data(), static_cast<int>(this->sophia_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcEnterRoomReq.sophia_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rm_test_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rm_test_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcEnterRoomReq.rm_test_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 join_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcEnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcEnterRoomReq)
  return false;
#undef DO_
}

void AcpcEnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // string sophia_name = 4;
  if (this->sophia_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sophia_name().data(), static_cast<int>(this->sophia_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomReq.sophia_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sophia_name(), output);
  }

  // string rm_test_param = 5;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomReq.rm_test_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rm_test_param(), output);
  }

  // uint32 join_type = 6;
  if (this->join_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->join_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcEnterRoomReq)
}

::google::protobuf::uint8* AcpcEnterRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcEnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // string sophia_name = 4;
  if (this->sophia_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sophia_name().data(), static_cast<int>(this->sophia_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomReq.sophia_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sophia_name(), target);
  }

  // string rm_test_param = 5;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomReq.rm_test_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rm_test_param(), target);
  }

  // uint32 join_type = 6;
  if (this->join_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->join_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcEnterRoomReq)
  return target;
}

size_t AcpcEnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcEnterRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sophia_name = 4;
  if (this->sophia_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sophia_name());
  }

  // string rm_test_param = 5;
  if (this->rm_test_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rm_test_param());
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 join_type = 6;
  if (this->join_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->join_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcEnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcEnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcEnterRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcEnterRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcEnterRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcEnterRoomReq)
    MergeFrom(*source);
  }
}

void AcpcEnterRoomReq::MergeFrom(const AcpcEnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcEnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sophia_name().size() > 0) {

    sophia_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sophia_name_);
  }
  if (from.rm_test_param().size() > 0) {

    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.join_type() != 0) {
    set_join_type(from.join_type());
  }
}

void AcpcEnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcEnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcEnterRoomReq::CopyFrom(const AcpcEnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcEnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcEnterRoomReq::IsInitialized() const {
  return true;
}

void AcpcEnterRoomReq::Swap(AcpcEnterRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcEnterRoomReq::InternalSwap(AcpcEnterRoomReq* other) {
  using std::swap;
  sophia_name_.Swap(&other->sophia_name_);
  rm_test_param_.Swap(&other->rm_test_param_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(game_type_, other->game_type_);
  swap(join_type_, other->join_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcEnterRoomReq::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcEnterRoomResp::InitAsDefaultInstance() {
}
void AcpcEnterRoomResp::clear_role_info() {
  role_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcEnterRoomResp::kRoomIdFieldNumber;
const int AcpcEnterRoomResp::kRoleIdFieldNumber;
const int AcpcEnterRoomResp::kGameTypeFieldNumber;
const int AcpcEnterRoomResp::kSelfRolePosFieldNumber;
const int AcpcEnterRoomResp::kRoleInfoFieldNumber;
const int AcpcEnterRoomResp::kAudienceListFieldNumber;
const int AcpcEnterRoomResp::kRmTestParamFieldNumber;
const int AcpcEnterRoomResp::kHandIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcEnterRoomResp::AcpcEnterRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcEnterRoomResp)
}
AcpcEnterRoomResp::AcpcEnterRoomResp(const AcpcEnterRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_info_(from.role_info_),
      audience_list_(from.audience_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rm_test_param().size() > 0) {
    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcEnterRoomResp)
}

void AcpcEnterRoomResp::SharedCtor() {
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _cached_size_ = 0;
}

AcpcEnterRoomResp::~AcpcEnterRoomResp() {
  // @@protoc_insertion_point(destructor:Pb.AcpcEnterRoomResp)
  SharedDtor();
}

void AcpcEnterRoomResp::SharedDtor() {
  rm_test_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcpcEnterRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcEnterRoomResp::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcEnterRoomResp& AcpcEnterRoomResp::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomResp();
  return *internal_default_instance();
}

AcpcEnterRoomResp* AcpcEnterRoomResp::New(::google::protobuf::Arena* arena) const {
  AcpcEnterRoomResp* n = new AcpcEnterRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcEnterRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_info_.Clear();
  audience_list_.Clear();
  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _internal_metadata_.Clear();
}

bool AcpcEnterRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcEnterRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 self_role_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_role_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.RoleInfo role_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.Audience audience_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_audience_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rm_test_param = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rm_test_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcEnterRoomResp.rm_test_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcEnterRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcEnterRoomResp)
  return false;
#undef DO_
}

void AcpcEnterRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // uint32 self_role_pos = 4;
  if (this->self_role_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->self_role_pos(), output);
  }

  // repeated .Pb.RoleInfo role_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_info(static_cast<int>(i)), output);
  }

  // repeated .Pb.Audience audience_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audience_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->audience_list(static_cast<int>(i)), output);
  }

  // string rm_test_param = 7;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomResp.rm_test_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rm_test_param(), output);
  }

  // uint32 hand_id = 8;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hand_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcEnterRoomResp)
}

::google::protobuf::uint8* AcpcEnterRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcEnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // uint32 self_role_pos = 4;
  if (this->self_role_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->self_role_pos(), target);
  }

  // repeated .Pb.RoleInfo role_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->role_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.Audience audience_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audience_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->audience_list(static_cast<int>(i)), deterministic, target);
  }

  // string rm_test_param = 7;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomResp.rm_test_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rm_test_param(), target);
  }

  // uint32 hand_id = 8;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hand_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcEnterRoomResp)
  return target;
}

size_t AcpcEnterRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcEnterRoomResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.RoleInfo role_info = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->role_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_info(static_cast<int>(i)));
    }
  }

  // repeated .Pb.Audience audience_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->audience_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audience_list(static_cast<int>(i)));
    }
  }

  // string rm_test_param = 7;
  if (this->rm_test_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rm_test_param());
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 self_role_pos = 4;
  if (this->self_role_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->self_role_pos());
  }

  // uint32 hand_id = 8;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcEnterRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcEnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcEnterRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcEnterRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcEnterRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcEnterRoomResp)
    MergeFrom(*source);
  }
}

void AcpcEnterRoomResp::MergeFrom(const AcpcEnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcEnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_info_.MergeFrom(from.role_info_);
  audience_list_.MergeFrom(from.audience_list_);
  if (from.rm_test_param().size() > 0) {

    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.self_role_pos() != 0) {
    set_self_role_pos(from.self_role_pos());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
}

void AcpcEnterRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcEnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcEnterRoomResp::CopyFrom(const AcpcEnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcEnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcEnterRoomResp::IsInitialized() const {
  return true;
}

void AcpcEnterRoomResp::Swap(AcpcEnterRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcEnterRoomResp::InternalSwap(AcpcEnterRoomResp* other) {
  using std::swap;
  role_info_.InternalSwap(&other->role_info_);
  audience_list_.InternalSwap(&other->audience_list_);
  rm_test_param_.Swap(&other->rm_test_param_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(game_type_, other->game_type_);
  swap(self_role_pos_, other->self_role_pos_);
  swap(hand_id_, other->hand_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcEnterRoomResp::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcEnterRoomBroad::InitAsDefaultInstance() {
  ::Pb::_AcpcEnterRoomBroad_default_instance_._instance.get_mutable()->enter_role_info_ = const_cast< ::Pb::RoleInfo*>(
      ::Pb::RoleInfo::internal_default_instance());
}
void AcpcEnterRoomBroad::clear_enter_role_info() {
  if (GetArenaNoVirtual() == NULL && enter_role_info_ != NULL) {
    delete enter_role_info_;
  }
  enter_role_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcEnterRoomBroad::kRoomIdFieldNumber;
const int AcpcEnterRoomBroad::kRoleIdFieldNumber;
const int AcpcEnterRoomBroad::kEnterRoleInfoFieldNumber;
const int AcpcEnterRoomBroad::kRmTestParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcEnterRoomBroad::AcpcEnterRoomBroad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomBroad();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcEnterRoomBroad)
}
AcpcEnterRoomBroad::AcpcEnterRoomBroad(const AcpcEnterRoomBroad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rm_test_param().size() > 0) {
    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  if (from.has_enter_role_info()) {
    enter_role_info_ = new ::Pb::RoleInfo(*from.enter_role_info_);
  } else {
    enter_role_info_ = NULL;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcEnterRoomBroad)
}

void AcpcEnterRoomBroad::SharedCtor() {
  rm_test_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enter_role_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&enter_role_info_)) + sizeof(role_id_));
  _cached_size_ = 0;
}

AcpcEnterRoomBroad::~AcpcEnterRoomBroad() {
  // @@protoc_insertion_point(destructor:Pb.AcpcEnterRoomBroad)
  SharedDtor();
}

void AcpcEnterRoomBroad::SharedDtor() {
  rm_test_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enter_role_info_;
}

void AcpcEnterRoomBroad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcEnterRoomBroad::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcEnterRoomBroad& AcpcEnterRoomBroad::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomBroad();
  return *internal_default_instance();
}

AcpcEnterRoomBroad* AcpcEnterRoomBroad::New(::google::protobuf::Arena* arena) const {
  AcpcEnterRoomBroad* n = new AcpcEnterRoomBroad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcEnterRoomBroad::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcEnterRoomBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && enter_role_info_ != NULL) {
    delete enter_role_info_;
  }
  enter_role_info_ = NULL;
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear();
}

bool AcpcEnterRoomBroad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcEnterRoomBroad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.RoleInfo enter_role_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enter_role_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rm_test_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rm_test_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcEnterRoomBroad.rm_test_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcEnterRoomBroad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcEnterRoomBroad)
  return false;
#undef DO_
}

void AcpcEnterRoomBroad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcEnterRoomBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // .Pb.RoleInfo enter_role_info = 3;
  if (this->has_enter_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->enter_role_info_, output);
  }

  // string rm_test_param = 4;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomBroad.rm_test_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rm_test_param(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcEnterRoomBroad)
}

::google::protobuf::uint8* AcpcEnterRoomBroad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcEnterRoomBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // .Pb.RoleInfo enter_role_info = 3;
  if (this->has_enter_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->enter_role_info_, deterministic, target);
  }

  // string rm_test_param = 4;
  if (this->rm_test_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rm_test_param().data(), static_cast<int>(this->rm_test_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcEnterRoomBroad.rm_test_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rm_test_param(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcEnterRoomBroad)
  return target;
}

size_t AcpcEnterRoomBroad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcEnterRoomBroad)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string rm_test_param = 4;
  if (this->rm_test_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rm_test_param());
  }

  // .Pb.RoleInfo enter_role_info = 3;
  if (this->has_enter_role_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->enter_role_info_);
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcEnterRoomBroad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcEnterRoomBroad)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcEnterRoomBroad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcEnterRoomBroad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcEnterRoomBroad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcEnterRoomBroad)
    MergeFrom(*source);
  }
}

void AcpcEnterRoomBroad::MergeFrom(const AcpcEnterRoomBroad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcEnterRoomBroad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rm_test_param().size() > 0) {

    rm_test_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rm_test_param_);
  }
  if (from.has_enter_role_info()) {
    mutable_enter_role_info()->::Pb::RoleInfo::MergeFrom(from.enter_role_info());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void AcpcEnterRoomBroad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcEnterRoomBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcEnterRoomBroad::CopyFrom(const AcpcEnterRoomBroad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcEnterRoomBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcEnterRoomBroad::IsInitialized() const {
  return true;
}

void AcpcEnterRoomBroad::Swap(AcpcEnterRoomBroad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcEnterRoomBroad::InternalSwap(AcpcEnterRoomBroad* other) {
  using std::swap;
  rm_test_param_.Swap(&other->rm_test_param_);
  swap(enter_role_info_, other->enter_role_info_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcEnterRoomBroad::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcLeaveRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcLeaveRoomReq::kRoleIdFieldNumber;
const int AcpcLeaveRoomReq::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcLeaveRoomReq::AcpcLeaveRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcLeaveRoomReq)
}
AcpcLeaveRoomReq::AcpcLeaveRoomReq(const AcpcLeaveRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcLeaveRoomReq)
}

void AcpcLeaveRoomReq::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _cached_size_ = 0;
}

AcpcLeaveRoomReq::~AcpcLeaveRoomReq() {
  // @@protoc_insertion_point(destructor:Pb.AcpcLeaveRoomReq)
  SharedDtor();
}

void AcpcLeaveRoomReq::SharedDtor() {
}

void AcpcLeaveRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcLeaveRoomReq::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcLeaveRoomReq& AcpcLeaveRoomReq::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomReq();
  return *internal_default_instance();
}

AcpcLeaveRoomReq* AcpcLeaveRoomReq::New(::google::protobuf::Arena* arena) const {
  AcpcLeaveRoomReq* n = new AcpcLeaveRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcLeaveRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcLeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear();
}

bool AcpcLeaveRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcLeaveRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcLeaveRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcLeaveRoomReq)
  return false;
#undef DO_
}

void AcpcLeaveRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcLeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcLeaveRoomReq)
}

::google::protobuf::uint8* AcpcLeaveRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcLeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcLeaveRoomReq)
  return target;
}

size_t AcpcLeaveRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcLeaveRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcLeaveRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcLeaveRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcLeaveRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcLeaveRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcLeaveRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcLeaveRoomReq)
    MergeFrom(*source);
  }
}

void AcpcLeaveRoomReq::MergeFrom(const AcpcLeaveRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcLeaveRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void AcpcLeaveRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcLeaveRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcLeaveRoomReq::CopyFrom(const AcpcLeaveRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcLeaveRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcLeaveRoomReq::IsInitialized() const {
  return true;
}

void AcpcLeaveRoomReq::Swap(AcpcLeaveRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcLeaveRoomReq::InternalSwap(AcpcLeaveRoomReq* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcLeaveRoomReq::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcLeaveRoomResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcLeaveRoomResp::kRoleIdFieldNumber;
const int AcpcLeaveRoomResp::kRoomIdFieldNumber;
const int AcpcLeaveRoomResp::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcLeaveRoomResp::AcpcLeaveRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcLeaveRoomResp)
}
AcpcLeaveRoomResp::AcpcLeaveRoomResp(const AcpcLeaveRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcLeaveRoomResp)
}

void AcpcLeaveRoomResp::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(reason_));
  _cached_size_ = 0;
}

AcpcLeaveRoomResp::~AcpcLeaveRoomResp() {
  // @@protoc_insertion_point(destructor:Pb.AcpcLeaveRoomResp)
  SharedDtor();
}

void AcpcLeaveRoomResp::SharedDtor() {
}

void AcpcLeaveRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcLeaveRoomResp::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcLeaveRoomResp& AcpcLeaveRoomResp::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomResp();
  return *internal_default_instance();
}

AcpcLeaveRoomResp* AcpcLeaveRoomResp::New(::google::protobuf::Arena* arena) const {
  AcpcLeaveRoomResp* n = new AcpcLeaveRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcLeaveRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcLeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool AcpcLeaveRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcLeaveRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcLeaveRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcLeaveRoomResp)
  return false;
#undef DO_
}

void AcpcLeaveRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcLeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcLeaveRoomResp)
}

::google::protobuf::uint8* AcpcLeaveRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcLeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcLeaveRoomResp)
  return target;
}

size_t AcpcLeaveRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcLeaveRoomResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcLeaveRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcLeaveRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcLeaveRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcLeaveRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcLeaveRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcLeaveRoomResp)
    MergeFrom(*source);
  }
}

void AcpcLeaveRoomResp::MergeFrom(const AcpcLeaveRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcLeaveRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void AcpcLeaveRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcLeaveRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcLeaveRoomResp::CopyFrom(const AcpcLeaveRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcLeaveRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcLeaveRoomResp::IsInitialized() const {
  return true;
}

void AcpcLeaveRoomResp::Swap(AcpcLeaveRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcLeaveRoomResp::InternalSwap(AcpcLeaveRoomResp* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcLeaveRoomResp::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcLeaveRoomBroad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcLeaveRoomBroad::kRoleIdFieldNumber;
const int AcpcLeaveRoomBroad::kRoomIdFieldNumber;
const int AcpcLeaveRoomBroad::kLeaveRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcLeaveRoomBroad::AcpcLeaveRoomBroad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomBroad();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcLeaveRoomBroad)
}
AcpcLeaveRoomBroad::AcpcLeaveRoomBroad(const AcpcLeaveRoomBroad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leave_role_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(leave_role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcLeaveRoomBroad)
}

void AcpcLeaveRoomBroad::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(leave_role_id_));
  _cached_size_ = 0;
}

AcpcLeaveRoomBroad::~AcpcLeaveRoomBroad() {
  // @@protoc_insertion_point(destructor:Pb.AcpcLeaveRoomBroad)
  SharedDtor();
}

void AcpcLeaveRoomBroad::SharedDtor() {
}

void AcpcLeaveRoomBroad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcLeaveRoomBroad::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcLeaveRoomBroad& AcpcLeaveRoomBroad::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomBroad();
  return *internal_default_instance();
}

AcpcLeaveRoomBroad* AcpcLeaveRoomBroad::New(::google::protobuf::Arena* arena) const {
  AcpcLeaveRoomBroad* n = new AcpcLeaveRoomBroad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcLeaveRoomBroad::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcLeaveRoomBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(leave_role_id_));
  _internal_metadata_.Clear();
}

bool AcpcLeaveRoomBroad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcLeaveRoomBroad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leave_role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcLeaveRoomBroad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcLeaveRoomBroad)
  return false;
#undef DO_
}

void AcpcLeaveRoomBroad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcLeaveRoomBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // uint32 leave_role_id = 3;
  if (this->leave_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leave_role_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcLeaveRoomBroad)
}

::google::protobuf::uint8* AcpcLeaveRoomBroad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcLeaveRoomBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // uint32 leave_role_id = 3;
  if (this->leave_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leave_role_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcLeaveRoomBroad)
  return target;
}

size_t AcpcLeaveRoomBroad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcLeaveRoomBroad)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 leave_role_id = 3;
  if (this->leave_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leave_role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcLeaveRoomBroad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcLeaveRoomBroad)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcLeaveRoomBroad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcLeaveRoomBroad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcLeaveRoomBroad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcLeaveRoomBroad)
    MergeFrom(*source);
  }
}

void AcpcLeaveRoomBroad::MergeFrom(const AcpcLeaveRoomBroad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcLeaveRoomBroad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.leave_role_id() != 0) {
    set_leave_role_id(from.leave_role_id());
  }
}

void AcpcLeaveRoomBroad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcLeaveRoomBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcLeaveRoomBroad::CopyFrom(const AcpcLeaveRoomBroad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcLeaveRoomBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcLeaveRoomBroad::IsInitialized() const {
  return true;
}

void AcpcLeaveRoomBroad::Swap(AcpcLeaveRoomBroad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcLeaveRoomBroad::InternalSwap(AcpcLeaveRoomBroad* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(leave_role_id_, other->leave_role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcLeaveRoomBroad::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcQueryCanJoinRoom::InitAsDefaultInstance() {
}
void AcpcQueryCanJoinRoom::clear_room_list() {
  room_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcQueryCanJoinRoom::kRoomListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcQueryCanJoinRoom::AcpcQueryCanJoinRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcQueryCanJoinRoom();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcQueryCanJoinRoom)
}
AcpcQueryCanJoinRoom::AcpcQueryCanJoinRoom(const AcpcQueryCanJoinRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      room_list_(from.room_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcQueryCanJoinRoom)
}

void AcpcQueryCanJoinRoom::SharedCtor() {
  _cached_size_ = 0;
}

AcpcQueryCanJoinRoom::~AcpcQueryCanJoinRoom() {
  // @@protoc_insertion_point(destructor:Pb.AcpcQueryCanJoinRoom)
  SharedDtor();
}

void AcpcQueryCanJoinRoom::SharedDtor() {
}

void AcpcQueryCanJoinRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcQueryCanJoinRoom::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcQueryCanJoinRoom& AcpcQueryCanJoinRoom::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcQueryCanJoinRoom();
  return *internal_default_instance();
}

AcpcQueryCanJoinRoom* AcpcQueryCanJoinRoom::New(::google::protobuf::Arena* arena) const {
  AcpcQueryCanJoinRoom* n = new AcpcQueryCanJoinRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcQueryCanJoinRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcQueryCanJoinRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_list_.Clear();
  _internal_metadata_.Clear();
}

bool AcpcQueryCanJoinRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcQueryCanJoinRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.RoomCanJoin room_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_room_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcQueryCanJoinRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcQueryCanJoinRoom)
  return false;
#undef DO_
}

void AcpcQueryCanJoinRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcQueryCanJoinRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.RoomCanJoin room_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcQueryCanJoinRoom)
}

::google::protobuf::uint8* AcpcQueryCanJoinRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcQueryCanJoinRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.RoomCanJoin room_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->room_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcQueryCanJoinRoom)
  return target;
}

size_t AcpcQueryCanJoinRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcQueryCanJoinRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.RoomCanJoin room_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->room_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcQueryCanJoinRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcQueryCanJoinRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcQueryCanJoinRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcQueryCanJoinRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcQueryCanJoinRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcQueryCanJoinRoom)
    MergeFrom(*source);
  }
}

void AcpcQueryCanJoinRoom::MergeFrom(const AcpcQueryCanJoinRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcQueryCanJoinRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_list_.MergeFrom(from.room_list_);
}

void AcpcQueryCanJoinRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcQueryCanJoinRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcQueryCanJoinRoom::CopyFrom(const AcpcQueryCanJoinRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcQueryCanJoinRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcQueryCanJoinRoom::IsInitialized() const {
  return true;
}

void AcpcQueryCanJoinRoom::Swap(AcpcQueryCanJoinRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcQueryCanJoinRoom::InternalSwap(AcpcQueryCanJoinRoom* other) {
  using std::swap;
  room_list_.InternalSwap(&other->room_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcQueryCanJoinRoom::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcReadyReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcReadyReq::kRoleIdFieldNumber;
const int AcpcReadyReq::kRoomIdFieldNumber;
const int AcpcReadyReq::kCfrModelFieldNumber;
const int AcpcReadyReq::kDealerModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcReadyReq::AcpcReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcReadyReq)
}
AcpcReadyReq::AcpcReadyReq(const AcpcReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cfr_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfr_model().size() > 0) {
    cfr_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfr_model_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealer_mode_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_mode_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcReadyReq)
}

void AcpcReadyReq::SharedCtor() {
  cfr_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_mode_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_mode_));
  _cached_size_ = 0;
}

AcpcReadyReq::~AcpcReadyReq() {
  // @@protoc_insertion_point(destructor:Pb.AcpcReadyReq)
  SharedDtor();
}

void AcpcReadyReq::SharedDtor() {
  cfr_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcpcReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcReadyReq::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcReadyReq& AcpcReadyReq::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyReq();
  return *internal_default_instance();
}

AcpcReadyReq* AcpcReadyReq::New(::google::protobuf::Arena* arena) const {
  AcpcReadyReq* n = new AcpcReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cfr_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_mode_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_mode_));
  _internal_metadata_.Clear();
}

bool AcpcReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfr_model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfr_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcReadyReq.cfr_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcReadyReq)
  return false;
#undef DO_
}

void AcpcReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // string cfr_model = 3;
  if (this->cfr_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcReadyReq.cfr_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cfr_model(), output);
  }

  // uint32 dealer_mode = 4;
  if (this->dealer_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dealer_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcReadyReq)
}

::google::protobuf::uint8* AcpcReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // string cfr_model = 3;
  if (this->cfr_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcReadyReq.cfr_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cfr_model(), target);
  }

  // uint32 dealer_mode = 4;
  if (this->dealer_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dealer_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcReadyReq)
  return target;
}

size_t AcpcReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcReadyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cfr_model = 3;
  if (this->cfr_model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfr_model());
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 dealer_mode = 4;
  if (this->dealer_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcReadyReq)
    MergeFrom(*source);
  }
}

void AcpcReadyReq::MergeFrom(const AcpcReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cfr_model().size() > 0) {

    cfr_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfr_model_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.dealer_mode() != 0) {
    set_dealer_mode(from.dealer_mode());
  }
}

void AcpcReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcReadyReq::CopyFrom(const AcpcReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcReadyReq::IsInitialized() const {
  return true;
}

void AcpcReadyReq::Swap(AcpcReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcReadyReq::InternalSwap(AcpcReadyReq* other) {
  using std::swap;
  cfr_model_.Swap(&other->cfr_model_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(dealer_mode_, other->dealer_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcReadyReq::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcReadyResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcReadyResp::kRoleIdFieldNumber;
const int AcpcReadyResp::kDealerModeFieldNumber;
const int AcpcReadyResp::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcReadyResp::AcpcReadyResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcReadyResp)
}
AcpcReadyResp::AcpcReadyResp(const AcpcReadyResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcReadyResp)
}

void AcpcReadyResp::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  _cached_size_ = 0;
}

AcpcReadyResp::~AcpcReadyResp() {
  // @@protoc_insertion_point(destructor:Pb.AcpcReadyResp)
  SharedDtor();
}

void AcpcReadyResp::SharedDtor() {
}

void AcpcReadyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcReadyResp::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcReadyResp& AcpcReadyResp::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyResp();
  return *internal_default_instance();
}

AcpcReadyResp* AcpcReadyResp::New(::google::protobuf::Arena* arena) const {
  AcpcReadyResp* n = new AcpcReadyResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcReadyResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcReadyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  _internal_metadata_.Clear();
}

bool AcpcReadyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcReadyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcReadyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcReadyResp)
  return false;
#undef DO_
}

void AcpcReadyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcReadyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 dealer_mode = 2;
  if (this->dealer_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dealer_mode(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcReadyResp)
}

::google::protobuf::uint8* AcpcReadyResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcReadyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 dealer_mode = 2;
  if (this->dealer_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dealer_mode(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcReadyResp)
  return target;
}

size_t AcpcReadyResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcReadyResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 dealer_mode = 2;
  if (this->dealer_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_mode());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcReadyResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcReadyResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcReadyResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcReadyResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcReadyResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcReadyResp)
    MergeFrom(*source);
  }
}

void AcpcReadyResp::MergeFrom(const AcpcReadyResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcReadyResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.dealer_mode() != 0) {
    set_dealer_mode(from.dealer_mode());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void AcpcReadyResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcReadyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcReadyResp::CopyFrom(const AcpcReadyResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcReadyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcReadyResp::IsInitialized() const {
  return true;
}

void AcpcReadyResp::Swap(AcpcReadyResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcReadyResp::InternalSwap(AcpcReadyResp* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(dealer_mode_, other->dealer_mode_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcReadyResp::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcReadyBroad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcReadyBroad::kRoleIdFieldNumber;
const int AcpcReadyBroad::kReadyRoleIdFieldNumber;
const int AcpcReadyBroad::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcReadyBroad::AcpcReadyBroad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyBroad();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcReadyBroad)
}
AcpcReadyBroad::AcpcReadyBroad(const AcpcReadyBroad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcReadyBroad)
}

void AcpcReadyBroad::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  _cached_size_ = 0;
}

AcpcReadyBroad::~AcpcReadyBroad() {
  // @@protoc_insertion_point(destructor:Pb.AcpcReadyBroad)
  SharedDtor();
}

void AcpcReadyBroad::SharedDtor() {
}

void AcpcReadyBroad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcReadyBroad::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcReadyBroad& AcpcReadyBroad::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyBroad();
  return *internal_default_instance();
}

AcpcReadyBroad* AcpcReadyBroad::New(::google::protobuf::Arena* arena) const {
  AcpcReadyBroad* n = new AcpcReadyBroad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcReadyBroad::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcReadyBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  _internal_metadata_.Clear();
}

bool AcpcReadyBroad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcReadyBroad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ready_role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ready_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcReadyBroad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcReadyBroad)
  return false;
#undef DO_
}

void AcpcReadyBroad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcReadyBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 ready_role_id = 2;
  if (this->ready_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ready_role_id(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcReadyBroad)
}

::google::protobuf::uint8* AcpcReadyBroad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcReadyBroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 ready_role_id = 2;
  if (this->ready_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ready_role_id(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcReadyBroad)
  return target;
}

size_t AcpcReadyBroad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcReadyBroad)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 ready_role_id = 2;
  if (this->ready_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ready_role_id());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcReadyBroad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcReadyBroad)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcReadyBroad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcReadyBroad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcReadyBroad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcReadyBroad)
    MergeFrom(*source);
  }
}

void AcpcReadyBroad::MergeFrom(const AcpcReadyBroad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcReadyBroad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.ready_role_id() != 0) {
    set_ready_role_id(from.ready_role_id());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void AcpcReadyBroad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcReadyBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcReadyBroad::CopyFrom(const AcpcReadyBroad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcReadyBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcReadyBroad::IsInitialized() const {
  return true;
}

void AcpcReadyBroad::Swap(AcpcReadyBroad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcReadyBroad::InternalSwap(AcpcReadyBroad* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(ready_role_id_, other->ready_role_id_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcReadyBroad::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcMatchStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcMatchStart::kRoomIdFieldNumber;
const int AcpcMatchStart::kRoleIdFieldNumber;
const int AcpcMatchStart::kHandIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcMatchStart::AcpcMatchStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcMatchStart)
}
AcpcMatchStart::AcpcMatchStart(const AcpcMatchStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcMatchStart)
}

void AcpcMatchStart::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _cached_size_ = 0;
}

AcpcMatchStart::~AcpcMatchStart() {
  // @@protoc_insertion_point(destructor:Pb.AcpcMatchStart)
  SharedDtor();
}

void AcpcMatchStart::SharedDtor() {
}

void AcpcMatchStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcMatchStart::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcMatchStart& AcpcMatchStart::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchStart();
  return *internal_default_instance();
}

AcpcMatchStart* AcpcMatchStart::New(::google::protobuf::Arena* arena) const {
  AcpcMatchStart* n = new AcpcMatchStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcMatchStart::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcMatchStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(hand_id_));
  _internal_metadata_.Clear();
}

bool AcpcMatchStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcMatchStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcMatchStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcMatchStart)
  return false;
#undef DO_
}

void AcpcMatchStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcMatchStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 hand_id = 3;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcMatchStart)
}

::google::protobuf::uint8* AcpcMatchStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcMatchStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 hand_id = 3;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcMatchStart)
  return target;
}

size_t AcpcMatchStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcMatchStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 hand_id = 3;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcMatchStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcMatchStart)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcMatchStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcMatchStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcMatchStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcMatchStart)
    MergeFrom(*source);
  }
}

void AcpcMatchStart::MergeFrom(const AcpcMatchStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcMatchStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
}

void AcpcMatchStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcMatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcMatchStart::CopyFrom(const AcpcMatchStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcMatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcMatchStart::IsInitialized() const {
  return true;
}

void AcpcMatchStart::Swap(AcpcMatchStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcMatchStart::InternalSwap(AcpcMatchStart* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(hand_id_, other->hand_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcMatchStart::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcRoleAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcRoleAction::kRoleIdFieldNumber;
const int AcpcRoleAction::kActionFieldNumber;
const int AcpcRoleAction::kSizeFieldNumber;
const int AcpcRoleAction::kActionRateFieldNumber;
const int AcpcRoleAction::kRoomIdFieldNumber;
const int AcpcRoleAction::kRobotCfrModelParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcRoleAction::AcpcRoleAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcRoleAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcRoleAction)
}
AcpcRoleAction::AcpcRoleAction(const AcpcRoleAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_rate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action_rate().size() > 0) {
    action_rate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_rate_);
  }
  robot_cfr_model_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_cfr_model_param().size() > 0) {
    robot_cfr_model_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_cfr_model_param_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcRoleAction)
}

void AcpcRoleAction::SharedCtor() {
  action_rate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_cfr_model_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(size_));
  _cached_size_ = 0;
}

AcpcRoleAction::~AcpcRoleAction() {
  // @@protoc_insertion_point(destructor:Pb.AcpcRoleAction)
  SharedDtor();
}

void AcpcRoleAction::SharedDtor() {
  action_rate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_cfr_model_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcpcRoleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcRoleAction::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcRoleAction& AcpcRoleAction::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcRoleAction();
  return *internal_default_instance();
}

AcpcRoleAction* AcpcRoleAction::New(::google::protobuf::Arena* arena) const {
  AcpcRoleAction* n = new AcpcRoleAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcRoleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcRoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_cfr_model_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool AcpcRoleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcRoleAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string action_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_rate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action_rate().data(), static_cast<int>(this->action_rate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoleAction.action_rate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robot_cfr_model_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_cfr_model_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robot_cfr_model_param().data(), static_cast<int>(this->robot_cfr_model_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcRoleAction.robot_cfr_model_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcRoleAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcRoleAction)
  return false;
#undef DO_
}

void AcpcRoleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcRoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action(), output);
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // string action_rate = 4;
  if (this->action_rate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_rate().data(), static_cast<int>(this->action_rate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoleAction.action_rate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->action_rate(), output);
  }

  // uint64 room_id = 5;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  // string robot_cfr_model_param = 6;
  if (this->robot_cfr_model_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_cfr_model_param().data(), static_cast<int>(this->robot_cfr_model_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoleAction.robot_cfr_model_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->robot_cfr_model_param(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcRoleAction)
}

::google::protobuf::uint8* AcpcRoleAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcRoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action(), target);
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  // string action_rate = 4;
  if (this->action_rate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_rate().data(), static_cast<int>(this->action_rate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoleAction.action_rate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->action_rate(), target);
  }

  // uint64 room_id = 5;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  // string robot_cfr_model_param = 6;
  if (this->robot_cfr_model_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_cfr_model_param().data(), static_cast<int>(this->robot_cfr_model_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcRoleAction.robot_cfr_model_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->robot_cfr_model_param(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcRoleAction)
  return target;
}

size_t AcpcRoleAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcRoleAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string action_rate = 4;
  if (this->action_rate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action_rate());
  }

  // string robot_cfr_model_param = 6;
  if (this->robot_cfr_model_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_cfr_model_param());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action());
  }

  // uint64 room_id = 5;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcRoleAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcRoleAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcRoleAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcRoleAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcRoleAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcRoleAction)
    MergeFrom(*source);
  }
}

void AcpcRoleAction::MergeFrom(const AcpcRoleAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcRoleAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_rate().size() > 0) {

    action_rate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_rate_);
  }
  if (from.robot_cfr_model_param().size() > 0) {

    robot_cfr_model_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_cfr_model_param_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void AcpcRoleAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcRoleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcRoleAction::CopyFrom(const AcpcRoleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcRoleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcRoleAction::IsInitialized() const {
  return true;
}

void AcpcRoleAction::Swap(AcpcRoleAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcRoleAction::InternalSwap(AcpcRoleAction* other) {
  using std::swap;
  action_rate_.Swap(&other->action_rate_);
  robot_cfr_model_param_.Swap(&other->robot_cfr_model_param_);
  swap(role_id_, other->role_id_);
  swap(action_, other->action_);
  swap(room_id_, other->room_id_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcRoleAction::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcBroadRoleAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcBroadRoleAction::kRoleIdFieldNumber;
const int AcpcBroadRoleAction::kActionRoleIdFieldNumber;
const int AcpcBroadRoleAction::kActionFieldNumber;
const int AcpcBroadRoleAction::kSizeFieldNumber;
const int AcpcBroadRoleAction::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcBroadRoleAction::AcpcBroadRoleAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcBroadRoleAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcBroadRoleAction)
}
AcpcBroadRoleAction::AcpcBroadRoleAction(const AcpcBroadRoleAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcBroadRoleAction)
}

void AcpcBroadRoleAction::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  _cached_size_ = 0;
}

AcpcBroadRoleAction::~AcpcBroadRoleAction() {
  // @@protoc_insertion_point(destructor:Pb.AcpcBroadRoleAction)
  SharedDtor();
}

void AcpcBroadRoleAction::SharedDtor() {
}

void AcpcBroadRoleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcBroadRoleAction::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcBroadRoleAction& AcpcBroadRoleAction::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcBroadRoleAction();
  return *internal_default_instance();
}

AcpcBroadRoleAction* AcpcBroadRoleAction::New(::google::protobuf::Arena* arena) const {
  AcpcBroadRoleAction* n = new AcpcBroadRoleAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcBroadRoleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcBroadRoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(room_id_));
  _internal_metadata_.Clear();
}

bool AcpcBroadRoleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcBroadRoleAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcBroadRoleAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcBroadRoleAction)
  return false;
#undef DO_
}

void AcpcBroadRoleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcBroadRoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // uint32 action_role_id = 2;
  if (this->action_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_role_id(), output);
  }

  // uint32 action = 3;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action(), output);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // uint64 room_id = 5;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcBroadRoleAction)
}

::google::protobuf::uint8* AcpcBroadRoleAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcBroadRoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // uint32 action_role_id = 2;
  if (this->action_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_role_id(), target);
  }

  // uint32 action = 3;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action(), target);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // uint64 room_id = 5;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcBroadRoleAction)
  return target;
}

size_t AcpcBroadRoleAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcBroadRoleAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 action_role_id = 2;
  if (this->action_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_role_id());
  }

  // uint32 action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint64 room_id = 5;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcBroadRoleAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcBroadRoleAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcBroadRoleAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcBroadRoleAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcBroadRoleAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcBroadRoleAction)
    MergeFrom(*source);
  }
}

void AcpcBroadRoleAction::MergeFrom(const AcpcBroadRoleAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcBroadRoleAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.action_role_id() != 0) {
    set_action_role_id(from.action_role_id());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void AcpcBroadRoleAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcBroadRoleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcBroadRoleAction::CopyFrom(const AcpcBroadRoleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcBroadRoleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcBroadRoleAction::IsInitialized() const {
  return true;
}

void AcpcBroadRoleAction::Swap(AcpcBroadRoleAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcBroadRoleAction::InternalSwap(AcpcBroadRoleAction* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(action_role_id_, other->action_role_id_);
  swap(action_, other->action_);
  swap(size_, other->size_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcBroadRoleAction::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcMatchState::InitAsDefaultInstance() {
  ::Pb::_AcpcMatchState_default_instance_._instance.get_mutable()->state_ = const_cast< ::Pb::AcpcState*>(
      ::Pb::AcpcState::internal_default_instance());
  ::Pb::_AcpcMatchState_default_instance_._instance.get_mutable()->robot_action_ = const_cast< ::Pb::AcpcRoleAction*>(
      ::Pb::AcpcRoleAction::internal_default_instance());
}
void AcpcMatchState::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcMatchState::kRoomIdFieldNumber;
const int AcpcMatchState::kRoleIdFieldNumber;
const int AcpcMatchState::kStateFieldNumber;
const int AcpcMatchState::kRobotActionFieldNumber;
const int AcpcMatchState::kCfrModelFieldNumber;
const int AcpcMatchState::kRobotDelayFlagFieldNumber;
const int AcpcMatchState::kRobotCfrModelParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcMatchState::AcpcMatchState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcMatchState)
}
AcpcMatchState::AcpcMatchState(const AcpcMatchState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cfr_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfr_model().size() > 0) {
    cfr_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfr_model_);
  }
  robot_cfr_model_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_cfr_model_param().size() > 0) {
    robot_cfr_model_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_cfr_model_param_);
  }
  if (from.has_state()) {
    state_ = new ::Pb::AcpcState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_robot_action()) {
    robot_action_ = new ::Pb::AcpcRoleAction(*from.robot_action_);
  } else {
    robot_action_ = NULL;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_delay_flag_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(robot_delay_flag_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcMatchState)
}

void AcpcMatchState::SharedCtor() {
  cfr_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_cfr_model_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_delay_flag_) -
      reinterpret_cast<char*>(&state_)) + sizeof(robot_delay_flag_));
  _cached_size_ = 0;
}

AcpcMatchState::~AcpcMatchState() {
  // @@protoc_insertion_point(destructor:Pb.AcpcMatchState)
  SharedDtor();
}

void AcpcMatchState::SharedDtor() {
  cfr_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_cfr_model_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete robot_action_;
}

void AcpcMatchState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcMatchState::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcMatchState& AcpcMatchState::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchState();
  return *internal_default_instance();
}

AcpcMatchState* AcpcMatchState::New(::google::protobuf::Arena* arena) const {
  AcpcMatchState* n = new AcpcMatchState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cfr_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_cfr_model_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && robot_action_ != NULL) {
    delete robot_action_;
  }
  robot_action_ = NULL;
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_delay_flag_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(robot_delay_flag_));
  _internal_metadata_.Clear();
}

bool AcpcMatchState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcMatchState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.AcpcState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.AcpcRoleAction robot_action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfr_model = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfr_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcMatchState.cfr_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_delay_flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_delay_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robot_cfr_model_param = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_cfr_model_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robot_cfr_model_param().data(), static_cast<int>(this->robot_cfr_model_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcMatchState.robot_cfr_model_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcMatchState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcMatchState)
  return false;
#undef DO_
}

void AcpcMatchState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // .Pb.AcpcState state = 3;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->state_, output);
  }

  // .Pb.AcpcRoleAction robot_action = 4;
  if (this->has_robot_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->robot_action_, output);
  }

  // string cfr_model = 5;
  if (this->cfr_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcMatchState.cfr_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cfr_model(), output);
  }

  // uint32 robot_delay_flag = 6;
  if (this->robot_delay_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->robot_delay_flag(), output);
  }

  // string robot_cfr_model_param = 7;
  if (this->robot_cfr_model_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_cfr_model_param().data(), static_cast<int>(this->robot_cfr_model_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcMatchState.robot_cfr_model_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->robot_cfr_model_param(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcMatchState)
}

::google::protobuf::uint8* AcpcMatchState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // .Pb.AcpcState state = 3;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->state_, deterministic, target);
  }

  // .Pb.AcpcRoleAction robot_action = 4;
  if (this->has_robot_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->robot_action_, deterministic, target);
  }

  // string cfr_model = 5;
  if (this->cfr_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcMatchState.cfr_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cfr_model(), target);
  }

  // uint32 robot_delay_flag = 6;
  if (this->robot_delay_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->robot_delay_flag(), target);
  }

  // string robot_cfr_model_param = 7;
  if (this->robot_cfr_model_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_cfr_model_param().data(), static_cast<int>(this->robot_cfr_model_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcMatchState.robot_cfr_model_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->robot_cfr_model_param(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcMatchState)
  return target;
}

size_t AcpcMatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcMatchState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cfr_model = 5;
  if (this->cfr_model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfr_model());
  }

  // string robot_cfr_model_param = 7;
  if (this->robot_cfr_model_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_cfr_model_param());
  }

  // .Pb.AcpcState state = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .Pb.AcpcRoleAction robot_action = 4;
  if (this->has_robot_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->robot_action_);
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 robot_delay_flag = 6;
  if (this->robot_delay_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_delay_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcMatchState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcMatchState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcMatchState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcMatchState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcMatchState)
    MergeFrom(*source);
  }
}

void AcpcMatchState::MergeFrom(const AcpcMatchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cfr_model().size() > 0) {

    cfr_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfr_model_);
  }
  if (from.robot_cfr_model_param().size() > 0) {

    robot_cfr_model_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_cfr_model_param_);
  }
  if (from.has_state()) {
    mutable_state()->::Pb::AcpcState::MergeFrom(from.state());
  }
  if (from.has_robot_action()) {
    mutable_robot_action()->::Pb::AcpcRoleAction::MergeFrom(from.robot_action());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.robot_delay_flag() != 0) {
    set_robot_delay_flag(from.robot_delay_flag());
  }
}

void AcpcMatchState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcMatchState::CopyFrom(const AcpcMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcMatchState::IsInitialized() const {
  return true;
}

void AcpcMatchState::Swap(AcpcMatchState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcMatchState::InternalSwap(AcpcMatchState* other) {
  using std::swap;
  cfr_model_.Swap(&other->cfr_model_);
  robot_cfr_model_param_.Swap(&other->robot_cfr_model_param_);
  swap(state_, other->state_);
  swap(robot_action_, other->robot_action_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(robot_delay_flag_, other->robot_delay_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcMatchState::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcMatchScore::InitAsDefaultInstance() {
}
void AcpcMatchScore::clear_role_scores() {
  role_scores_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcMatchScore::kRoomIdFieldNumber;
const int AcpcMatchScore::kRoleIdFieldNumber;
const int AcpcMatchScore::kRoleScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcMatchScore::AcpcMatchScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchScore();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcMatchScore)
}
AcpcMatchScore::AcpcMatchScore(const AcpcMatchScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_scores_(from.role_scores_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcMatchScore)
}

void AcpcMatchScore::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _cached_size_ = 0;
}

AcpcMatchScore::~AcpcMatchScore() {
  // @@protoc_insertion_point(destructor:Pb.AcpcMatchScore)
  SharedDtor();
}

void AcpcMatchScore::SharedDtor() {
}

void AcpcMatchScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcMatchScore::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcMatchScore& AcpcMatchScore::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchScore();
  return *internal_default_instance();
}

AcpcMatchScore* AcpcMatchScore::New(::google::protobuf::Arena* arena) const {
  AcpcMatchScore* n = new AcpcMatchScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcMatchScore::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcMatchScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_scores_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear();
}

bool AcpcMatchScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcMatchScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.RoleScore role_scores = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcMatchScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcMatchScore)
  return false;
#undef DO_
}

void AcpcMatchScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcMatchScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // repeated .Pb.RoleScore role_scores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_scores_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_scores(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcMatchScore)
}

::google::protobuf::uint8* AcpcMatchScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcMatchScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // repeated .Pb.RoleScore role_scores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_scores_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->role_scores(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcMatchScore)
  return target;
}

size_t AcpcMatchScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcMatchScore)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.RoleScore role_scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->role_scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_scores(static_cast<int>(i)));
    }
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcMatchScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcMatchScore)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcMatchScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcMatchScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcMatchScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcMatchScore)
    MergeFrom(*source);
  }
}

void AcpcMatchScore::MergeFrom(const AcpcMatchScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcMatchScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_scores_.MergeFrom(from.role_scores_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void AcpcMatchScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcMatchScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcMatchScore::CopyFrom(const AcpcMatchScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcMatchScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcMatchScore::IsInitialized() const {
  return true;
}

void AcpcMatchScore::Swap(AcpcMatchScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcMatchScore::InternalSwap(AcpcMatchScore* other) {
  using std::swap;
  role_scores_.InternalSwap(&other->role_scores_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcMatchScore::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcpcForTest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcpcForTest::kPasswordFieldNumber;
const int AcpcForTest::kRobotCntFieldNumber;
const int AcpcForTest::kGameTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcpcForTest::AcpcForTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsAcpcForTest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.AcpcForTest)
}
AcpcForTest::AcpcForTest(const AcpcForTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&robot_cnt_, &from.robot_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&robot_cnt_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:Pb.AcpcForTest)
}

void AcpcForTest::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&robot_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&robot_cnt_)) + sizeof(game_type_));
  _cached_size_ = 0;
}

AcpcForTest::~AcpcForTest() {
  // @@protoc_insertion_point(destructor:Pb.AcpcForTest)
  SharedDtor();
}

void AcpcForTest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcpcForTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcpcForTest::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcpcForTest& AcpcForTest::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsAcpcForTest();
  return *internal_default_instance();
}

AcpcForTest* AcpcForTest::New(::google::protobuf::Arena* arena) const {
  AcpcForTest* n = new AcpcForTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcpcForTest::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.AcpcForTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&robot_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&robot_cnt_)) + sizeof(game_type_));
  _internal_metadata_.Clear();
}

bool AcpcForTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.AcpcForTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.AcpcForTest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.AcpcForTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.AcpcForTest)
  return false;
#undef DO_
}

void AcpcForTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.AcpcForTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcForTest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // uint32 robot_cnt = 2;
  if (this->robot_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_cnt(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.AcpcForTest)
}

::google::protobuf::uint8* AcpcForTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.AcpcForTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.AcpcForTest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // uint32 robot_cnt = 2;
  if (this->robot_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_cnt(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.AcpcForTest)
  return target;
}

size_t AcpcForTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.AcpcForTest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string password = 1;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // uint32 robot_cnt = 2;
  if (this->robot_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_cnt());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcpcForTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.AcpcForTest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcpcForTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcpcForTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.AcpcForTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.AcpcForTest)
    MergeFrom(*source);
  }
}

void AcpcForTest::MergeFrom(const AcpcForTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.AcpcForTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.robot_cnt() != 0) {
    set_robot_cnt(from.robot_cnt());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
}

void AcpcForTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.AcpcForTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcpcForTest::CopyFrom(const AcpcForTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.AcpcForTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcpcForTest::IsInitialized() const {
  return true;
}

void AcpcForTest::Swap(AcpcForTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcpcForTest::InternalSwap(AcpcForTest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(robot_cnt_, other->robot_cnt_);
  swap(game_type_, other->game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcpcForTest::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckRoomTimeout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckRoomTimeout::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRoomTimeout::CheckRoomTimeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsCheckRoomTimeout();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.CheckRoomTimeout)
}
CheckRoomTimeout::CheckRoomTimeout(const CheckRoomTimeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.CheckRoomTimeout)
}

void CheckRoomTimeout::SharedCtor() {
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CheckRoomTimeout::~CheckRoomTimeout() {
  // @@protoc_insertion_point(destructor:Pb.CheckRoomTimeout)
  SharedDtor();
}

void CheckRoomTimeout::SharedDtor() {
}

void CheckRoomTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRoomTimeout::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckRoomTimeout& CheckRoomTimeout::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsCheckRoomTimeout();
  return *internal_default_instance();
}

CheckRoomTimeout* CheckRoomTimeout::New(::google::protobuf::Arena* arena) const {
  CheckRoomTimeout* n = new CheckRoomTimeout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRoomTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.CheckRoomTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool CheckRoomTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.CheckRoomTimeout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.CheckRoomTimeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.CheckRoomTimeout)
  return false;
#undef DO_
}

void CheckRoomTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.CheckRoomTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.CheckRoomTimeout)
}

::google::protobuf::uint8* CheckRoomTimeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.CheckRoomTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.CheckRoomTimeout)
  return target;
}

size_t CheckRoomTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.CheckRoomTimeout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRoomTimeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.CheckRoomTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRoomTimeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRoomTimeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.CheckRoomTimeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.CheckRoomTimeout)
    MergeFrom(*source);
  }
}

void CheckRoomTimeout::MergeFrom(const CheckRoomTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.CheckRoomTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void CheckRoomTimeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.CheckRoomTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRoomTimeout::CopyFrom(const CheckRoomTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.CheckRoomTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRoomTimeout::IsInitialized() const {
  return true;
}

void CheckRoomTimeout::Swap(CheckRoomTimeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRoomTimeout::InternalSwap(CheckRoomTimeout* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRoomTimeout::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetDealerMode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDealerMode::kRoomIdFieldNumber;
const int SetDealerMode::kRoleIdFieldNumber;
const int SetDealerMode::kDealerModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDealerMode::SetDealerMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsSetDealerMode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.SetDealerMode)
}
SetDealerMode::SetDealerMode(const SetDealerMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealer_mode_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_mode_));
  // @@protoc_insertion_point(copy_constructor:Pb.SetDealerMode)
}

void SetDealerMode::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_mode_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_mode_));
  _cached_size_ = 0;
}

SetDealerMode::~SetDealerMode() {
  // @@protoc_insertion_point(destructor:Pb.SetDealerMode)
  SharedDtor();
}

void SetDealerMode::SharedDtor() {
}

void SetDealerMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDealerMode::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetDealerMode& SetDealerMode::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsSetDealerMode();
  return *internal_default_instance();
}

SetDealerMode* SetDealerMode::New(::google::protobuf::Arena* arena) const {
  SetDealerMode* n = new SetDealerMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetDealerMode::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.SetDealerMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealer_mode_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(dealer_mode_));
  _internal_metadata_.Clear();
}

bool SetDealerMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.SetDealerMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.SetDealerMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.SetDealerMode)
  return false;
#undef DO_
}

void SetDealerMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.SetDealerMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // uint32 dealer_mode = 3;
  if (this->dealer_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dealer_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.SetDealerMode)
}

::google::protobuf::uint8* SetDealerMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.SetDealerMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // uint32 dealer_mode = 3;
  if (this->dealer_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dealer_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.SetDealerMode)
  return target;
}

size_t SetDealerMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.SetDealerMode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 dealer_mode = 3;
  if (this->dealer_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDealerMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.SetDealerMode)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDealerMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetDealerMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.SetDealerMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.SetDealerMode)
    MergeFrom(*source);
  }
}

void SetDealerMode::MergeFrom(const SetDealerMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.SetDealerMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.dealer_mode() != 0) {
    set_dealer_mode(from.dealer_mode());
  }
}

void SetDealerMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.SetDealerMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDealerMode::CopyFrom(const SetDealerMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.SetDealerMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDealerMode::IsInitialized() const {
  return true;
}

void SetDealerMode::Swap(SetDealerMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDealerMode::InternalSwap(SetDealerMode* other) {
  using std::swap;
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(dealer_mode_, other->dealer_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetDealerMode::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleState::InitAsDefaultInstance() {
}
void RoleState::clear_hole_cards() {
  hole_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleState::kSpentFieldNumber;
const int RoleState::kFoldFieldNumber;
const int RoleState::kHoleCardsFieldNumber;
const int RoleState::kScoreFieldNumber;
const int RoleState::kTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleState::RoleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsRoleState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoleState)
}
RoleState::RoleState(const RoleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hole_cards_(from.hole_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spent_, &from.spent_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&spent_)) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoleState)
}

void RoleState::SharedCtor() {
  ::memset(&spent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_) -
      reinterpret_cast<char*>(&spent_)) + sizeof(turn_));
  _cached_size_ = 0;
}

RoleState::~RoleState() {
  // @@protoc_insertion_point(destructor:Pb.RoleState)
  SharedDtor();
}

void RoleState::SharedDtor() {
}

void RoleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleState::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleState& RoleState::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsRoleState();
  return *internal_default_instance();
}

RoleState* RoleState::New(::google::protobuf::Arena* arena) const {
  RoleState* n = new RoleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleState::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_cards_.Clear();
  ::memset(&spent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_) -
      reinterpret_cast<char*>(&spent_)) + sizeof(turn_));
  _internal_metadata_.Clear();
}

bool RoleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 spent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turn = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoleState)
  return false;
#undef DO_
}

void RoleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spent = 1;
  if (this->spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spent(), output);
  }

  // uint32 fold = 2;
  if (this->fold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fold(), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hole_cards(static_cast<int>(i)), output);
  }

  // int32 Score = 4;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // int32 turn = 5;
  if (this->turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->turn(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoleState)
}

::google::protobuf::uint8* RoleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spent = 1;
  if (this->spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spent(), target);
  }

  // uint32 fold = 2;
  if (this->fold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fold(), target);
  }

  // repeated .Pb.AcpcCard hole_cards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  // int32 Score = 4;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // int32 turn = 5;
  if (this->turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->turn(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoleState)
  return target;
}

size_t RoleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoleState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard hole_cards = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // uint32 spent = 1;
  if (this->spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spent());
  }

  // uint32 fold = 2;
  if (this->fold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fold());
  }

  // int32 Score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // int32 turn = 5;
  if (this->turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoleState)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoleState)
    MergeFrom(*source);
  }
}

void RoleState::MergeFrom(const RoleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_cards_.MergeFrom(from.hole_cards_);
  if (from.spent() != 0) {
    set_spent(from.spent());
  }
  if (from.fold() != 0) {
    set_fold(from.fold());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.turn() != 0) {
    set_turn(from.turn());
  }
}

void RoleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleState::CopyFrom(const RoleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleState::IsInitialized() const {
  return true;
}

void RoleState::Swap(RoleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleState::InternalSwap(RoleState* other) {
  using std::swap;
  hole_cards_.InternalSwap(&other->hole_cards_);
  swap(spent_, other->spent_);
  swap(fold_, other->fold_);
  swap(score_, other->score_);
  swap(turn_, other->turn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleState::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleAction::kSeatFieldNumber;
const int RoleAction::kRoundFieldNumber;
const int RoleAction::kTypeFieldNumber;
const int RoleAction::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleAction::RoleAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsRoleAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RoleAction)
}
RoleAction::RoleAction(const RoleAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seat_, &from.seat_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&seat_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Pb.RoleAction)
}

void RoleAction::SharedCtor() {
  ::memset(&seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&seat_)) + sizeof(size_));
  _cached_size_ = 0;
}

RoleAction::~RoleAction() {
  // @@protoc_insertion_point(destructor:Pb.RoleAction)
  SharedDtor();
}

void RoleAction::SharedDtor() {
}

void RoleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleAction::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleAction& RoleAction::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsRoleAction();
  return *internal_default_instance();
}

RoleAction* RoleAction::New(::google::protobuf::Arena* arena) const {
  RoleAction* n = new RoleAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&seat_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool RoleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RoleAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RoleAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RoleAction)
  return false;
#undef DO_
}

void RoleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat = 1;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }

  // uint32 round = 2;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->round(), output);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RoleAction)
}

::google::protobuf::uint8* RoleAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RoleAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat = 1;
  if (this->seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }

  // uint32 round = 2;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->round(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RoleAction)
  return target;
}

size_t RoleAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RoleAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 seat = 1;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat());
  }

  // uint32 round = 2;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RoleAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RoleAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RoleAction)
    MergeFrom(*source);
  }
}

void RoleAction::MergeFrom(const RoleAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RoleAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat() != 0) {
    set_seat(from.seat());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void RoleAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RoleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAction::CopyFrom(const RoleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RoleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAction::IsInitialized() const {
  return true;
}

void RoleAction::Swap(RoleAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleAction::InternalSwap(RoleAction* other) {
  using std::swap;
  swap(seat_, other->seat_);
  swap(round_, other->round_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleAction::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryMatchStateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMatchStateReq::kRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMatchStateReq::QueryMatchStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsQueryMatchStateReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.QueryMatchStateReq)
}
QueryMatchStateReq::QueryMatchStateReq(const QueryMatchStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Pb.QueryMatchStateReq)
}

void QueryMatchStateReq::SharedCtor() {
  role_id_ = 0u;
  _cached_size_ = 0;
}

QueryMatchStateReq::~QueryMatchStateReq() {
  // @@protoc_insertion_point(destructor:Pb.QueryMatchStateReq)
  SharedDtor();
}

void QueryMatchStateReq::SharedDtor() {
}

void QueryMatchStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMatchStateReq::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMatchStateReq& QueryMatchStateReq::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsQueryMatchStateReq();
  return *internal_default_instance();
}

QueryMatchStateReq* QueryMatchStateReq::New(::google::protobuf::Arena* arena) const {
  QueryMatchStateReq* n = new QueryMatchStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMatchStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.QueryMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = 0u;
  _internal_metadata_.Clear();
}

bool QueryMatchStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.QueryMatchStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.QueryMatchStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.QueryMatchStateReq)
  return false;
#undef DO_
}

void QueryMatchStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.QueryMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.QueryMatchStateReq)
}

::google::protobuf::uint8* QueryMatchStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.QueryMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.QueryMatchStateReq)
  return target;
}

size_t QueryMatchStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.QueryMatchStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMatchStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.QueryMatchStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatchStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMatchStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.QueryMatchStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.QueryMatchStateReq)
    MergeFrom(*source);
  }
}

void QueryMatchStateReq::MergeFrom(const QueryMatchStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.QueryMatchStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void QueryMatchStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.QueryMatchStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatchStateReq::CopyFrom(const QueryMatchStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.QueryMatchStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatchStateReq::IsInitialized() const {
  return true;
}

void QueryMatchStateReq::Swap(QueryMatchStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMatchStateReq::InternalSwap(QueryMatchStateReq* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMatchStateReq::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryMatchStateResp::InitAsDefaultInstance() {
}
void QueryMatchStateResp::clear_board_cards() {
  board_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMatchStateResp::kRoomIdFieldNumber;
const int QueryMatchStateResp::kDealerRoleIdFieldNumber;
const int QueryMatchStateResp::kRoleIdFieldNumber;
const int QueryMatchStateResp::kHandIdFieldNumber;
const int QueryMatchStateResp::kRoundFieldNumber;
const int QueryMatchStateResp::kFinishedFieldNumber;
const int QueryMatchStateResp::kMaxSpentFieldNumber;
const int QueryMatchStateResp::kBoardCardsFieldNumber;
const int QueryMatchStateResp::kAllowRaiseFieldNumber;
const int QueryMatchStateResp::kRoleStateFieldNumber;
const int QueryMatchStateResp::kRoleActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMatchStateResp::QueryMatchStateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsQueryMatchStateResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.QueryMatchStateResp)
}
QueryMatchStateResp::QueryMatchStateResp(const QueryMatchStateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      board_cards_(from.board_cards_),
      allow_raise_(from.allow_raise_),
      role_state_(from.role_state_),
      role_action_(from.role_action_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spent_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(max_spent_));
  // @@protoc_insertion_point(copy_constructor:Pb.QueryMatchStateResp)
}

void QueryMatchStateResp::SharedCtor() {
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_spent_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(max_spent_));
  _cached_size_ = 0;
}

QueryMatchStateResp::~QueryMatchStateResp() {
  // @@protoc_insertion_point(destructor:Pb.QueryMatchStateResp)
  SharedDtor();
}

void QueryMatchStateResp::SharedDtor() {
}

void QueryMatchStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMatchStateResp::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMatchStateResp& QueryMatchStateResp::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsQueryMatchStateResp();
  return *internal_default_instance();
}

QueryMatchStateResp* QueryMatchStateResp::New(::google::protobuf::Arena* arena) const {
  QueryMatchStateResp* n = new QueryMatchStateResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMatchStateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.QueryMatchStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  board_cards_.Clear();
  allow_raise_.Clear();
  role_state_.Clear();
  role_action_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_spent_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(max_spent_));
  _internal_metadata_.Clear();
}

bool QueryMatchStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.QueryMatchStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finished = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_spent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allow_raise = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allow_raise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_allow_raise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.RoleState role_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.RoleAction role_action = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.QueryMatchStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.QueryMatchStateResp)
  return false;
#undef DO_
}

void QueryMatchStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.QueryMatchStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dealer_role_id(), output);
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_id(), output);
  }

  // uint32 round = 5;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->round(), output);
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->finished(), output);
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_spent(), output);
  }

  // repeated .Pb.AcpcCard board_cards = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->board_cards(static_cast<int>(i)), output);
  }

  // repeated uint32 allow_raise = 9;
  if (this->allow_raise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allow_raise_cached_byte_size_));
  }
  for (int i = 0, n = this->allow_raise_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->allow_raise(i), output);
  }

  // repeated .Pb.RoleState role_state = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->role_state(static_cast<int>(i)), output);
  }

  // repeated .Pb.RoleAction role_action = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_action_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->role_action(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.QueryMatchStateResp)
}

::google::protobuf::uint8* QueryMatchStateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.QueryMatchStateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dealer_role_id(), target);
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_id(), target);
  }

  // uint32 round = 5;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->round(), target);
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->finished(), target);
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_spent(), target);
  }

  // repeated .Pb.AcpcCard board_cards = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 allow_raise = 9;
  if (this->allow_raise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allow_raise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->allow_raise_, target);
  }

  // repeated .Pb.RoleState role_state = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->role_state(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.RoleAction role_action = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_action_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->role_action(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.QueryMatchStateResp)
  return target;
}

size_t QueryMatchStateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.QueryMatchStateResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.AcpcCard board_cards = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // repeated uint32 allow_raise = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allow_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allow_raise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.RoleState role_state = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->role_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_state(static_cast<int>(i)));
    }
  }

  // repeated .Pb.RoleAction role_action = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->role_action_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_action(static_cast<int>(i)));
    }
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 dealer_role_id = 2;
  if (this->dealer_role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_role_id());
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 hand_id = 4;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_id());
  }

  // uint32 round = 5;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 finished = 6;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished());
  }

  // uint32 max_spent = 7;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_spent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMatchStateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.QueryMatchStateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatchStateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMatchStateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.QueryMatchStateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.QueryMatchStateResp)
    MergeFrom(*source);
  }
}

void QueryMatchStateResp::MergeFrom(const QueryMatchStateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.QueryMatchStateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  board_cards_.MergeFrom(from.board_cards_);
  allow_raise_.MergeFrom(from.allow_raise_);
  role_state_.MergeFrom(from.role_state_);
  role_action_.MergeFrom(from.role_action_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.dealer_role_id() != 0) {
    set_dealer_role_id(from.dealer_role_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
}

void QueryMatchStateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.QueryMatchStateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatchStateResp::CopyFrom(const QueryMatchStateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.QueryMatchStateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatchStateResp::IsInitialized() const {
  return true;
}

void QueryMatchStateResp::Swap(QueryMatchStateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMatchStateResp::InternalSwap(QueryMatchStateResp* other) {
  using std::swap;
  board_cards_.InternalSwap(&other->board_cards_);
  allow_raise_.InternalSwap(&other->allow_raise_);
  role_state_.InternalSwap(&other->role_state_);
  role_action_.InternalSwap(&other->role_action_);
  swap(room_id_, other->room_id_);
  swap(dealer_role_id_, other->dealer_role_id_);
  swap(role_id_, other->role_id_);
  swap(hand_id_, other->hand_id_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  swap(max_spent_, other->max_spent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMatchStateResp::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedisRoomBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisRoomBase::kRoomIdFieldNumber;
const int RedisRoomBase::kGameTypeFieldNumber;
const int RedisRoomBase::kRobotParamFieldNumber;
const int RedisRoomBase::kSophiaNameFieldNumber;
const int RedisRoomBase::kDealerModeFieldNumber;
const int RedisRoomBase::kAllocSeatFieldNumber;
const int RedisRoomBase::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisRoomBase::RedisRoomBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsRedisRoomBase();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RedisRoomBase)
}
RedisRoomBase::RedisRoomBase(const RedisRoomBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robot_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_param().size() > 0) {
    robot_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_param_);
  }
  sophia_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sophia_name().size() > 0) {
    sophia_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sophia_name_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:Pb.RedisRoomBase)
}

void RedisRoomBase::SharedCtor() {
  robot_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sophia_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(expire_time_));
  _cached_size_ = 0;
}

RedisRoomBase::~RedisRoomBase() {
  // @@protoc_insertion_point(destructor:Pb.RedisRoomBase)
  SharedDtor();
}

void RedisRoomBase::SharedDtor() {
  robot_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sophia_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisRoomBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisRoomBase::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisRoomBase& RedisRoomBase::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsRedisRoomBase();
  return *internal_default_instance();
}

RedisRoomBase* RedisRoomBase::New(::google::protobuf::Arena* arena) const {
  RedisRoomBase* n = new RedisRoomBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisRoomBase::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RedisRoomBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sophia_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(expire_time_));
  _internal_metadata_.Clear();
}

bool RedisRoomBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RedisRoomBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robot_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robot_param().data(), static_cast<int>(this->robot_param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RedisRoomBase.robot_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sophia_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sophia_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sophia_name().data(), static_cast<int>(this->sophia_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RedisRoomBase.sophia_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 alloc_seat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alloc_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 expire_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RedisRoomBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RedisRoomBase)
  return false;
#undef DO_
}

void RedisRoomBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RedisRoomBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // string robot_param = 3;
  if (this->robot_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_param().data(), static_cast<int>(this->robot_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomBase.robot_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->robot_param(), output);
  }

  // string sophia_name = 4;
  if (this->sophia_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sophia_name().data(), static_cast<int>(this->sophia_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomBase.sophia_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sophia_name(), output);
  }

  // uint32 dealer_mode = 5;
  if (this->dealer_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dealer_mode(), output);
  }

  // uint32 alloc_seat = 6;
  if (this->alloc_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->alloc_seat(), output);
  }

  // uint32 expire_time = 7;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->expire_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RedisRoomBase)
}

::google::protobuf::uint8* RedisRoomBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RedisRoomBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // string robot_param = 3;
  if (this->robot_param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_param().data(), static_cast<int>(this->robot_param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomBase.robot_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->robot_param(), target);
  }

  // string sophia_name = 4;
  if (this->sophia_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sophia_name().data(), static_cast<int>(this->sophia_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomBase.sophia_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sophia_name(), target);
  }

  // uint32 dealer_mode = 5;
  if (this->dealer_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dealer_mode(), target);
  }

  // uint32 alloc_seat = 6;
  if (this->alloc_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->alloc_seat(), target);
  }

  // uint32 expire_time = 7;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->expire_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RedisRoomBase)
  return target;
}

size_t RedisRoomBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RedisRoomBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string robot_param = 3;
  if (this->robot_param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_param());
  }

  // string sophia_name = 4;
  if (this->sophia_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sophia_name());
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 dealer_mode = 5;
  if (this->dealer_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_mode());
  }

  // uint32 alloc_seat = 6;
  if (this->alloc_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alloc_seat());
  }

  // uint32 expire_time = 7;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expire_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisRoomBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RedisRoomBase)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisRoomBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisRoomBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RedisRoomBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RedisRoomBase)
    MergeFrom(*source);
  }
}

void RedisRoomBase::MergeFrom(const RedisRoomBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RedisRoomBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_param().size() > 0) {

    robot_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_param_);
  }
  if (from.sophia_name().size() > 0) {

    sophia_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sophia_name_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.dealer_mode() != 0) {
    set_dealer_mode(from.dealer_mode());
  }
  if (from.alloc_seat() != 0) {
    set_alloc_seat(from.alloc_seat());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
}

void RedisRoomBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RedisRoomBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisRoomBase::CopyFrom(const RedisRoomBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RedisRoomBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisRoomBase::IsInitialized() const {
  return true;
}

void RedisRoomBase::Swap(RedisRoomBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisRoomBase::InternalSwap(RedisRoomBase* other) {
  using std::swap;
  robot_param_.Swap(&other->robot_param_);
  sophia_name_.Swap(&other->sophia_name_);
  swap(room_id_, other->room_id_);
  swap(game_type_, other->game_type_);
  swap(dealer_mode_, other->dealer_mode_);
  swap(alloc_seat_, other->alloc_seat_);
  swap(expire_time_, other->expire_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisRoomBase::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedisRoomAction::InitAsDefaultInstance() {
}
void RedisRoomAction::clear_round_actions() {
  round_actions_.Clear();
}
void RedisRoomAction::clear_board_cards() {
  board_cards_.Clear();
}
void RedisRoomAction::clear_hole_cards() {
  hole_cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisRoomAction::kHandIdFieldNumber;
const int RedisRoomAction::kMaxSpentFieldNumber;
const int RedisRoomAction::kMinNolimitRaiseToFieldNumber;
const int RedisRoomAction::kSpentFieldNumber;
const int RedisRoomAction::kRoundActionsFieldNumber;
const int RedisRoomAction::kRoundFieldNumber;
const int RedisRoomAction::kFinishedFieldNumber;
const int RedisRoomAction::kFoldPlayersFieldNumber;
const int RedisRoomAction::kBoardCardsFieldNumber;
const int RedisRoomAction::kHoleCardsFieldNumber;
const int RedisRoomAction::kRoundSpentFieldNumber;
const int RedisRoomAction::kDealerRoundFieldNumber;
const int RedisRoomAction::kActionTimeFieldNumber;
const int RedisRoomAction::kActionRateFieldNumber;
const int RedisRoomAction::kReportLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisRoomAction::RedisRoomAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsRedisRoomAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RedisRoomAction)
}
RedisRoomAction::RedisRoomAction(const RedisRoomAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spent_(from.spent_),
      round_actions_(from.round_actions_),
      fold_players_(from.fold_players_),
      board_cards_(from.board_cards_),
      hole_cards_(from.hole_cards_),
      round_spent_(from.round_spent_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_rate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action_rate().size() > 0) {
    action_rate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_rate_);
  }
  report_logs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.report_logs().size() > 0) {
    report_logs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_logs_);
  }
  ::memcpy(&hand_id_, &from.hand_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_time_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(action_time_));
  // @@protoc_insertion_point(copy_constructor:Pb.RedisRoomAction)
}

void RedisRoomAction::SharedCtor() {
  action_rate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_logs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hand_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_time_) -
      reinterpret_cast<char*>(&hand_id_)) + sizeof(action_time_));
  _cached_size_ = 0;
}

RedisRoomAction::~RedisRoomAction() {
  // @@protoc_insertion_point(destructor:Pb.RedisRoomAction)
  SharedDtor();
}

void RedisRoomAction::SharedDtor() {
  action_rate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_logs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisRoomAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisRoomAction::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisRoomAction& RedisRoomAction::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsRedisRoomAction();
  return *internal_default_instance();
}

RedisRoomAction* RedisRoomAction::New(::google::protobuf::Arena* arena) const {
  RedisRoomAction* n = new RedisRoomAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisRoomAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RedisRoomAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spent_.Clear();
  round_actions_.Clear();
  fold_players_.Clear();
  board_cards_.Clear();
  hole_cards_.Clear();
  round_spent_.Clear();
  action_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_logs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hand_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_time_) -
      reinterpret_cast<char*>(&hand_id_)) + sizeof(action_time_));
  _internal_metadata_.Clear();
}

bool RedisRoomAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RedisRoomAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hand_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_spent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_nolimit_raise_to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_nolimit_raise_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 spent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcRound round_actions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_round_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 finished = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fold_players = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fold_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_fold_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard board_cards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_board_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.AcpcCard hole_cards = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 round_spent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_spent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_round_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dealer_round = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealer_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string action_rate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_rate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action_rate().data(), static_cast<int>(this->action_rate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RedisRoomAction.action_rate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string report_logs = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_report_logs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->report_logs().data(), static_cast<int>(this->report_logs().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RedisRoomAction.report_logs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RedisRoomAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RedisRoomAction)
  return false;
#undef DO_
}

void RedisRoomAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RedisRoomAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hand_id = 1;
  if (this->hand_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_id(), output);
  }

  // int32 max_spent = 2;
  if (this->max_spent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_spent(), output);
  }

  // int32 min_nolimit_raise_to = 3;
  if (this->min_nolimit_raise_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_nolimit_raise_to(), output);
  }

  // repeated int32 spent = 4;
  if (this->spent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _spent_cached_byte_size_));
  }
  for (int i = 0, n = this->spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->spent(i), output);
  }

  // repeated .Pb.AcpcRound round_actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->round_actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->round_actions(static_cast<int>(i)), output);
  }

  // int32 round = 6;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->round(), output);
  }

  // int32 finished = 7;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->finished(), output);
  }

  // repeated int32 fold_players = 8;
  if (this->fold_players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fold_players_cached_byte_size_));
  }
  for (int i = 0, n = this->fold_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fold_players(i), output);
  }

  // repeated .Pb.AcpcCard board_cards = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->board_cards(static_cast<int>(i)), output);
  }

  // repeated .Pb.AcpcCard hole_cards = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hole_cards(static_cast<int>(i)), output);
  }

  // repeated int32 round_spent = 11;
  if (this->round_spent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _round_spent_cached_byte_size_));
  }
  for (int i = 0, n = this->round_spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->round_spent(i), output);
  }

  // uint32 dealer_round = 12;
  if (this->dealer_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dealer_round(), output);
  }

  // uint32 action_time = 13;
  if (this->action_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->action_time(), output);
  }

  // string action_rate = 14;
  if (this->action_rate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_rate().data(), static_cast<int>(this->action_rate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomAction.action_rate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->action_rate(), output);
  }

  // string report_logs = 15;
  if (this->report_logs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->report_logs().data(), static_cast<int>(this->report_logs().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomAction.report_logs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->report_logs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RedisRoomAction)
}

::google::protobuf::uint8* RedisRoomAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RedisRoomAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hand_id = 1;
  if (this->hand_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_id(), target);
  }

  // int32 max_spent = 2;
  if (this->max_spent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_spent(), target);
  }

  // int32 min_nolimit_raise_to = 3;
  if (this->min_nolimit_raise_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_nolimit_raise_to(), target);
  }

  // repeated int32 spent = 4;
  if (this->spent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _spent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->spent_, target);
  }

  // repeated .Pb.AcpcRound round_actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->round_actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->round_actions(static_cast<int>(i)), deterministic, target);
  }

  // int32 round = 6;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->round(), target);
  }

  // int32 finished = 7;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->finished(), target);
  }

  // repeated int32 fold_players = 8;
  if (this->fold_players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _fold_players_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fold_players_, target);
  }

  // repeated .Pb.AcpcCard board_cards = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->board_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->board_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pb.AcpcCard hole_cards = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->hole_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 round_spent = 11;
  if (this->round_spent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _round_spent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->round_spent_, target);
  }

  // uint32 dealer_round = 12;
  if (this->dealer_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dealer_round(), target);
  }

  // uint32 action_time = 13;
  if (this->action_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->action_time(), target);
  }

  // string action_rate = 14;
  if (this->action_rate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_rate().data(), static_cast<int>(this->action_rate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomAction.action_rate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->action_rate(), target);
  }

  // string report_logs = 15;
  if (this->report_logs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->report_logs().data(), static_cast<int>(this->report_logs().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomAction.report_logs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->report_logs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RedisRoomAction)
  return target;
}

size_t RedisRoomAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RedisRoomAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 spent = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->spent_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.AcpcRound round_actions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->round_actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->round_actions(static_cast<int>(i)));
    }
  }

  // repeated int32 fold_players = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fold_players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fold_players_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Pb.AcpcCard board_cards = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->board_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->board_cards(static_cast<int>(i)));
    }
  }

  // repeated .Pb.AcpcCard hole_cards = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole_cards(static_cast<int>(i)));
    }
  }

  // repeated int32 round_spent = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->round_spent_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _round_spent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string action_rate = 14;
  if (this->action_rate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action_rate());
  }

  // string report_logs = 15;
  if (this->report_logs().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->report_logs());
  }

  // int32 hand_id = 1;
  if (this->hand_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hand_id());
  }

  // int32 max_spent = 2;
  if (this->max_spent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_spent());
  }

  // int32 min_nolimit_raise_to = 3;
  if (this->min_nolimit_raise_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_nolimit_raise_to());
  }

  // int32 round = 6;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // int32 finished = 7;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finished());
  }

  // uint32 dealer_round = 12;
  if (this->dealer_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealer_round());
  }

  // uint32 action_time = 13;
  if (this->action_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisRoomAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RedisRoomAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisRoomAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisRoomAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RedisRoomAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RedisRoomAction)
    MergeFrom(*source);
  }
}

void RedisRoomAction::MergeFrom(const RedisRoomAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RedisRoomAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spent_.MergeFrom(from.spent_);
  round_actions_.MergeFrom(from.round_actions_);
  fold_players_.MergeFrom(from.fold_players_);
  board_cards_.MergeFrom(from.board_cards_);
  hole_cards_.MergeFrom(from.hole_cards_);
  round_spent_.MergeFrom(from.round_spent_);
  if (from.action_rate().size() > 0) {

    action_rate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_rate_);
  }
  if (from.report_logs().size() > 0) {

    report_logs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_logs_);
  }
  if (from.hand_id() != 0) {
    set_hand_id(from.hand_id());
  }
  if (from.max_spent() != 0) {
    set_max_spent(from.max_spent());
  }
  if (from.min_nolimit_raise_to() != 0) {
    set_min_nolimit_raise_to(from.min_nolimit_raise_to());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.dealer_round() != 0) {
    set_dealer_round(from.dealer_round());
  }
  if (from.action_time() != 0) {
    set_action_time(from.action_time());
  }
}

void RedisRoomAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RedisRoomAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisRoomAction::CopyFrom(const RedisRoomAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RedisRoomAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisRoomAction::IsInitialized() const {
  return true;
}

void RedisRoomAction::Swap(RedisRoomAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisRoomAction::InternalSwap(RedisRoomAction* other) {
  using std::swap;
  spent_.InternalSwap(&other->spent_);
  round_actions_.InternalSwap(&other->round_actions_);
  fold_players_.InternalSwap(&other->fold_players_);
  board_cards_.InternalSwap(&other->board_cards_);
  hole_cards_.InternalSwap(&other->hole_cards_);
  round_spent_.InternalSwap(&other->round_spent_);
  action_rate_.Swap(&other->action_rate_);
  report_logs_.Swap(&other->report_logs_);
  swap(hand_id_, other->hand_id_);
  swap(max_spent_, other->max_spent_);
  swap(min_nolimit_raise_to_, other->min_nolimit_raise_to_);
  swap(round_, other->round_);
  swap(finished_, other->finished_);
  swap(dealer_round_, other->dealer_round_);
  swap(action_time_, other->action_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisRoomAction::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedisRoomReady::InitAsDefaultInstance() {
}
void RedisRoomReady::clear_role_info() {
  role_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisRoomReady::kRoleInfoFieldNumber;
const int RedisRoomReady::kIsRunningFieldNumber;
const int RedisRoomReady::kGameTimeFieldNumber;
const int RedisRoomReady::kP0SeatFieldNumber;
const int RedisRoomReady::kTcardsIndexFieldNumber;
const int RedisRoomReady::kCfrModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisRoomReady::RedisRoomReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_acpc_2eproto::InitDefaultsRedisRoomReady();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.RedisRoomReady)
}
RedisRoomReady::RedisRoomReady(const RedisRoomReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_info_(from.role_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cfr_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfr_model().size() > 0) {
    cfr_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfr_model_);
  }
  ::memcpy(&is_running_, &from.is_running_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcards_index_) -
    reinterpret_cast<char*>(&is_running_)) + sizeof(tcards_index_));
  // @@protoc_insertion_point(copy_constructor:Pb.RedisRoomReady)
}

void RedisRoomReady::SharedCtor() {
  cfr_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_running_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcards_index_) -
      reinterpret_cast<char*>(&is_running_)) + sizeof(tcards_index_));
  _cached_size_ = 0;
}

RedisRoomReady::~RedisRoomReady() {
  // @@protoc_insertion_point(destructor:Pb.RedisRoomReady)
  SharedDtor();
}

void RedisRoomReady::SharedDtor() {
  cfr_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisRoomReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisRoomReady::descriptor() {
  ::protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisRoomReady& RedisRoomReady::default_instance() {
  ::protobuf_acpc_2eproto::InitDefaultsRedisRoomReady();
  return *internal_default_instance();
}

RedisRoomReady* RedisRoomReady::New(::google::protobuf::Arena* arena) const {
  RedisRoomReady* n = new RedisRoomReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisRoomReady::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.RedisRoomReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_info_.Clear();
  cfr_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_running_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcards_index_) -
      reinterpret_cast<char*>(&is_running_)) + sizeof(tcards_index_));
  _internal_metadata_.Clear();
}

bool RedisRoomReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.RedisRoomReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pb.RoomRole role_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_running = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 p0seat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p0seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcards_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcards_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfr_model = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfr_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.RedisRoomReady.cfr_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.RedisRoomReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.RedisRoomReady)
  return false;
#undef DO_
}

void RedisRoomReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.RedisRoomReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.RoomRole role_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_info(static_cast<int>(i)), output);
  }

  // bool is_running = 2;
  if (this->is_running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_running(), output);
  }

  // uint32 game_time = 3;
  if (this->game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_time(), output);
  }

  // uint32 p0seat = 4;
  if (this->p0seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->p0seat(), output);
  }

  // uint32 tcards_index = 5;
  if (this->tcards_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tcards_index(), output);
  }

  // string cfr_model = 6;
  if (this->cfr_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomReady.cfr_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cfr_model(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.RedisRoomReady)
}

::google::protobuf::uint8* RedisRoomReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.RedisRoomReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb.RoomRole role_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->role_info(static_cast<int>(i)), deterministic, target);
  }

  // bool is_running = 2;
  if (this->is_running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_running(), target);
  }

  // uint32 game_time = 3;
  if (this->game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_time(), target);
  }

  // uint32 p0seat = 4;
  if (this->p0seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->p0seat(), target);
  }

  // uint32 tcards_index = 5;
  if (this->tcards_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tcards_index(), target);
  }

  // string cfr_model = 6;
  if (this->cfr_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfr_model().data(), static_cast<int>(this->cfr_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.RedisRoomReady.cfr_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cfr_model(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.RedisRoomReady)
  return target;
}

size_t RedisRoomReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.RedisRoomReady)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.RoomRole role_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->role_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_info(static_cast<int>(i)));
    }
  }

  // string cfr_model = 6;
  if (this->cfr_model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfr_model());
  }

  // bool is_running = 2;
  if (this->is_running() != 0) {
    total_size += 1 + 1;
  }

  // uint32 game_time = 3;
  if (this->game_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_time());
  }

  // uint32 p0seat = 4;
  if (this->p0seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->p0seat());
  }

  // uint32 tcards_index = 5;
  if (this->tcards_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcards_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisRoomReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.RedisRoomReady)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisRoomReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisRoomReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.RedisRoomReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.RedisRoomReady)
    MergeFrom(*source);
  }
}

void RedisRoomReady::MergeFrom(const RedisRoomReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.RedisRoomReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_info_.MergeFrom(from.role_info_);
  if (from.cfr_model().size() > 0) {

    cfr_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfr_model_);
  }
  if (from.is_running() != 0) {
    set_is_running(from.is_running());
  }
  if (from.game_time() != 0) {
    set_game_time(from.game_time());
  }
  if (from.p0seat() != 0) {
    set_p0seat(from.p0seat());
  }
  if (from.tcards_index() != 0) {
    set_tcards_index(from.tcards_index());
  }
}

void RedisRoomReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.RedisRoomReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisRoomReady::CopyFrom(const RedisRoomReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.RedisRoomReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisRoomReady::IsInitialized() const {
  return true;
}

void RedisRoomReady::Swap(RedisRoomReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisRoomReady::InternalSwap(RedisRoomReady* other) {
  using std::swap;
  role_info_.InternalSwap(&other->role_info_);
  cfr_model_.Swap(&other->cfr_model_);
  swap(is_running_, other->is_running_);
  swap(game_time_, other->game_time_);
  swap(p0seat_, other->p0seat_);
  swap(tcards_index_, other->tcards_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisRoomReady::GetMetadata() const {
  protobuf_acpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_acpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
