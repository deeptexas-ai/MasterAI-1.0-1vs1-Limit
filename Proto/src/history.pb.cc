// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history.proto

#include "history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Pb {
class BattleRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleRole>
      _instance;
} _BattleRole_default_instance_;
class BattleHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleHistory>
      _instance;
} _BattleHistory_default_instance_;
}  // namespace Pb
namespace protobuf_history_2eproto {
void InitDefaultsBattleRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Pb::_BattleRole_default_instance_;
    new (ptr) ::Pb::BattleRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::BattleRole::InitAsDefaultInstance();
}

void InitDefaultsBattleRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBattleRoleImpl);
}

void InitDefaultsBattleHistoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_history_2eproto::InitDefaultsBattleRole();
  protobuf_system_2eproto::InitDefaultsAcpcState();
  {
    void* ptr = &::Pb::_BattleHistory_default_instance_;
    new (ptr) ::Pb::BattleHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pb::BattleHistory::InitAsDefaultInstance();
}

void InitDefaultsBattleHistory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBattleHistoryImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, role_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, role_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, role_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, is_ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleRole, role_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, room_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, role_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, role_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pb::BattleHistory, state_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb::BattleRole)},
  { 12, -1, sizeof(::Pb::BattleHistory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_BattleRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Pb::_BattleHistory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "history.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rhistory.proto\022\002Pb\032\014system.proto\"\216\001\n\nBa"
      "ttleRole\022\017\n\007role_id\030\001 \001(\r\022\021\n\trole_name\030\002"
      " \001(\t\022\021\n\trole_type\030\003 \001(\r\022\020\n\010role_img\030\004 \001("
      "\t\022\021\n\trole_seat\030\005 \001(\r\022\020\n\010is_ready\030\006 \001(\r\022\022"
      "\n\nrole_score\030\007 \001(\005\"\321\001\n\rBattleHistory\022\017\n\007"
      "room_id\030\001 \001(\004\022\021\n\troom_name\030\002 \001(\t\022\017\n\007role"
      "_id\030\003 \001(\r\022\021\n\trole_name\030\004 \001(\t\022\021\n\tgame_typ"
      "e\030\005 \001(\r\022\022\n\ndifficulty\030\006 \001(\r\022\020\n\010password\030"
      "\007 \001(\t\022!\n\trole_info\030\010 \003(\0132\016.Pb.BattleRole"
      "\022\034\n\005state\030\t \001(\0132\r.Pb.AcpcStateb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "history.proto", &protobuf_RegisterTypes);
  ::protobuf_system_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_history_2eproto
namespace Pb {

// ===================================================================

void BattleRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleRole::kRoleIdFieldNumber;
const int BattleRole::kRoleNameFieldNumber;
const int BattleRole::kRoleTypeFieldNumber;
const int BattleRole::kRoleImgFieldNumber;
const int BattleRole::kRoleSeatFieldNumber;
const int BattleRole::kIsReadyFieldNumber;
const int BattleRole::kRoleScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleRole::BattleRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_history_2eproto::InitDefaultsBattleRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.BattleRole)
}
BattleRole::BattleRole(const BattleRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_img().size() > 0) {
    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_score_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(role_score_));
  // @@protoc_insertion_point(copy_constructor:Pb.BattleRole)
}

void BattleRole::SharedCtor() {
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_score_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(role_score_));
  _cached_size_ = 0;
}

BattleRole::~BattleRole() {
  // @@protoc_insertion_point(destructor:Pb.BattleRole)
  SharedDtor();
}

void BattleRole::SharedDtor() {
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BattleRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRole::descriptor() {
  ::protobuf_history_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_history_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleRole& BattleRole::default_instance() {
  ::protobuf_history_2eproto::InitDefaultsBattleRole();
  return *internal_default_instance();
}

BattleRole* BattleRole::New(::google::protobuf::Arena* arena) const {
  BattleRole* n = new BattleRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleRole::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.BattleRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_score_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(role_score_));
  _internal_metadata_.Clear();
}

bool BattleRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.BattleRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.BattleRole.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_img = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_img()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_img().data(), static_cast<int>(this->role_img().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.BattleRole.role_img"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_seat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_ready = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 role_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.BattleRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.BattleRole)
  return false;
#undef DO_
}

void BattleRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.BattleRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleRole.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_name(), output);
  }

  // uint32 role_type = 3;
  if (this->role_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_type(), output);
  }

  // string role_img = 4;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleRole.role_img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->role_img(), output);
  }

  // uint32 role_seat = 5;
  if (this->role_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_seat(), output);
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_ready(), output);
  }

  // int32 role_score = 7;
  if (this->role_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.BattleRole)
}

::google::protobuf::uint8* BattleRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.BattleRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleRole.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // uint32 role_type = 3;
  if (this->role_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_type(), target);
  }

  // string role_img = 4;
  if (this->role_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_img().data(), static_cast<int>(this->role_img().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleRole.role_img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_img(), target);
  }

  // uint32 role_seat = 5;
  if (this->role_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_seat(), target);
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_ready(), target);
  }

  // int32 role_score = 7;
  if (this->role_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.BattleRole)
  return target;
}

size_t BattleRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.BattleRole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string role_img = 4;
  if (this->role_img().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_img());
  }

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 role_type = 3;
  if (this->role_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_type());
  }

  // uint32 role_seat = 5;
  if (this->role_seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_seat());
  }

  // uint32 is_ready = 6;
  if (this->is_ready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_ready());
  }

  // int32 role_score = 7;
  if (this->role_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.BattleRole)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.BattleRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.BattleRole)
    MergeFrom(*source);
  }
}

void BattleRole::MergeFrom(const BattleRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.BattleRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.role_img().size() > 0) {

    role_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_img_);
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.role_type() != 0) {
    set_role_type(from.role_type());
  }
  if (from.role_seat() != 0) {
    set_role_seat(from.role_seat());
  }
  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
  if (from.role_score() != 0) {
    set_role_score(from.role_score());
  }
}

void BattleRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.BattleRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRole::CopyFrom(const BattleRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.BattleRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRole::IsInitialized() const {
  return true;
}

void BattleRole::Swap(BattleRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleRole::InternalSwap(BattleRole* other) {
  using std::swap;
  role_name_.Swap(&other->role_name_);
  role_img_.Swap(&other->role_img_);
  swap(role_id_, other->role_id_);
  swap(role_type_, other->role_type_);
  swap(role_seat_, other->role_seat_);
  swap(is_ready_, other->is_ready_);
  swap(role_score_, other->role_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleRole::GetMetadata() const {
  protobuf_history_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_history_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BattleHistory::InitAsDefaultInstance() {
  ::Pb::_BattleHistory_default_instance_._instance.get_mutable()->state_ = const_cast< ::Pb::AcpcState*>(
      ::Pb::AcpcState::internal_default_instance());
}
void BattleHistory::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleHistory::kRoomIdFieldNumber;
const int BattleHistory::kRoomNameFieldNumber;
const int BattleHistory::kRoleIdFieldNumber;
const int BattleHistory::kRoleNameFieldNumber;
const int BattleHistory::kGameTypeFieldNumber;
const int BattleHistory::kDifficultyFieldNumber;
const int BattleHistory::kPasswordFieldNumber;
const int BattleHistory::kRoleInfoFieldNumber;
const int BattleHistory::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleHistory::BattleHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_history_2eproto::InitDefaultsBattleHistory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pb.BattleHistory)
}
BattleHistory::BattleHistory(const BattleHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      role_info_(from.role_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_name().size() > 0) {
    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_state()) {
    state_ = new ::Pb::AcpcState(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:Pb.BattleHistory)
}

void BattleHistory::SharedCtor() {
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&state_)) + sizeof(difficulty_));
  _cached_size_ = 0;
}

BattleHistory::~BattleHistory() {
  // @@protoc_insertion_point(destructor:Pb.BattleHistory)
  SharedDtor();
}

void BattleHistory::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void BattleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHistory::descriptor() {
  ::protobuf_history_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_history_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleHistory& BattleHistory::default_instance() {
  ::protobuf_history_2eproto::InitDefaultsBattleHistory();
  return *internal_default_instance();
}

BattleHistory* BattleHistory::New(::google::protobuf::Arena* arena) const {
  BattleHistory* n = new BattleHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.BattleHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_info_.Clear();
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(difficulty_));
  _internal_metadata_.Clear();
}

bool BattleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pb.BattleHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.BattleHistory.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_name().data(), static_cast<int>(this->role_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.BattleHistory.role_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Pb.BattleHistory.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pb.BattleRole role_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_role_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Pb.AcpcState state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pb.BattleHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pb.BattleHistory)
  return false;
#undef DO_
}

void BattleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pb.BattleHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // string room_name = 2;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleHistory.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_name(), output);
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // string role_name = 4;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleHistory.role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->role_name(), output);
  }

  // uint32 game_type = 5;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_type(), output);
  }

  // uint32 difficulty = 6;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->difficulty(), output);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleHistory.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password(), output);
  }

  // repeated .Pb.BattleRole role_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_info(static_cast<int>(i)), output);
  }

  // .Pb.AcpcState state = 9;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pb.BattleHistory)
}

::google::protobuf::uint8* BattleHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pb.BattleHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // string room_name = 2;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleHistory.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // string role_name = 4;
  if (this->role_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_name().data(), static_cast<int>(this->role_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleHistory.role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_name(), target);
  }

  // uint32 game_type = 5;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_type(), target);
  }

  // uint32 difficulty = 6;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->difficulty(), target);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Pb.BattleHistory.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  // repeated .Pb.BattleRole role_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->role_info(static_cast<int>(i)), deterministic, target);
  }

  // .Pb.AcpcState state = 9;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.BattleHistory)
  return target;
}

size_t BattleHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.BattleHistory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Pb.BattleRole role_info = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->role_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_info(static_cast<int>(i)));
    }
  }

  // string room_name = 2;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // string role_name = 4;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_name());
  }

  // string password = 7;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .Pb.AcpcState state = 9;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint32 role_id = 3;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  // uint32 game_type = 5;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 difficulty = 6;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb.BattleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb.BattleHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb.BattleHistory)
    MergeFrom(*source);
  }
}

void BattleHistory::MergeFrom(const BattleHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb.BattleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_info_.MergeFrom(from.role_info_);
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_state()) {
    mutable_state()->::Pb::AcpcState::MergeFrom(from.state());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
}

void BattleHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb.BattleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHistory::CopyFrom(const BattleHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.BattleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistory::IsInitialized() const {
  return true;
}

void BattleHistory::Swap(BattleHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleHistory::InternalSwap(BattleHistory* other) {
  using std::swap;
  role_info_.InternalSwap(&other->role_info_);
  room_name_.Swap(&other->room_name_);
  role_name_.Swap(&other->role_name_);
  password_.Swap(&other->password_);
  swap(state_, other->state_);
  swap(room_id_, other->room_id_);
  swap(role_id_, other->role_id_);
  swap(game_type_, other->game_type_);
  swap(difficulty_, other->difficulty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleHistory::GetMetadata() const {
  protobuf_history_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_history_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pb

// @@protoc_insertion_point(global_scope)
