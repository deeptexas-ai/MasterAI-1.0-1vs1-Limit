// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history.proto

#ifndef PROTOBUF_history_2eproto__INCLUDED
#define PROTOBUF_history_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "system.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_history_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBattleRoleImpl();
void InitDefaultsBattleRole();
void InitDefaultsBattleHistoryImpl();
void InitDefaultsBattleHistory();
inline void InitDefaults() {
  InitDefaultsBattleRole();
  InitDefaultsBattleHistory();
}
}  // namespace protobuf_history_2eproto
namespace Pb {
class BattleHistory;
class BattleHistoryDefaultTypeInternal;
extern BattleHistoryDefaultTypeInternal _BattleHistory_default_instance_;
class BattleRole;
class BattleRoleDefaultTypeInternal;
extern BattleRoleDefaultTypeInternal _BattleRole_default_instance_;
}  // namespace Pb
namespace Pb {

// ===================================================================

class BattleRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.BattleRole) */ {
 public:
  BattleRole();
  virtual ~BattleRole();

  BattleRole(const BattleRole& from);

  inline BattleRole& operator=(const BattleRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattleRole(BattleRole&& from) noexcept
    : BattleRole() {
    *this = ::std::move(from);
  }

  inline BattleRole& operator=(BattleRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleRole* internal_default_instance() {
    return reinterpret_cast<const BattleRole*>(
               &_BattleRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BattleRole* other);
  friend void swap(BattleRole& a, BattleRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattleRole* New() const PROTOBUF_FINAL { return New(NULL); }

  BattleRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattleRole& from);
  void MergeFrom(const BattleRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattleRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role_name = 2;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string role_img = 4;
  void clear_role_img();
  static const int kRoleImgFieldNumber = 4;
  const ::std::string& role_img() const;
  void set_role_img(const ::std::string& value);
  #if LANG_CXX11
  void set_role_img(::std::string&& value);
  #endif
  void set_role_img(const char* value);
  void set_role_img(const char* value, size_t size);
  ::std::string* mutable_role_img();
  ::std::string* release_role_img();
  void set_allocated_role_img(::std::string* role_img);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 role_type = 3;
  void clear_role_type();
  static const int kRoleTypeFieldNumber = 3;
  ::google::protobuf::uint32 role_type() const;
  void set_role_type(::google::protobuf::uint32 value);

  // uint32 role_seat = 5;
  void clear_role_seat();
  static const int kRoleSeatFieldNumber = 5;
  ::google::protobuf::uint32 role_seat() const;
  void set_role_seat(::google::protobuf::uint32 value);

  // uint32 is_ready = 6;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 6;
  ::google::protobuf::uint32 is_ready() const;
  void set_is_ready(::google::protobuf::uint32 value);

  // int32 role_score = 7;
  void clear_role_score();
  static const int kRoleScoreFieldNumber = 7;
  ::google::protobuf::int32 role_score() const;
  void set_role_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.BattleRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr role_img_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 role_type_;
  ::google::protobuf::uint32 role_seat_;
  ::google::protobuf::uint32 is_ready_;
  ::google::protobuf::int32 role_score_;
  mutable int _cached_size_;
  friend struct ::protobuf_history_2eproto::TableStruct;
  friend void ::protobuf_history_2eproto::InitDefaultsBattleRoleImpl();
};
// -------------------------------------------------------------------

class BattleHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.BattleHistory) */ {
 public:
  BattleHistory();
  virtual ~BattleHistory();

  BattleHistory(const BattleHistory& from);

  inline BattleHistory& operator=(const BattleHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattleHistory(BattleHistory&& from) noexcept
    : BattleHistory() {
    *this = ::std::move(from);
  }

  inline BattleHistory& operator=(BattleHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleHistory* internal_default_instance() {
    return reinterpret_cast<const BattleHistory*>(
               &_BattleHistory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BattleHistory* other);
  friend void swap(BattleHistory& a, BattleHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattleHistory* New() const PROTOBUF_FINAL { return New(NULL); }

  BattleHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattleHistory& from);
  void MergeFrom(const BattleHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattleHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.BattleRole role_info = 8;
  int role_info_size() const;
  void clear_role_info();
  static const int kRoleInfoFieldNumber = 8;
  const ::Pb::BattleRole& role_info(int index) const;
  ::Pb::BattleRole* mutable_role_info(int index);
  ::Pb::BattleRole* add_role_info();
  ::google::protobuf::RepeatedPtrField< ::Pb::BattleRole >*
      mutable_role_info();
  const ::google::protobuf::RepeatedPtrField< ::Pb::BattleRole >&
      role_info() const;

  // string room_name = 2;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // string role_name = 4;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 4;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string password = 7;
  void clear_password();
  static const int kPasswordFieldNumber = 7;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .Pb.AcpcState state = 9;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 9;
  const ::Pb::AcpcState& state() const;
  ::Pb::AcpcState* release_state();
  ::Pb::AcpcState* mutable_state();
  void set_allocated_state(::Pb::AcpcState* state);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 3;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 game_type = 5;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 5;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 difficulty = 6;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 6;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.BattleHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::BattleRole > role_info_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::Pb::AcpcState* state_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 difficulty_;
  mutable int _cached_size_;
  friend struct ::protobuf_history_2eproto::TableStruct;
  friend void ::protobuf_history_2eproto::InitDefaultsBattleHistoryImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BattleRole

// uint32 role_id = 1;
inline void BattleRole::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 BattleRole::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.role_id)
  return role_id_;
}
inline void BattleRole::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleRole.role_id)
}

// string role_name = 2;
inline void BattleRole::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattleRole::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.role_name)
  return role_name_.GetNoArena();
}
inline void BattleRole::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.BattleRole.role_name)
}
#if LANG_CXX11
inline void BattleRole::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.BattleRole.role_name)
}
#endif
inline void BattleRole::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.BattleRole.role_name)
}
inline void BattleRole::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.BattleRole.role_name)
}
inline ::std::string* BattleRole::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.BattleRole.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattleRole::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.BattleRole.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattleRole::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.BattleRole.role_name)
}

// uint32 role_type = 3;
inline void BattleRole::clear_role_type() {
  role_type_ = 0u;
}
inline ::google::protobuf::uint32 BattleRole::role_type() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.role_type)
  return role_type_;
}
inline void BattleRole::set_role_type(::google::protobuf::uint32 value) {
  
  role_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleRole.role_type)
}

// string role_img = 4;
inline void BattleRole::clear_role_img() {
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattleRole::role_img() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.role_img)
  return role_img_.GetNoArena();
}
inline void BattleRole::set_role_img(const ::std::string& value) {
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.BattleRole.role_img)
}
#if LANG_CXX11
inline void BattleRole::set_role_img(::std::string&& value) {
  
  role_img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.BattleRole.role_img)
}
#endif
inline void BattleRole::set_role_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.BattleRole.role_img)
}
inline void BattleRole::set_role_img(const char* value, size_t size) {
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.BattleRole.role_img)
}
inline ::std::string* BattleRole::mutable_role_img() {
  
  // @@protoc_insertion_point(field_mutable:Pb.BattleRole.role_img)
  return role_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattleRole::release_role_img() {
  // @@protoc_insertion_point(field_release:Pb.BattleRole.role_img)
  
  return role_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattleRole::set_allocated_role_img(::std::string* role_img) {
  if (role_img != NULL) {
    
  } else {
    
  }
  role_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_img);
  // @@protoc_insertion_point(field_set_allocated:Pb.BattleRole.role_img)
}

// uint32 role_seat = 5;
inline void BattleRole::clear_role_seat() {
  role_seat_ = 0u;
}
inline ::google::protobuf::uint32 BattleRole::role_seat() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.role_seat)
  return role_seat_;
}
inline void BattleRole::set_role_seat(::google::protobuf::uint32 value) {
  
  role_seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleRole.role_seat)
}

// uint32 is_ready = 6;
inline void BattleRole::clear_is_ready() {
  is_ready_ = 0u;
}
inline ::google::protobuf::uint32 BattleRole::is_ready() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.is_ready)
  return is_ready_;
}
inline void BattleRole::set_is_ready(::google::protobuf::uint32 value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleRole.is_ready)
}

// int32 role_score = 7;
inline void BattleRole::clear_role_score() {
  role_score_ = 0;
}
inline ::google::protobuf::int32 BattleRole::role_score() const {
  // @@protoc_insertion_point(field_get:Pb.BattleRole.role_score)
  return role_score_;
}
inline void BattleRole::set_role_score(::google::protobuf::int32 value) {
  
  role_score_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleRole.role_score)
}

// -------------------------------------------------------------------

// BattleHistory

// uint64 room_id = 1;
inline void BattleHistory::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BattleHistory::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.room_id)
  return room_id_;
}
inline void BattleHistory::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.room_id)
}

// string room_name = 2;
inline void BattleHistory::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattleHistory::room_name() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.room_name)
  return room_name_.GetNoArena();
}
inline void BattleHistory::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.room_name)
}
#if LANG_CXX11
inline void BattleHistory::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.BattleHistory.room_name)
}
#endif
inline void BattleHistory::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.BattleHistory.room_name)
}
inline void BattleHistory::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.BattleHistory.room_name)
}
inline ::std::string* BattleHistory::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.BattleHistory.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattleHistory::release_room_name() {
  // @@protoc_insertion_point(field_release:Pb.BattleHistory.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattleHistory::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.BattleHistory.room_name)
}

// uint32 role_id = 3;
inline void BattleHistory::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 BattleHistory::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.role_id)
  return role_id_;
}
inline void BattleHistory::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.role_id)
}

// string role_name = 4;
inline void BattleHistory::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattleHistory::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.role_name)
  return role_name_.GetNoArena();
}
inline void BattleHistory::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.role_name)
}
#if LANG_CXX11
inline void BattleHistory::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.BattleHistory.role_name)
}
#endif
inline void BattleHistory::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.BattleHistory.role_name)
}
inline void BattleHistory::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.BattleHistory.role_name)
}
inline ::std::string* BattleHistory::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.BattleHistory.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattleHistory::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.BattleHistory.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattleHistory::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.BattleHistory.role_name)
}

// uint32 game_type = 5;
inline void BattleHistory::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 BattleHistory::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.game_type)
  return game_type_;
}
inline void BattleHistory::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.game_type)
}

// uint32 difficulty = 6;
inline void BattleHistory::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 BattleHistory::difficulty() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.difficulty)
  return difficulty_;
}
inline void BattleHistory::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.difficulty)
}

// string password = 7;
inline void BattleHistory::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattleHistory::password() const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.password)
  return password_.GetNoArena();
}
inline void BattleHistory::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.BattleHistory.password)
}
#if LANG_CXX11
inline void BattleHistory::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.BattleHistory.password)
}
#endif
inline void BattleHistory::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.BattleHistory.password)
}
inline void BattleHistory::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.BattleHistory.password)
}
inline ::std::string* BattleHistory::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Pb.BattleHistory.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattleHistory::release_password() {
  // @@protoc_insertion_point(field_release:Pb.BattleHistory.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattleHistory::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Pb.BattleHistory.password)
}

// repeated .Pb.BattleRole role_info = 8;
inline int BattleHistory::role_info_size() const {
  return role_info_.size();
}
inline void BattleHistory::clear_role_info() {
  role_info_.Clear();
}
inline const ::Pb::BattleRole& BattleHistory::role_info(int index) const {
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.role_info)
  return role_info_.Get(index);
}
inline ::Pb::BattleRole* BattleHistory::mutable_role_info(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.BattleHistory.role_info)
  return role_info_.Mutable(index);
}
inline ::Pb::BattleRole* BattleHistory::add_role_info() {
  // @@protoc_insertion_point(field_add:Pb.BattleHistory.role_info)
  return role_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::BattleRole >*
BattleHistory::mutable_role_info() {
  // @@protoc_insertion_point(field_mutable_list:Pb.BattleHistory.role_info)
  return &role_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::BattleRole >&
BattleHistory::role_info() const {
  // @@protoc_insertion_point(field_list:Pb.BattleHistory.role_info)
  return role_info_;
}

// .Pb.AcpcState state = 9;
inline bool BattleHistory::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline const ::Pb::AcpcState& BattleHistory::state() const {
  const ::Pb::AcpcState* p = state_;
  // @@protoc_insertion_point(field_get:Pb.BattleHistory.state)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::AcpcState*>(
      &::Pb::_AcpcState_default_instance_);
}
inline ::Pb::AcpcState* BattleHistory::release_state() {
  // @@protoc_insertion_point(field_release:Pb.BattleHistory.state)
  
  ::Pb::AcpcState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::Pb::AcpcState* BattleHistory::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::Pb::AcpcState;
  }
  // @@protoc_insertion_point(field_mutable:Pb.BattleHistory.state)
  return state_;
}
inline void BattleHistory::set_allocated_state(::Pb::AcpcState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Pb.BattleHistory.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_history_2eproto__INCLUDED
