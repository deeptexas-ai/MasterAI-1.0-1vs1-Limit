// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpc.proto

#ifndef PROTOBUF_acpc_2eproto__INCLUDED
#define PROTOBUF_acpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "system.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_acpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[29];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReportLogImpl();
void InitDefaultsReportLog();
void InitDefaultsReportLogsImpl();
void InitDefaultsReportLogs();
void InitDefaultsAudienceImpl();
void InitDefaultsAudience();
void InitDefaultsAcpcRoomCreateImpl();
void InitDefaultsAcpcRoomCreate();
void InitDefaultsAcpcEnterRoomReqImpl();
void InitDefaultsAcpcEnterRoomReq();
void InitDefaultsAcpcEnterRoomRespImpl();
void InitDefaultsAcpcEnterRoomResp();
void InitDefaultsAcpcEnterRoomBroadImpl();
void InitDefaultsAcpcEnterRoomBroad();
void InitDefaultsAcpcLeaveRoomReqImpl();
void InitDefaultsAcpcLeaveRoomReq();
void InitDefaultsAcpcLeaveRoomRespImpl();
void InitDefaultsAcpcLeaveRoomResp();
void InitDefaultsAcpcLeaveRoomBroadImpl();
void InitDefaultsAcpcLeaveRoomBroad();
void InitDefaultsAcpcQueryCanJoinRoomImpl();
void InitDefaultsAcpcQueryCanJoinRoom();
void InitDefaultsAcpcReadyReqImpl();
void InitDefaultsAcpcReadyReq();
void InitDefaultsAcpcReadyRespImpl();
void InitDefaultsAcpcReadyResp();
void InitDefaultsAcpcReadyBroadImpl();
void InitDefaultsAcpcReadyBroad();
void InitDefaultsAcpcMatchStartImpl();
void InitDefaultsAcpcMatchStart();
void InitDefaultsAcpcRoleActionImpl();
void InitDefaultsAcpcRoleAction();
void InitDefaultsAcpcBroadRoleActionImpl();
void InitDefaultsAcpcBroadRoleAction();
void InitDefaultsAcpcMatchStateImpl();
void InitDefaultsAcpcMatchState();
void InitDefaultsAcpcMatchScoreImpl();
void InitDefaultsAcpcMatchScore();
void InitDefaultsAcpcForTestImpl();
void InitDefaultsAcpcForTest();
void InitDefaultsCheckRoomTimeoutImpl();
void InitDefaultsCheckRoomTimeout();
void InitDefaultsSetDealerModeImpl();
void InitDefaultsSetDealerMode();
void InitDefaultsRoleStateImpl();
void InitDefaultsRoleState();
void InitDefaultsRoleActionImpl();
void InitDefaultsRoleAction();
void InitDefaultsQueryMatchStateReqImpl();
void InitDefaultsQueryMatchStateReq();
void InitDefaultsQueryMatchStateRespImpl();
void InitDefaultsQueryMatchStateResp();
void InitDefaultsRedisRoomBaseImpl();
void InitDefaultsRedisRoomBase();
void InitDefaultsRedisRoomActionImpl();
void InitDefaultsRedisRoomAction();
void InitDefaultsRedisRoomReadyImpl();
void InitDefaultsRedisRoomReady();
inline void InitDefaults() {
  InitDefaultsReportLog();
  InitDefaultsReportLogs();
  InitDefaultsAudience();
  InitDefaultsAcpcRoomCreate();
  InitDefaultsAcpcEnterRoomReq();
  InitDefaultsAcpcEnterRoomResp();
  InitDefaultsAcpcEnterRoomBroad();
  InitDefaultsAcpcLeaveRoomReq();
  InitDefaultsAcpcLeaveRoomResp();
  InitDefaultsAcpcLeaveRoomBroad();
  InitDefaultsAcpcQueryCanJoinRoom();
  InitDefaultsAcpcReadyReq();
  InitDefaultsAcpcReadyResp();
  InitDefaultsAcpcReadyBroad();
  InitDefaultsAcpcMatchStart();
  InitDefaultsAcpcRoleAction();
  InitDefaultsAcpcBroadRoleAction();
  InitDefaultsAcpcMatchState();
  InitDefaultsAcpcMatchScore();
  InitDefaultsAcpcForTest();
  InitDefaultsCheckRoomTimeout();
  InitDefaultsSetDealerMode();
  InitDefaultsRoleState();
  InitDefaultsRoleAction();
  InitDefaultsQueryMatchStateReq();
  InitDefaultsQueryMatchStateResp();
  InitDefaultsRedisRoomBase();
  InitDefaultsRedisRoomAction();
  InitDefaultsRedisRoomReady();
}
}  // namespace protobuf_acpc_2eproto
namespace Pb {
class AcpcBroadRoleAction;
class AcpcBroadRoleActionDefaultTypeInternal;
extern AcpcBroadRoleActionDefaultTypeInternal _AcpcBroadRoleAction_default_instance_;
class AcpcEnterRoomBroad;
class AcpcEnterRoomBroadDefaultTypeInternal;
extern AcpcEnterRoomBroadDefaultTypeInternal _AcpcEnterRoomBroad_default_instance_;
class AcpcEnterRoomReq;
class AcpcEnterRoomReqDefaultTypeInternal;
extern AcpcEnterRoomReqDefaultTypeInternal _AcpcEnterRoomReq_default_instance_;
class AcpcEnterRoomResp;
class AcpcEnterRoomRespDefaultTypeInternal;
extern AcpcEnterRoomRespDefaultTypeInternal _AcpcEnterRoomResp_default_instance_;
class AcpcForTest;
class AcpcForTestDefaultTypeInternal;
extern AcpcForTestDefaultTypeInternal _AcpcForTest_default_instance_;
class AcpcLeaveRoomBroad;
class AcpcLeaveRoomBroadDefaultTypeInternal;
extern AcpcLeaveRoomBroadDefaultTypeInternal _AcpcLeaveRoomBroad_default_instance_;
class AcpcLeaveRoomReq;
class AcpcLeaveRoomReqDefaultTypeInternal;
extern AcpcLeaveRoomReqDefaultTypeInternal _AcpcLeaveRoomReq_default_instance_;
class AcpcLeaveRoomResp;
class AcpcLeaveRoomRespDefaultTypeInternal;
extern AcpcLeaveRoomRespDefaultTypeInternal _AcpcLeaveRoomResp_default_instance_;
class AcpcMatchScore;
class AcpcMatchScoreDefaultTypeInternal;
extern AcpcMatchScoreDefaultTypeInternal _AcpcMatchScore_default_instance_;
class AcpcMatchStart;
class AcpcMatchStartDefaultTypeInternal;
extern AcpcMatchStartDefaultTypeInternal _AcpcMatchStart_default_instance_;
class AcpcMatchState;
class AcpcMatchStateDefaultTypeInternal;
extern AcpcMatchStateDefaultTypeInternal _AcpcMatchState_default_instance_;
class AcpcQueryCanJoinRoom;
class AcpcQueryCanJoinRoomDefaultTypeInternal;
extern AcpcQueryCanJoinRoomDefaultTypeInternal _AcpcQueryCanJoinRoom_default_instance_;
class AcpcReadyBroad;
class AcpcReadyBroadDefaultTypeInternal;
extern AcpcReadyBroadDefaultTypeInternal _AcpcReadyBroad_default_instance_;
class AcpcReadyReq;
class AcpcReadyReqDefaultTypeInternal;
extern AcpcReadyReqDefaultTypeInternal _AcpcReadyReq_default_instance_;
class AcpcReadyResp;
class AcpcReadyRespDefaultTypeInternal;
extern AcpcReadyRespDefaultTypeInternal _AcpcReadyResp_default_instance_;
class AcpcRoleAction;
class AcpcRoleActionDefaultTypeInternal;
extern AcpcRoleActionDefaultTypeInternal _AcpcRoleAction_default_instance_;
class AcpcRoomCreate;
class AcpcRoomCreateDefaultTypeInternal;
extern AcpcRoomCreateDefaultTypeInternal _AcpcRoomCreate_default_instance_;
class Audience;
class AudienceDefaultTypeInternal;
extern AudienceDefaultTypeInternal _Audience_default_instance_;
class CheckRoomTimeout;
class CheckRoomTimeoutDefaultTypeInternal;
extern CheckRoomTimeoutDefaultTypeInternal _CheckRoomTimeout_default_instance_;
class QueryMatchStateReq;
class QueryMatchStateReqDefaultTypeInternal;
extern QueryMatchStateReqDefaultTypeInternal _QueryMatchStateReq_default_instance_;
class QueryMatchStateResp;
class QueryMatchStateRespDefaultTypeInternal;
extern QueryMatchStateRespDefaultTypeInternal _QueryMatchStateResp_default_instance_;
class RedisRoomAction;
class RedisRoomActionDefaultTypeInternal;
extern RedisRoomActionDefaultTypeInternal _RedisRoomAction_default_instance_;
class RedisRoomBase;
class RedisRoomBaseDefaultTypeInternal;
extern RedisRoomBaseDefaultTypeInternal _RedisRoomBase_default_instance_;
class RedisRoomReady;
class RedisRoomReadyDefaultTypeInternal;
extern RedisRoomReadyDefaultTypeInternal _RedisRoomReady_default_instance_;
class ReportLog;
class ReportLogDefaultTypeInternal;
extern ReportLogDefaultTypeInternal _ReportLog_default_instance_;
class ReportLogs;
class ReportLogsDefaultTypeInternal;
extern ReportLogsDefaultTypeInternal _ReportLogs_default_instance_;
class RoleAction;
class RoleActionDefaultTypeInternal;
extern RoleActionDefaultTypeInternal _RoleAction_default_instance_;
class RoleState;
class RoleStateDefaultTypeInternal;
extern RoleStateDefaultTypeInternal _RoleState_default_instance_;
class SetDealerMode;
class SetDealerModeDefaultTypeInternal;
extern SetDealerModeDefaultTypeInternal _SetDealerMode_default_instance_;
}  // namespace Pb
namespace Pb {

// ===================================================================

class ReportLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.ReportLog) */ {
 public:
  ReportLog();
  virtual ~ReportLog();

  ReportLog(const ReportLog& from);

  inline ReportLog& operator=(const ReportLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportLog(ReportLog&& from) noexcept
    : ReportLog() {
    *this = ::std::move(from);
  }

  inline ReportLog& operator=(ReportLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportLog* internal_default_instance() {
    return reinterpret_cast<const ReportLog*>(
               &_ReportLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReportLog* other);
  friend void swap(ReportLog& a, ReportLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportLog* New() const PROTOBUF_FINAL { return New(NULL); }

  ReportLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReportLog& from);
  void MergeFrom(const ReportLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReportLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tv_sec = 1;
  void clear_tv_sec();
  static const int kTvSecFieldNumber = 1;
  ::google::protobuf::uint32 tv_sec() const;
  void set_tv_sec(::google::protobuf::uint32 value);

  // uint32 tv_usec = 2;
  void clear_tv_usec();
  static const int kTvUsecFieldNumber = 2;
  ::google::protobuf::uint32 tv_usec() const;
  void set_tv_usec(::google::protobuf::uint32 value);

  // uint32 opt_time = 3;
  void clear_opt_time();
  static const int kOptTimeFieldNumber = 3;
  ::google::protobuf::uint32 opt_time() const;
  void set_opt_time(::google::protobuf::uint32 value);

  // uint32 opt_source = 4;
  void clear_opt_source();
  static const int kOptSourceFieldNumber = 4;
  ::google::protobuf::uint32 opt_source() const;
  void set_opt_source(::google::protobuf::uint32 value);

  // uint32 before_pot = 5;
  void clear_before_pot();
  static const int kBeforePotFieldNumber = 5;
  ::google::protobuf::uint32 before_pot() const;
  void set_before_pot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.ReportLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tv_sec_;
  ::google::protobuf::uint32 tv_usec_;
  ::google::protobuf::uint32 opt_time_;
  ::google::protobuf::uint32 opt_source_;
  ::google::protobuf::uint32 before_pot_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsReportLogImpl();
};
// -------------------------------------------------------------------

class ReportLogs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.ReportLogs) */ {
 public:
  ReportLogs();
  virtual ~ReportLogs();

  ReportLogs(const ReportLogs& from);

  inline ReportLogs& operator=(const ReportLogs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportLogs(ReportLogs&& from) noexcept
    : ReportLogs() {
    *this = ::std::move(from);
  }

  inline ReportLogs& operator=(ReportLogs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportLogs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportLogs* internal_default_instance() {
    return reinterpret_cast<const ReportLogs*>(
               &_ReportLogs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ReportLogs* other);
  friend void swap(ReportLogs& a, ReportLogs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportLogs* New() const PROTOBUF_FINAL { return New(NULL); }

  ReportLogs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReportLogs& from);
  void MergeFrom(const ReportLogs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReportLogs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.ReportLog report_logs = 1;
  int report_logs_size() const;
  void clear_report_logs();
  static const int kReportLogsFieldNumber = 1;
  const ::Pb::ReportLog& report_logs(int index) const;
  ::Pb::ReportLog* mutable_report_logs(int index);
  ::Pb::ReportLog* add_report_logs();
  ::google::protobuf::RepeatedPtrField< ::Pb::ReportLog >*
      mutable_report_logs();
  const ::google::protobuf::RepeatedPtrField< ::Pb::ReportLog >&
      report_logs() const;

  // @@protoc_insertion_point(class_scope:Pb.ReportLogs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::ReportLog > report_logs_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsReportLogsImpl();
};
// -------------------------------------------------------------------

class Audience : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.Audience) */ {
 public:
  Audience();
  virtual ~Audience();

  Audience(const Audience& from);

  inline Audience& operator=(const Audience& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Audience(Audience&& from) noexcept
    : Audience() {
    *this = ::std::move(from);
  }

  inline Audience& operator=(Audience&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Audience& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Audience* internal_default_instance() {
    return reinterpret_cast<const Audience*>(
               &_Audience_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Audience* other);
  friend void swap(Audience& a, Audience& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Audience* New() const PROTOBUF_FINAL { return New(NULL); }

  Audience* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Audience& from);
  void MergeFrom(const Audience& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Audience* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role_name = 2;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string role_img = 3;
  void clear_role_img();
  static const int kRoleImgFieldNumber = 3;
  const ::std::string& role_img() const;
  void set_role_img(const ::std::string& value);
  #if LANG_CXX11
  void set_role_img(::std::string&& value);
  #endif
  void set_role_img(const char* value);
  void set_role_img(const char* value, size_t size);
  ::std::string* mutable_role_img();
  ::std::string* release_role_img();
  void set_allocated_role_img(::std::string* role_img);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.Audience)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr role_img_;
  ::google::protobuf::uint32 role_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAudienceImpl();
};
// -------------------------------------------------------------------

class AcpcRoomCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcRoomCreate) */ {
 public:
  AcpcRoomCreate();
  virtual ~AcpcRoomCreate();

  AcpcRoomCreate(const AcpcRoomCreate& from);

  inline AcpcRoomCreate& operator=(const AcpcRoomCreate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcRoomCreate(AcpcRoomCreate&& from) noexcept
    : AcpcRoomCreate() {
    *this = ::std::move(from);
  }

  inline AcpcRoomCreate& operator=(AcpcRoomCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcRoomCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcRoomCreate* internal_default_instance() {
    return reinterpret_cast<const AcpcRoomCreate*>(
               &_AcpcRoomCreate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AcpcRoomCreate* other);
  friend void swap(AcpcRoomCreate& a, AcpcRoomCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcRoomCreate* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcRoomCreate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcRoomCreate& from);
  void MergeFrom(const AcpcRoomCreate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcRoomCreate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role_name = 2;
  void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  const ::std::string& role_name() const;
  void set_role_name(const ::std::string& value);
  #if LANG_CXX11
  void set_role_name(::std::string&& value);
  #endif
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  ::std::string* mutable_role_name();
  ::std::string* release_role_name();
  void set_allocated_role_name(::std::string* role_name);

  // string room_name = 3;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // string password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string acpc_ip = 8;
  void clear_acpc_ip();
  static const int kAcpcIpFieldNumber = 8;
  const ::std::string& acpc_ip() const;
  void set_acpc_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_acpc_ip(::std::string&& value);
  #endif
  void set_acpc_ip(const char* value);
  void set_acpc_ip(const char* value, size_t size);
  ::std::string* mutable_acpc_ip();
  ::std::string* release_acpc_ip();
  void set_allocated_acpc_ip(::std::string* acpc_ip);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 game_type = 4;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 4;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 difficulty = 5;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 5;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // uint32 acpc_port = 9;
  void clear_acpc_port();
  static const int kAcpcPortFieldNumber = 9;
  ::google::protobuf::uint32 acpc_port() const;
  void set_acpc_port(::google::protobuf::uint32 value);

  // uint64 room_id = 11;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 11;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 brain_id = 10;
  void clear_brain_id();
  static const int kBrainIdFieldNumber = 10;
  ::google::protobuf::uint32 brain_id() const;
  void set_brain_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcRoomCreate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_name_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr acpc_ip_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 acpc_port_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 brain_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcRoomCreateImpl();
};
// -------------------------------------------------------------------

class AcpcEnterRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcEnterRoomReq) */ {
 public:
  AcpcEnterRoomReq();
  virtual ~AcpcEnterRoomReq();

  AcpcEnterRoomReq(const AcpcEnterRoomReq& from);

  inline AcpcEnterRoomReq& operator=(const AcpcEnterRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcEnterRoomReq(AcpcEnterRoomReq&& from) noexcept
    : AcpcEnterRoomReq() {
    *this = ::std::move(from);
  }

  inline AcpcEnterRoomReq& operator=(AcpcEnterRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcEnterRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcEnterRoomReq* internal_default_instance() {
    return reinterpret_cast<const AcpcEnterRoomReq*>(
               &_AcpcEnterRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AcpcEnterRoomReq* other);
  friend void swap(AcpcEnterRoomReq& a, AcpcEnterRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcEnterRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcEnterRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcEnterRoomReq& from);
  void MergeFrom(const AcpcEnterRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcEnterRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sophia_name = 4;
  void clear_sophia_name();
  static const int kSophiaNameFieldNumber = 4;
  const ::std::string& sophia_name() const;
  void set_sophia_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sophia_name(::std::string&& value);
  #endif
  void set_sophia_name(const char* value);
  void set_sophia_name(const char* value, size_t size);
  ::std::string* mutable_sophia_name();
  ::std::string* release_sophia_name();
  void set_allocated_sophia_name(::std::string* sophia_name);

  // string rm_test_param = 5;
  void clear_rm_test_param();
  static const int kRmTestParamFieldNumber = 5;
  const ::std::string& rm_test_param() const;
  void set_rm_test_param(const ::std::string& value);
  #if LANG_CXX11
  void set_rm_test_param(::std::string&& value);
  #endif
  void set_rm_test_param(const char* value);
  void set_rm_test_param(const char* value, size_t size);
  ::std::string* mutable_rm_test_param();
  ::std::string* release_rm_test_param();
  void set_allocated_rm_test_param(::std::string* rm_test_param);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 game_type = 3;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 join_type = 6;
  void clear_join_type();
  static const int kJoinTypeFieldNumber = 6;
  ::google::protobuf::uint32 join_type() const;
  void set_join_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcEnterRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sophia_name_;
  ::google::protobuf::internal::ArenaStringPtr rm_test_param_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 join_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomReqImpl();
};
// -------------------------------------------------------------------

class AcpcEnterRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcEnterRoomResp) */ {
 public:
  AcpcEnterRoomResp();
  virtual ~AcpcEnterRoomResp();

  AcpcEnterRoomResp(const AcpcEnterRoomResp& from);

  inline AcpcEnterRoomResp& operator=(const AcpcEnterRoomResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcEnterRoomResp(AcpcEnterRoomResp&& from) noexcept
    : AcpcEnterRoomResp() {
    *this = ::std::move(from);
  }

  inline AcpcEnterRoomResp& operator=(AcpcEnterRoomResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcEnterRoomResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcEnterRoomResp* internal_default_instance() {
    return reinterpret_cast<const AcpcEnterRoomResp*>(
               &_AcpcEnterRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AcpcEnterRoomResp* other);
  friend void swap(AcpcEnterRoomResp& a, AcpcEnterRoomResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcEnterRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcEnterRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcEnterRoomResp& from);
  void MergeFrom(const AcpcEnterRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcEnterRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.RoleInfo role_info = 5;
  int role_info_size() const;
  void clear_role_info();
  static const int kRoleInfoFieldNumber = 5;
  const ::Pb::RoleInfo& role_info(int index) const;
  ::Pb::RoleInfo* mutable_role_info(int index);
  ::Pb::RoleInfo* add_role_info();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleInfo >*
      mutable_role_info();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoleInfo >&
      role_info() const;

  // repeated .Pb.Audience audience_list = 6;
  int audience_list_size() const;
  void clear_audience_list();
  static const int kAudienceListFieldNumber = 6;
  const ::Pb::Audience& audience_list(int index) const;
  ::Pb::Audience* mutable_audience_list(int index);
  ::Pb::Audience* add_audience_list();
  ::google::protobuf::RepeatedPtrField< ::Pb::Audience >*
      mutable_audience_list();
  const ::google::protobuf::RepeatedPtrField< ::Pb::Audience >&
      audience_list() const;

  // string rm_test_param = 7;
  void clear_rm_test_param();
  static const int kRmTestParamFieldNumber = 7;
  const ::std::string& rm_test_param() const;
  void set_rm_test_param(const ::std::string& value);
  #if LANG_CXX11
  void set_rm_test_param(::std::string&& value);
  #endif
  void set_rm_test_param(const char* value);
  void set_rm_test_param(const char* value, size_t size);
  ::std::string* mutable_rm_test_param();
  ::std::string* release_rm_test_param();
  void set_allocated_rm_test_param(::std::string* rm_test_param);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 game_type = 3;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 self_role_pos = 4;
  void clear_self_role_pos();
  static const int kSelfRolePosFieldNumber = 4;
  ::google::protobuf::uint32 self_role_pos() const;
  void set_self_role_pos(::google::protobuf::uint32 value);

  // uint32 hand_id = 8;
  void clear_hand_id();
  static const int kHandIdFieldNumber = 8;
  ::google::protobuf::uint32 hand_id() const;
  void set_hand_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcEnterRoomResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleInfo > role_info_;
  ::google::protobuf::RepeatedPtrField< ::Pb::Audience > audience_list_;
  ::google::protobuf::internal::ArenaStringPtr rm_test_param_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 self_role_pos_;
  ::google::protobuf::uint32 hand_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomRespImpl();
};
// -------------------------------------------------------------------

class AcpcEnterRoomBroad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcEnterRoomBroad) */ {
 public:
  AcpcEnterRoomBroad();
  virtual ~AcpcEnterRoomBroad();

  AcpcEnterRoomBroad(const AcpcEnterRoomBroad& from);

  inline AcpcEnterRoomBroad& operator=(const AcpcEnterRoomBroad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcEnterRoomBroad(AcpcEnterRoomBroad&& from) noexcept
    : AcpcEnterRoomBroad() {
    *this = ::std::move(from);
  }

  inline AcpcEnterRoomBroad& operator=(AcpcEnterRoomBroad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcEnterRoomBroad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcEnterRoomBroad* internal_default_instance() {
    return reinterpret_cast<const AcpcEnterRoomBroad*>(
               &_AcpcEnterRoomBroad_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AcpcEnterRoomBroad* other);
  friend void swap(AcpcEnterRoomBroad& a, AcpcEnterRoomBroad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcEnterRoomBroad* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcEnterRoomBroad* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcEnterRoomBroad& from);
  void MergeFrom(const AcpcEnterRoomBroad& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcEnterRoomBroad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rm_test_param = 4;
  void clear_rm_test_param();
  static const int kRmTestParamFieldNumber = 4;
  const ::std::string& rm_test_param() const;
  void set_rm_test_param(const ::std::string& value);
  #if LANG_CXX11
  void set_rm_test_param(::std::string&& value);
  #endif
  void set_rm_test_param(const char* value);
  void set_rm_test_param(const char* value, size_t size);
  ::std::string* mutable_rm_test_param();
  ::std::string* release_rm_test_param();
  void set_allocated_rm_test_param(::std::string* rm_test_param);

  // .Pb.RoleInfo enter_role_info = 3;
  bool has_enter_role_info() const;
  void clear_enter_role_info();
  static const int kEnterRoleInfoFieldNumber = 3;
  const ::Pb::RoleInfo& enter_role_info() const;
  ::Pb::RoleInfo* release_enter_role_info();
  ::Pb::RoleInfo* mutable_enter_role_info();
  void set_allocated_enter_role_info(::Pb::RoleInfo* enter_role_info);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcEnterRoomBroad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rm_test_param_;
  ::Pb::RoleInfo* enter_role_info_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcEnterRoomBroadImpl();
};
// -------------------------------------------------------------------

class AcpcLeaveRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcLeaveRoomReq) */ {
 public:
  AcpcLeaveRoomReq();
  virtual ~AcpcLeaveRoomReq();

  AcpcLeaveRoomReq(const AcpcLeaveRoomReq& from);

  inline AcpcLeaveRoomReq& operator=(const AcpcLeaveRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcLeaveRoomReq(AcpcLeaveRoomReq&& from) noexcept
    : AcpcLeaveRoomReq() {
    *this = ::std::move(from);
  }

  inline AcpcLeaveRoomReq& operator=(AcpcLeaveRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcLeaveRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcLeaveRoomReq* internal_default_instance() {
    return reinterpret_cast<const AcpcLeaveRoomReq*>(
               &_AcpcLeaveRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AcpcLeaveRoomReq* other);
  friend void swap(AcpcLeaveRoomReq& a, AcpcLeaveRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcLeaveRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcLeaveRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcLeaveRoomReq& from);
  void MergeFrom(const AcpcLeaveRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcLeaveRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcLeaveRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomReqImpl();
};
// -------------------------------------------------------------------

class AcpcLeaveRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcLeaveRoomResp) */ {
 public:
  AcpcLeaveRoomResp();
  virtual ~AcpcLeaveRoomResp();

  AcpcLeaveRoomResp(const AcpcLeaveRoomResp& from);

  inline AcpcLeaveRoomResp& operator=(const AcpcLeaveRoomResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcLeaveRoomResp(AcpcLeaveRoomResp&& from) noexcept
    : AcpcLeaveRoomResp() {
    *this = ::std::move(from);
  }

  inline AcpcLeaveRoomResp& operator=(AcpcLeaveRoomResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcLeaveRoomResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcLeaveRoomResp* internal_default_instance() {
    return reinterpret_cast<const AcpcLeaveRoomResp*>(
               &_AcpcLeaveRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AcpcLeaveRoomResp* other);
  friend void swap(AcpcLeaveRoomResp& a, AcpcLeaveRoomResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcLeaveRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcLeaveRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcLeaveRoomResp& from);
  void MergeFrom(const AcpcLeaveRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcLeaveRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  ::google::protobuf::uint32 reason() const;
  void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcLeaveRoomResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 reason_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomRespImpl();
};
// -------------------------------------------------------------------

class AcpcLeaveRoomBroad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcLeaveRoomBroad) */ {
 public:
  AcpcLeaveRoomBroad();
  virtual ~AcpcLeaveRoomBroad();

  AcpcLeaveRoomBroad(const AcpcLeaveRoomBroad& from);

  inline AcpcLeaveRoomBroad& operator=(const AcpcLeaveRoomBroad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcLeaveRoomBroad(AcpcLeaveRoomBroad&& from) noexcept
    : AcpcLeaveRoomBroad() {
    *this = ::std::move(from);
  }

  inline AcpcLeaveRoomBroad& operator=(AcpcLeaveRoomBroad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcLeaveRoomBroad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcLeaveRoomBroad* internal_default_instance() {
    return reinterpret_cast<const AcpcLeaveRoomBroad*>(
               &_AcpcLeaveRoomBroad_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(AcpcLeaveRoomBroad* other);
  friend void swap(AcpcLeaveRoomBroad& a, AcpcLeaveRoomBroad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcLeaveRoomBroad* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcLeaveRoomBroad* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcLeaveRoomBroad& from);
  void MergeFrom(const AcpcLeaveRoomBroad& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcLeaveRoomBroad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 leave_role_id = 3;
  void clear_leave_role_id();
  static const int kLeaveRoleIdFieldNumber = 3;
  ::google::protobuf::uint32 leave_role_id() const;
  void set_leave_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcLeaveRoomBroad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 leave_role_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcLeaveRoomBroadImpl();
};
// -------------------------------------------------------------------

class AcpcQueryCanJoinRoom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcQueryCanJoinRoom) */ {
 public:
  AcpcQueryCanJoinRoom();
  virtual ~AcpcQueryCanJoinRoom();

  AcpcQueryCanJoinRoom(const AcpcQueryCanJoinRoom& from);

  inline AcpcQueryCanJoinRoom& operator=(const AcpcQueryCanJoinRoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcQueryCanJoinRoom(AcpcQueryCanJoinRoom&& from) noexcept
    : AcpcQueryCanJoinRoom() {
    *this = ::std::move(from);
  }

  inline AcpcQueryCanJoinRoom& operator=(AcpcQueryCanJoinRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcQueryCanJoinRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcQueryCanJoinRoom* internal_default_instance() {
    return reinterpret_cast<const AcpcQueryCanJoinRoom*>(
               &_AcpcQueryCanJoinRoom_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(AcpcQueryCanJoinRoom* other);
  friend void swap(AcpcQueryCanJoinRoom& a, AcpcQueryCanJoinRoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcQueryCanJoinRoom* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcQueryCanJoinRoom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcQueryCanJoinRoom& from);
  void MergeFrom(const AcpcQueryCanJoinRoom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcQueryCanJoinRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.RoomCanJoin room_list = 1;
  int room_list_size() const;
  void clear_room_list();
  static const int kRoomListFieldNumber = 1;
  const ::Pb::RoomCanJoin& room_list(int index) const;
  ::Pb::RoomCanJoin* mutable_room_list(int index);
  ::Pb::RoomCanJoin* add_room_list();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoomCanJoin >*
      mutable_room_list();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoomCanJoin >&
      room_list() const;

  // @@protoc_insertion_point(class_scope:Pb.AcpcQueryCanJoinRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoomCanJoin > room_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcQueryCanJoinRoomImpl();
};
// -------------------------------------------------------------------

class AcpcReadyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcReadyReq) */ {
 public:
  AcpcReadyReq();
  virtual ~AcpcReadyReq();

  AcpcReadyReq(const AcpcReadyReq& from);

  inline AcpcReadyReq& operator=(const AcpcReadyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcReadyReq(AcpcReadyReq&& from) noexcept
    : AcpcReadyReq() {
    *this = ::std::move(from);
  }

  inline AcpcReadyReq& operator=(AcpcReadyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcReadyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcReadyReq* internal_default_instance() {
    return reinterpret_cast<const AcpcReadyReq*>(
               &_AcpcReadyReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(AcpcReadyReq* other);
  friend void swap(AcpcReadyReq& a, AcpcReadyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcReadyReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcReadyReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcReadyReq& from);
  void MergeFrom(const AcpcReadyReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcReadyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cfr_model = 3;
  void clear_cfr_model();
  static const int kCfrModelFieldNumber = 3;
  const ::std::string& cfr_model() const;
  void set_cfr_model(const ::std::string& value);
  #if LANG_CXX11
  void set_cfr_model(::std::string&& value);
  #endif
  void set_cfr_model(const char* value);
  void set_cfr_model(const char* value, size_t size);
  ::std::string* mutable_cfr_model();
  ::std::string* release_cfr_model();
  void set_allocated_cfr_model(::std::string* cfr_model);

  // uint64 room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 dealer_mode = 4;
  void clear_dealer_mode();
  static const int kDealerModeFieldNumber = 4;
  ::google::protobuf::uint32 dealer_mode() const;
  void set_dealer_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcReadyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cfr_model_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 dealer_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyReqImpl();
};
// -------------------------------------------------------------------

class AcpcReadyResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcReadyResp) */ {
 public:
  AcpcReadyResp();
  virtual ~AcpcReadyResp();

  AcpcReadyResp(const AcpcReadyResp& from);

  inline AcpcReadyResp& operator=(const AcpcReadyResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcReadyResp(AcpcReadyResp&& from) noexcept
    : AcpcReadyResp() {
    *this = ::std::move(from);
  }

  inline AcpcReadyResp& operator=(AcpcReadyResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcReadyResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcReadyResp* internal_default_instance() {
    return reinterpret_cast<const AcpcReadyResp*>(
               &_AcpcReadyResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(AcpcReadyResp* other);
  friend void swap(AcpcReadyResp& a, AcpcReadyResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcReadyResp* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcReadyResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcReadyResp& from);
  void MergeFrom(const AcpcReadyResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcReadyResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 dealer_mode = 2;
  void clear_dealer_mode();
  static const int kDealerModeFieldNumber = 2;
  ::google::protobuf::uint32 dealer_mode() const;
  void set_dealer_mode(::google::protobuf::uint32 value);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcReadyResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 dealer_mode_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyRespImpl();
};
// -------------------------------------------------------------------

class AcpcReadyBroad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcReadyBroad) */ {
 public:
  AcpcReadyBroad();
  virtual ~AcpcReadyBroad();

  AcpcReadyBroad(const AcpcReadyBroad& from);

  inline AcpcReadyBroad& operator=(const AcpcReadyBroad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcReadyBroad(AcpcReadyBroad&& from) noexcept
    : AcpcReadyBroad() {
    *this = ::std::move(from);
  }

  inline AcpcReadyBroad& operator=(AcpcReadyBroad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcReadyBroad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcReadyBroad* internal_default_instance() {
    return reinterpret_cast<const AcpcReadyBroad*>(
               &_AcpcReadyBroad_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(AcpcReadyBroad* other);
  friend void swap(AcpcReadyBroad& a, AcpcReadyBroad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcReadyBroad* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcReadyBroad* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcReadyBroad& from);
  void MergeFrom(const AcpcReadyBroad& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcReadyBroad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 ready_role_id = 2;
  void clear_ready_role_id();
  static const int kReadyRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 ready_role_id() const;
  void set_ready_role_id(::google::protobuf::uint32 value);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcReadyBroad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 ready_role_id_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcReadyBroadImpl();
};
// -------------------------------------------------------------------

class AcpcMatchStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcMatchStart) */ {
 public:
  AcpcMatchStart();
  virtual ~AcpcMatchStart();

  AcpcMatchStart(const AcpcMatchStart& from);

  inline AcpcMatchStart& operator=(const AcpcMatchStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcMatchStart(AcpcMatchStart&& from) noexcept
    : AcpcMatchStart() {
    *this = ::std::move(from);
  }

  inline AcpcMatchStart& operator=(AcpcMatchStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcMatchStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcMatchStart* internal_default_instance() {
    return reinterpret_cast<const AcpcMatchStart*>(
               &_AcpcMatchStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(AcpcMatchStart* other);
  friend void swap(AcpcMatchStart& a, AcpcMatchStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcMatchStart* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcMatchStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcMatchStart& from);
  void MergeFrom(const AcpcMatchStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcMatchStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 hand_id = 3;
  void clear_hand_id();
  static const int kHandIdFieldNumber = 3;
  ::google::protobuf::uint32 hand_id() const;
  void set_hand_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcMatchStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 hand_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchStartImpl();
};
// -------------------------------------------------------------------

class AcpcRoleAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcRoleAction) */ {
 public:
  AcpcRoleAction();
  virtual ~AcpcRoleAction();

  AcpcRoleAction(const AcpcRoleAction& from);

  inline AcpcRoleAction& operator=(const AcpcRoleAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcRoleAction(AcpcRoleAction&& from) noexcept
    : AcpcRoleAction() {
    *this = ::std::move(from);
  }

  inline AcpcRoleAction& operator=(AcpcRoleAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcRoleAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcRoleAction* internal_default_instance() {
    return reinterpret_cast<const AcpcRoleAction*>(
               &_AcpcRoleAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(AcpcRoleAction* other);
  friend void swap(AcpcRoleAction& a, AcpcRoleAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcRoleAction* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcRoleAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcRoleAction& from);
  void MergeFrom(const AcpcRoleAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcRoleAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action_rate = 4;
  void clear_action_rate();
  static const int kActionRateFieldNumber = 4;
  const ::std::string& action_rate() const;
  void set_action_rate(const ::std::string& value);
  #if LANG_CXX11
  void set_action_rate(::std::string&& value);
  #endif
  void set_action_rate(const char* value);
  void set_action_rate(const char* value, size_t size);
  ::std::string* mutable_action_rate();
  ::std::string* release_action_rate();
  void set_allocated_action_rate(::std::string* action_rate);

  // string robot_cfr_model_param = 6;
  void clear_robot_cfr_model_param();
  static const int kRobotCfrModelParamFieldNumber = 6;
  const ::std::string& robot_cfr_model_param() const;
  void set_robot_cfr_model_param(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_cfr_model_param(::std::string&& value);
  #endif
  void set_robot_cfr_model_param(const char* value);
  void set_robot_cfr_model_param(const char* value, size_t size);
  ::std::string* mutable_robot_cfr_model_param();
  ::std::string* release_robot_cfr_model_param();
  void set_allocated_robot_cfr_model_param(::std::string* robot_cfr_model_param);

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::google::protobuf::uint32 action() const;
  void set_action(::google::protobuf::uint32 value);

  // uint64 room_id = 5;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 5;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcRoleAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_rate_;
  ::google::protobuf::internal::ArenaStringPtr robot_cfr_model_param_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 action_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 size_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcRoleActionImpl();
};
// -------------------------------------------------------------------

class AcpcBroadRoleAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcBroadRoleAction) */ {
 public:
  AcpcBroadRoleAction();
  virtual ~AcpcBroadRoleAction();

  AcpcBroadRoleAction(const AcpcBroadRoleAction& from);

  inline AcpcBroadRoleAction& operator=(const AcpcBroadRoleAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcBroadRoleAction(AcpcBroadRoleAction&& from) noexcept
    : AcpcBroadRoleAction() {
    *this = ::std::move(from);
  }

  inline AcpcBroadRoleAction& operator=(AcpcBroadRoleAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcBroadRoleAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcBroadRoleAction* internal_default_instance() {
    return reinterpret_cast<const AcpcBroadRoleAction*>(
               &_AcpcBroadRoleAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(AcpcBroadRoleAction* other);
  friend void swap(AcpcBroadRoleAction& a, AcpcBroadRoleAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcBroadRoleAction* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcBroadRoleAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcBroadRoleAction& from);
  void MergeFrom(const AcpcBroadRoleAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcBroadRoleAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 action_role_id = 2;
  void clear_action_role_id();
  static const int kActionRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 action_role_id() const;
  void set_action_role_id(::google::protobuf::uint32 value);

  // uint32 action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::google::protobuf::uint32 action() const;
  void set_action(::google::protobuf::uint32 value);

  // uint32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint64 room_id = 5;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 5;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcBroadRoleAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 action_role_id_;
  ::google::protobuf::uint32 action_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcBroadRoleActionImpl();
};
// -------------------------------------------------------------------

class AcpcMatchState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcMatchState) */ {
 public:
  AcpcMatchState();
  virtual ~AcpcMatchState();

  AcpcMatchState(const AcpcMatchState& from);

  inline AcpcMatchState& operator=(const AcpcMatchState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcMatchState(AcpcMatchState&& from) noexcept
    : AcpcMatchState() {
    *this = ::std::move(from);
  }

  inline AcpcMatchState& operator=(AcpcMatchState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcMatchState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcMatchState* internal_default_instance() {
    return reinterpret_cast<const AcpcMatchState*>(
               &_AcpcMatchState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(AcpcMatchState* other);
  friend void swap(AcpcMatchState& a, AcpcMatchState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcMatchState* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcMatchState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcMatchState& from);
  void MergeFrom(const AcpcMatchState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcMatchState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cfr_model = 5;
  void clear_cfr_model();
  static const int kCfrModelFieldNumber = 5;
  const ::std::string& cfr_model() const;
  void set_cfr_model(const ::std::string& value);
  #if LANG_CXX11
  void set_cfr_model(::std::string&& value);
  #endif
  void set_cfr_model(const char* value);
  void set_cfr_model(const char* value, size_t size);
  ::std::string* mutable_cfr_model();
  ::std::string* release_cfr_model();
  void set_allocated_cfr_model(::std::string* cfr_model);

  // string robot_cfr_model_param = 7;
  void clear_robot_cfr_model_param();
  static const int kRobotCfrModelParamFieldNumber = 7;
  const ::std::string& robot_cfr_model_param() const;
  void set_robot_cfr_model_param(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_cfr_model_param(::std::string&& value);
  #endif
  void set_robot_cfr_model_param(const char* value);
  void set_robot_cfr_model_param(const char* value, size_t size);
  ::std::string* mutable_robot_cfr_model_param();
  ::std::string* release_robot_cfr_model_param();
  void set_allocated_robot_cfr_model_param(::std::string* robot_cfr_model_param);

  // .Pb.AcpcState state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::Pb::AcpcState& state() const;
  ::Pb::AcpcState* release_state();
  ::Pb::AcpcState* mutable_state();
  void set_allocated_state(::Pb::AcpcState* state);

  // .Pb.AcpcRoleAction robot_action = 4;
  bool has_robot_action() const;
  void clear_robot_action();
  static const int kRobotActionFieldNumber = 4;
  const ::Pb::AcpcRoleAction& robot_action() const;
  ::Pb::AcpcRoleAction* release_robot_action();
  ::Pb::AcpcRoleAction* mutable_robot_action();
  void set_allocated_robot_action(::Pb::AcpcRoleAction* robot_action);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 robot_delay_flag = 6;
  void clear_robot_delay_flag();
  static const int kRobotDelayFlagFieldNumber = 6;
  ::google::protobuf::uint32 robot_delay_flag() const;
  void set_robot_delay_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcMatchState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cfr_model_;
  ::google::protobuf::internal::ArenaStringPtr robot_cfr_model_param_;
  ::Pb::AcpcState* state_;
  ::Pb::AcpcRoleAction* robot_action_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 robot_delay_flag_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchStateImpl();
};
// -------------------------------------------------------------------

class AcpcMatchScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcMatchScore) */ {
 public:
  AcpcMatchScore();
  virtual ~AcpcMatchScore();

  AcpcMatchScore(const AcpcMatchScore& from);

  inline AcpcMatchScore& operator=(const AcpcMatchScore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcMatchScore(AcpcMatchScore&& from) noexcept
    : AcpcMatchScore() {
    *this = ::std::move(from);
  }

  inline AcpcMatchScore& operator=(AcpcMatchScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcMatchScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcMatchScore* internal_default_instance() {
    return reinterpret_cast<const AcpcMatchScore*>(
               &_AcpcMatchScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(AcpcMatchScore* other);
  friend void swap(AcpcMatchScore& a, AcpcMatchScore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcMatchScore* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcMatchScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcMatchScore& from);
  void MergeFrom(const AcpcMatchScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcMatchScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.RoleScore role_scores = 3;
  int role_scores_size() const;
  void clear_role_scores();
  static const int kRoleScoresFieldNumber = 3;
  const ::Pb::RoleScore& role_scores(int index) const;
  ::Pb::RoleScore* mutable_role_scores(int index);
  ::Pb::RoleScore* add_role_scores();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleScore >*
      mutable_role_scores();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoleScore >&
      role_scores() const;

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcMatchScore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleScore > role_scores_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcMatchScoreImpl();
};
// -------------------------------------------------------------------

class AcpcForTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.AcpcForTest) */ {
 public:
  AcpcForTest();
  virtual ~AcpcForTest();

  AcpcForTest(const AcpcForTest& from);

  inline AcpcForTest& operator=(const AcpcForTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcpcForTest(AcpcForTest&& from) noexcept
    : AcpcForTest() {
    *this = ::std::move(from);
  }

  inline AcpcForTest& operator=(AcpcForTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcpcForTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcpcForTest* internal_default_instance() {
    return reinterpret_cast<const AcpcForTest*>(
               &_AcpcForTest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AcpcForTest* other);
  friend void swap(AcpcForTest& a, AcpcForTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcpcForTest* New() const PROTOBUF_FINAL { return New(NULL); }

  AcpcForTest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcpcForTest& from);
  void MergeFrom(const AcpcForTest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcpcForTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string password = 1;
  void clear_password();
  static const int kPasswordFieldNumber = 1;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 robot_cnt = 2;
  void clear_robot_cnt();
  static const int kRobotCntFieldNumber = 2;
  ::google::protobuf::uint32 robot_cnt() const;
  void set_robot_cnt(::google::protobuf::uint32 value);

  // uint32 game_type = 3;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.AcpcForTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 robot_cnt_;
  ::google::protobuf::uint32 game_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsAcpcForTestImpl();
};
// -------------------------------------------------------------------

class CheckRoomTimeout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.CheckRoomTimeout) */ {
 public:
  CheckRoomTimeout();
  virtual ~CheckRoomTimeout();

  CheckRoomTimeout(const CheckRoomTimeout& from);

  inline CheckRoomTimeout& operator=(const CheckRoomTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckRoomTimeout(CheckRoomTimeout&& from) noexcept
    : CheckRoomTimeout() {
    *this = ::std::move(from);
  }

  inline CheckRoomTimeout& operator=(CheckRoomTimeout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRoomTimeout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckRoomTimeout* internal_default_instance() {
    return reinterpret_cast<const CheckRoomTimeout*>(
               &_CheckRoomTimeout_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CheckRoomTimeout* other);
  friend void swap(CheckRoomTimeout& a, CheckRoomTimeout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckRoomTimeout* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckRoomTimeout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckRoomTimeout& from);
  void MergeFrom(const CheckRoomTimeout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckRoomTimeout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pb.CheckRoomTimeout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsCheckRoomTimeoutImpl();
};
// -------------------------------------------------------------------

class SetDealerMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.SetDealerMode) */ {
 public:
  SetDealerMode();
  virtual ~SetDealerMode();

  SetDealerMode(const SetDealerMode& from);

  inline SetDealerMode& operator=(const SetDealerMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetDealerMode(SetDealerMode&& from) noexcept
    : SetDealerMode() {
    *this = ::std::move(from);
  }

  inline SetDealerMode& operator=(SetDealerMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDealerMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDealerMode* internal_default_instance() {
    return reinterpret_cast<const SetDealerMode*>(
               &_SetDealerMode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SetDealerMode* other);
  friend void swap(SetDealerMode& a, SetDealerMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetDealerMode* New() const PROTOBUF_FINAL { return New(NULL); }

  SetDealerMode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetDealerMode& from);
  void MergeFrom(const SetDealerMode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetDealerMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 dealer_mode = 3;
  void clear_dealer_mode();
  static const int kDealerModeFieldNumber = 3;
  ::google::protobuf::uint32 dealer_mode() const;
  void set_dealer_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.SetDealerMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 dealer_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsSetDealerModeImpl();
};
// -------------------------------------------------------------------

class RoleState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoleState) */ {
 public:
  RoleState();
  virtual ~RoleState();

  RoleState(const RoleState& from);

  inline RoleState& operator=(const RoleState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleState(RoleState&& from) noexcept
    : RoleState() {
    *this = ::std::move(from);
  }

  inline RoleState& operator=(RoleState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleState* internal_default_instance() {
    return reinterpret_cast<const RoleState*>(
               &_RoleState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(RoleState* other);
  friend void swap(RoleState& a, RoleState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleState* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleState& from);
  void MergeFrom(const RoleState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.AcpcCard hole_cards = 3;
  int hole_cards_size() const;
  void clear_hole_cards();
  static const int kHoleCardsFieldNumber = 3;
  const ::Pb::AcpcCard& hole_cards(int index) const;
  ::Pb::AcpcCard* mutable_hole_cards(int index);
  ::Pb::AcpcCard* add_hole_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_hole_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      hole_cards() const;

  // uint32 spent = 1;
  void clear_spent();
  static const int kSpentFieldNumber = 1;
  ::google::protobuf::uint32 spent() const;
  void set_spent(::google::protobuf::uint32 value);

  // uint32 fold = 2;
  void clear_fold();
  static const int kFoldFieldNumber = 2;
  ::google::protobuf::uint32 fold() const;
  void set_fold(::google::protobuf::uint32 value);

  // int32 Score = 4;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // int32 turn = 5;
  void clear_turn();
  static const int kTurnFieldNumber = 5;
  ::google::protobuf::int32 turn() const;
  void set_turn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoleState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > hole_cards_;
  ::google::protobuf::uint32 spent_;
  ::google::protobuf::uint32 fold_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 turn_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsRoleStateImpl();
};
// -------------------------------------------------------------------

class RoleAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RoleAction) */ {
 public:
  RoleAction();
  virtual ~RoleAction();

  RoleAction(const RoleAction& from);

  inline RoleAction& operator=(const RoleAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleAction(RoleAction&& from) noexcept
    : RoleAction() {
    *this = ::std::move(from);
  }

  inline RoleAction& operator=(RoleAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleAction* internal_default_instance() {
    return reinterpret_cast<const RoleAction*>(
               &_RoleAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(RoleAction* other);
  friend void swap(RoleAction& a, RoleAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleAction* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleAction& from);
  void MergeFrom(const RoleAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seat = 1;
  void clear_seat();
  static const int kSeatFieldNumber = 1;
  ::google::protobuf::uint32 seat() const;
  void set_seat(::google::protobuf::uint32 value);

  // uint32 round = 2;
  void clear_round();
  static const int kRoundFieldNumber = 2;
  ::google::protobuf::uint32 round() const;
  void set_round(::google::protobuf::uint32 value);

  // uint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // int32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pb.RoleAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 seat_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::int32 size_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsRoleActionImpl();
};
// -------------------------------------------------------------------

class QueryMatchStateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.QueryMatchStateReq) */ {
 public:
  QueryMatchStateReq();
  virtual ~QueryMatchStateReq();

  QueryMatchStateReq(const QueryMatchStateReq& from);

  inline QueryMatchStateReq& operator=(const QueryMatchStateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryMatchStateReq(QueryMatchStateReq&& from) noexcept
    : QueryMatchStateReq() {
    *this = ::std::move(from);
  }

  inline QueryMatchStateReq& operator=(QueryMatchStateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMatchStateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryMatchStateReq* internal_default_instance() {
    return reinterpret_cast<const QueryMatchStateReq*>(
               &_QueryMatchStateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(QueryMatchStateReq* other);
  friend void swap(QueryMatchStateReq& a, QueryMatchStateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryMatchStateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryMatchStateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryMatchStateReq& from);
  void MergeFrom(const QueryMatchStateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryMatchStateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 role_id = 1;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.QueryMatchStateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 role_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsQueryMatchStateReqImpl();
};
// -------------------------------------------------------------------

class QueryMatchStateResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.QueryMatchStateResp) */ {
 public:
  QueryMatchStateResp();
  virtual ~QueryMatchStateResp();

  QueryMatchStateResp(const QueryMatchStateResp& from);

  inline QueryMatchStateResp& operator=(const QueryMatchStateResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryMatchStateResp(QueryMatchStateResp&& from) noexcept
    : QueryMatchStateResp() {
    *this = ::std::move(from);
  }

  inline QueryMatchStateResp& operator=(QueryMatchStateResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMatchStateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryMatchStateResp* internal_default_instance() {
    return reinterpret_cast<const QueryMatchStateResp*>(
               &_QueryMatchStateResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(QueryMatchStateResp* other);
  friend void swap(QueryMatchStateResp& a, QueryMatchStateResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryMatchStateResp* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryMatchStateResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryMatchStateResp& from);
  void MergeFrom(const QueryMatchStateResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryMatchStateResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.AcpcCard board_cards = 8;
  int board_cards_size() const;
  void clear_board_cards();
  static const int kBoardCardsFieldNumber = 8;
  const ::Pb::AcpcCard& board_cards(int index) const;
  ::Pb::AcpcCard* mutable_board_cards(int index);
  ::Pb::AcpcCard* add_board_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_board_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      board_cards() const;

  // repeated uint32 allow_raise = 9;
  int allow_raise_size() const;
  void clear_allow_raise();
  static const int kAllowRaiseFieldNumber = 9;
  ::google::protobuf::uint32 allow_raise(int index) const;
  void set_allow_raise(int index, ::google::protobuf::uint32 value);
  void add_allow_raise(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      allow_raise() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_allow_raise();

  // repeated .Pb.RoleState role_state = 10;
  int role_state_size() const;
  void clear_role_state();
  static const int kRoleStateFieldNumber = 10;
  const ::Pb::RoleState& role_state(int index) const;
  ::Pb::RoleState* mutable_role_state(int index);
  ::Pb::RoleState* add_role_state();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleState >*
      mutable_role_state();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoleState >&
      role_state() const;

  // repeated .Pb.RoleAction role_action = 11;
  int role_action_size() const;
  void clear_role_action();
  static const int kRoleActionFieldNumber = 11;
  const ::Pb::RoleAction& role_action(int index) const;
  ::Pb::RoleAction* mutable_role_action(int index);
  ::Pb::RoleAction* add_role_action();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleAction >*
      mutable_role_action();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoleAction >&
      role_action() const;

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 dealer_role_id = 2;
  void clear_dealer_role_id();
  static const int kDealerRoleIdFieldNumber = 2;
  ::google::protobuf::uint32 dealer_role_id() const;
  void set_dealer_role_id(::google::protobuf::uint32 value);

  // uint32 role_id = 3;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  ::google::protobuf::uint32 role_id() const;
  void set_role_id(::google::protobuf::uint32 value);

  // uint32 hand_id = 4;
  void clear_hand_id();
  static const int kHandIdFieldNumber = 4;
  ::google::protobuf::uint32 hand_id() const;
  void set_hand_id(::google::protobuf::uint32 value);

  // uint32 round = 5;
  void clear_round();
  static const int kRoundFieldNumber = 5;
  ::google::protobuf::uint32 round() const;
  void set_round(::google::protobuf::uint32 value);

  // uint32 finished = 6;
  void clear_finished();
  static const int kFinishedFieldNumber = 6;
  ::google::protobuf::uint32 finished() const;
  void set_finished(::google::protobuf::uint32 value);

  // uint32 max_spent = 7;
  void clear_max_spent();
  static const int kMaxSpentFieldNumber = 7;
  ::google::protobuf::uint32 max_spent() const;
  void set_max_spent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.QueryMatchStateResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > board_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > allow_raise_;
  mutable int _allow_raise_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleState > role_state_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoleAction > role_action_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 dealer_role_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 hand_id_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 finished_;
  ::google::protobuf::uint32 max_spent_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsQueryMatchStateRespImpl();
};
// -------------------------------------------------------------------

class RedisRoomBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RedisRoomBase) */ {
 public:
  RedisRoomBase();
  virtual ~RedisRoomBase();

  RedisRoomBase(const RedisRoomBase& from);

  inline RedisRoomBase& operator=(const RedisRoomBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisRoomBase(RedisRoomBase&& from) noexcept
    : RedisRoomBase() {
    *this = ::std::move(from);
  }

  inline RedisRoomBase& operator=(RedisRoomBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisRoomBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisRoomBase* internal_default_instance() {
    return reinterpret_cast<const RedisRoomBase*>(
               &_RedisRoomBase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(RedisRoomBase* other);
  friend void swap(RedisRoomBase& a, RedisRoomBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisRoomBase* New() const PROTOBUF_FINAL { return New(NULL); }

  RedisRoomBase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedisRoomBase& from);
  void MergeFrom(const RedisRoomBase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedisRoomBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string robot_param = 3;
  void clear_robot_param();
  static const int kRobotParamFieldNumber = 3;
  const ::std::string& robot_param() const;
  void set_robot_param(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_param(::std::string&& value);
  #endif
  void set_robot_param(const char* value);
  void set_robot_param(const char* value, size_t size);
  ::std::string* mutable_robot_param();
  ::std::string* release_robot_param();
  void set_allocated_robot_param(::std::string* robot_param);

  // string sophia_name = 4;
  void clear_sophia_name();
  static const int kSophiaNameFieldNumber = 4;
  const ::std::string& sophia_name() const;
  void set_sophia_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sophia_name(::std::string&& value);
  #endif
  void set_sophia_name(const char* value);
  void set_sophia_name(const char* value, size_t size);
  ::std::string* mutable_sophia_name();
  ::std::string* release_sophia_name();
  void set_allocated_sophia_name(::std::string* sophia_name);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint32 game_type = 2;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 dealer_mode = 5;
  void clear_dealer_mode();
  static const int kDealerModeFieldNumber = 5;
  ::google::protobuf::uint32 dealer_mode() const;
  void set_dealer_mode(::google::protobuf::uint32 value);

  // uint32 alloc_seat = 6;
  void clear_alloc_seat();
  static const int kAllocSeatFieldNumber = 6;
  ::google::protobuf::uint32 alloc_seat() const;
  void set_alloc_seat(::google::protobuf::uint32 value);

  // uint32 expire_time = 7;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 7;
  ::google::protobuf::uint32 expire_time() const;
  void set_expire_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RedisRoomBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr robot_param_;
  ::google::protobuf::internal::ArenaStringPtr sophia_name_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 dealer_mode_;
  ::google::protobuf::uint32 alloc_seat_;
  ::google::protobuf::uint32 expire_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsRedisRoomBaseImpl();
};
// -------------------------------------------------------------------

class RedisRoomAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RedisRoomAction) */ {
 public:
  RedisRoomAction();
  virtual ~RedisRoomAction();

  RedisRoomAction(const RedisRoomAction& from);

  inline RedisRoomAction& operator=(const RedisRoomAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisRoomAction(RedisRoomAction&& from) noexcept
    : RedisRoomAction() {
    *this = ::std::move(from);
  }

  inline RedisRoomAction& operator=(RedisRoomAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisRoomAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisRoomAction* internal_default_instance() {
    return reinterpret_cast<const RedisRoomAction*>(
               &_RedisRoomAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(RedisRoomAction* other);
  friend void swap(RedisRoomAction& a, RedisRoomAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisRoomAction* New() const PROTOBUF_FINAL { return New(NULL); }

  RedisRoomAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedisRoomAction& from);
  void MergeFrom(const RedisRoomAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedisRoomAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 spent = 4;
  int spent_size() const;
  void clear_spent();
  static const int kSpentFieldNumber = 4;
  ::google::protobuf::int32 spent(int index) const;
  void set_spent(int index, ::google::protobuf::int32 value);
  void add_spent(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spent() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spent();

  // repeated .Pb.AcpcRound round_actions = 5;
  int round_actions_size() const;
  void clear_round_actions();
  static const int kRoundActionsFieldNumber = 5;
  const ::Pb::AcpcRound& round_actions(int index) const;
  ::Pb::AcpcRound* mutable_round_actions(int index);
  ::Pb::AcpcRound* add_round_actions();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >*
      mutable_round_actions();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >&
      round_actions() const;

  // repeated int32 fold_players = 8;
  int fold_players_size() const;
  void clear_fold_players();
  static const int kFoldPlayersFieldNumber = 8;
  ::google::protobuf::int32 fold_players(int index) const;
  void set_fold_players(int index, ::google::protobuf::int32 value);
  void add_fold_players(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fold_players() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fold_players();

  // repeated .Pb.AcpcCard board_cards = 9;
  int board_cards_size() const;
  void clear_board_cards();
  static const int kBoardCardsFieldNumber = 9;
  const ::Pb::AcpcCard& board_cards(int index) const;
  ::Pb::AcpcCard* mutable_board_cards(int index);
  ::Pb::AcpcCard* add_board_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_board_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      board_cards() const;

  // repeated .Pb.AcpcCard hole_cards = 10;
  int hole_cards_size() const;
  void clear_hole_cards();
  static const int kHoleCardsFieldNumber = 10;
  const ::Pb::AcpcCard& hole_cards(int index) const;
  ::Pb::AcpcCard* mutable_hole_cards(int index);
  ::Pb::AcpcCard* add_hole_cards();
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
      mutable_hole_cards();
  const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
      hole_cards() const;

  // repeated int32 round_spent = 11;
  int round_spent_size() const;
  void clear_round_spent();
  static const int kRoundSpentFieldNumber = 11;
  ::google::protobuf::int32 round_spent(int index) const;
  void set_round_spent(int index, ::google::protobuf::int32 value);
  void add_round_spent(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_spent() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_spent();

  // string action_rate = 14;
  void clear_action_rate();
  static const int kActionRateFieldNumber = 14;
  const ::std::string& action_rate() const;
  void set_action_rate(const ::std::string& value);
  #if LANG_CXX11
  void set_action_rate(::std::string&& value);
  #endif
  void set_action_rate(const char* value);
  void set_action_rate(const char* value, size_t size);
  ::std::string* mutable_action_rate();
  ::std::string* release_action_rate();
  void set_allocated_action_rate(::std::string* action_rate);

  // string report_logs = 15;
  void clear_report_logs();
  static const int kReportLogsFieldNumber = 15;
  const ::std::string& report_logs() const;
  void set_report_logs(const ::std::string& value);
  #if LANG_CXX11
  void set_report_logs(::std::string&& value);
  #endif
  void set_report_logs(const char* value);
  void set_report_logs(const char* value, size_t size);
  ::std::string* mutable_report_logs();
  ::std::string* release_report_logs();
  void set_allocated_report_logs(::std::string* report_logs);

  // int32 hand_id = 1;
  void clear_hand_id();
  static const int kHandIdFieldNumber = 1;
  ::google::protobuf::int32 hand_id() const;
  void set_hand_id(::google::protobuf::int32 value);

  // int32 max_spent = 2;
  void clear_max_spent();
  static const int kMaxSpentFieldNumber = 2;
  ::google::protobuf::int32 max_spent() const;
  void set_max_spent(::google::protobuf::int32 value);

  // int32 min_nolimit_raise_to = 3;
  void clear_min_nolimit_raise_to();
  static const int kMinNolimitRaiseToFieldNumber = 3;
  ::google::protobuf::int32 min_nolimit_raise_to() const;
  void set_min_nolimit_raise_to(::google::protobuf::int32 value);

  // int32 round = 6;
  void clear_round();
  static const int kRoundFieldNumber = 6;
  ::google::protobuf::int32 round() const;
  void set_round(::google::protobuf::int32 value);

  // int32 finished = 7;
  void clear_finished();
  static const int kFinishedFieldNumber = 7;
  ::google::protobuf::int32 finished() const;
  void set_finished(::google::protobuf::int32 value);

  // uint32 dealer_round = 12;
  void clear_dealer_round();
  static const int kDealerRoundFieldNumber = 12;
  ::google::protobuf::uint32 dealer_round() const;
  void set_dealer_round(::google::protobuf::uint32 value);

  // uint32 action_time = 13;
  void clear_action_time();
  static const int kActionTimeFieldNumber = 13;
  ::google::protobuf::uint32 action_time() const;
  void set_action_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RedisRoomAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spent_;
  mutable int _spent_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound > round_actions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fold_players_;
  mutable int _fold_players_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > board_cards_;
  ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard > hole_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_spent_;
  mutable int _round_spent_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr action_rate_;
  ::google::protobuf::internal::ArenaStringPtr report_logs_;
  ::google::protobuf::int32 hand_id_;
  ::google::protobuf::int32 max_spent_;
  ::google::protobuf::int32 min_nolimit_raise_to_;
  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 finished_;
  ::google::protobuf::uint32 dealer_round_;
  ::google::protobuf::uint32 action_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsRedisRoomActionImpl();
};
// -------------------------------------------------------------------

class RedisRoomReady : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pb.RedisRoomReady) */ {
 public:
  RedisRoomReady();
  virtual ~RedisRoomReady();

  RedisRoomReady(const RedisRoomReady& from);

  inline RedisRoomReady& operator=(const RedisRoomReady& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisRoomReady(RedisRoomReady&& from) noexcept
    : RedisRoomReady() {
    *this = ::std::move(from);
  }

  inline RedisRoomReady& operator=(RedisRoomReady&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisRoomReady& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisRoomReady* internal_default_instance() {
    return reinterpret_cast<const RedisRoomReady*>(
               &_RedisRoomReady_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(RedisRoomReady* other);
  friend void swap(RedisRoomReady& a, RedisRoomReady& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisRoomReady* New() const PROTOBUF_FINAL { return New(NULL); }

  RedisRoomReady* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedisRoomReady& from);
  void MergeFrom(const RedisRoomReady& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedisRoomReady* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pb.RoomRole role_info = 1;
  int role_info_size() const;
  void clear_role_info();
  static const int kRoleInfoFieldNumber = 1;
  const ::Pb::RoomRole& role_info(int index) const;
  ::Pb::RoomRole* mutable_role_info(int index);
  ::Pb::RoomRole* add_role_info();
  ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >*
      mutable_role_info();
  const ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >&
      role_info() const;

  // string cfr_model = 6;
  void clear_cfr_model();
  static const int kCfrModelFieldNumber = 6;
  const ::std::string& cfr_model() const;
  void set_cfr_model(const ::std::string& value);
  #if LANG_CXX11
  void set_cfr_model(::std::string&& value);
  #endif
  void set_cfr_model(const char* value);
  void set_cfr_model(const char* value, size_t size);
  ::std::string* mutable_cfr_model();
  ::std::string* release_cfr_model();
  void set_allocated_cfr_model(::std::string* cfr_model);

  // bool is_running = 2;
  void clear_is_running();
  static const int kIsRunningFieldNumber = 2;
  bool is_running() const;
  void set_is_running(bool value);

  // uint32 game_time = 3;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 3;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // uint32 p0seat = 4;
  void clear_p0seat();
  static const int kP0SeatFieldNumber = 4;
  ::google::protobuf::uint32 p0seat() const;
  void set_p0seat(::google::protobuf::uint32 value);

  // uint32 tcards_index = 5;
  void clear_tcards_index();
  static const int kTcardsIndexFieldNumber = 5;
  ::google::protobuf::uint32 tcards_index() const;
  void set_tcards_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pb.RedisRoomReady)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole > role_info_;
  ::google::protobuf::internal::ArenaStringPtr cfr_model_;
  bool is_running_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 p0seat_;
  ::google::protobuf::uint32 tcards_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_acpc_2eproto::TableStruct;
  friend void ::protobuf_acpc_2eproto::InitDefaultsRedisRoomReadyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportLog

// uint32 tv_sec = 1;
inline void ReportLog::clear_tv_sec() {
  tv_sec_ = 0u;
}
inline ::google::protobuf::uint32 ReportLog::tv_sec() const {
  // @@protoc_insertion_point(field_get:Pb.ReportLog.tv_sec)
  return tv_sec_;
}
inline void ReportLog::set_tv_sec(::google::protobuf::uint32 value) {
  
  tv_sec_ = value;
  // @@protoc_insertion_point(field_set:Pb.ReportLog.tv_sec)
}

// uint32 tv_usec = 2;
inline void ReportLog::clear_tv_usec() {
  tv_usec_ = 0u;
}
inline ::google::protobuf::uint32 ReportLog::tv_usec() const {
  // @@protoc_insertion_point(field_get:Pb.ReportLog.tv_usec)
  return tv_usec_;
}
inline void ReportLog::set_tv_usec(::google::protobuf::uint32 value) {
  
  tv_usec_ = value;
  // @@protoc_insertion_point(field_set:Pb.ReportLog.tv_usec)
}

// uint32 opt_time = 3;
inline void ReportLog::clear_opt_time() {
  opt_time_ = 0u;
}
inline ::google::protobuf::uint32 ReportLog::opt_time() const {
  // @@protoc_insertion_point(field_get:Pb.ReportLog.opt_time)
  return opt_time_;
}
inline void ReportLog::set_opt_time(::google::protobuf::uint32 value) {
  
  opt_time_ = value;
  // @@protoc_insertion_point(field_set:Pb.ReportLog.opt_time)
}

// uint32 opt_source = 4;
inline void ReportLog::clear_opt_source() {
  opt_source_ = 0u;
}
inline ::google::protobuf::uint32 ReportLog::opt_source() const {
  // @@protoc_insertion_point(field_get:Pb.ReportLog.opt_source)
  return opt_source_;
}
inline void ReportLog::set_opt_source(::google::protobuf::uint32 value) {
  
  opt_source_ = value;
  // @@protoc_insertion_point(field_set:Pb.ReportLog.opt_source)
}

// uint32 before_pot = 5;
inline void ReportLog::clear_before_pot() {
  before_pot_ = 0u;
}
inline ::google::protobuf::uint32 ReportLog::before_pot() const {
  // @@protoc_insertion_point(field_get:Pb.ReportLog.before_pot)
  return before_pot_;
}
inline void ReportLog::set_before_pot(::google::protobuf::uint32 value) {
  
  before_pot_ = value;
  // @@protoc_insertion_point(field_set:Pb.ReportLog.before_pot)
}

// -------------------------------------------------------------------

// ReportLogs

// repeated .Pb.ReportLog report_logs = 1;
inline int ReportLogs::report_logs_size() const {
  return report_logs_.size();
}
inline void ReportLogs::clear_report_logs() {
  report_logs_.Clear();
}
inline const ::Pb::ReportLog& ReportLogs::report_logs(int index) const {
  // @@protoc_insertion_point(field_get:Pb.ReportLogs.report_logs)
  return report_logs_.Get(index);
}
inline ::Pb::ReportLog* ReportLogs::mutable_report_logs(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.ReportLogs.report_logs)
  return report_logs_.Mutable(index);
}
inline ::Pb::ReportLog* ReportLogs::add_report_logs() {
  // @@protoc_insertion_point(field_add:Pb.ReportLogs.report_logs)
  return report_logs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::ReportLog >*
ReportLogs::mutable_report_logs() {
  // @@protoc_insertion_point(field_mutable_list:Pb.ReportLogs.report_logs)
  return &report_logs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::ReportLog >&
ReportLogs::report_logs() const {
  // @@protoc_insertion_point(field_list:Pb.ReportLogs.report_logs)
  return report_logs_;
}

// -------------------------------------------------------------------

// Audience

// uint32 role_id = 1;
inline void Audience::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 Audience::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.Audience.role_id)
  return role_id_;
}
inline void Audience::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.Audience.role_id)
}

// string role_name = 2;
inline void Audience::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Audience::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.Audience.role_name)
  return role_name_.GetNoArena();
}
inline void Audience::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.Audience.role_name)
}
#if LANG_CXX11
inline void Audience::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.Audience.role_name)
}
#endif
inline void Audience::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.Audience.role_name)
}
inline void Audience::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.Audience.role_name)
}
inline ::std::string* Audience::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.Audience.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Audience::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.Audience.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Audience::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.Audience.role_name)
}

// string role_img = 3;
inline void Audience::clear_role_img() {
  role_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Audience::role_img() const {
  // @@protoc_insertion_point(field_get:Pb.Audience.role_img)
  return role_img_.GetNoArena();
}
inline void Audience::set_role_img(const ::std::string& value) {
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.Audience.role_img)
}
#if LANG_CXX11
inline void Audience::set_role_img(::std::string&& value) {
  
  role_img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.Audience.role_img)
}
#endif
inline void Audience::set_role_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.Audience.role_img)
}
inline void Audience::set_role_img(const char* value, size_t size) {
  
  role_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.Audience.role_img)
}
inline ::std::string* Audience::mutable_role_img() {
  
  // @@protoc_insertion_point(field_mutable:Pb.Audience.role_img)
  return role_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Audience::release_role_img() {
  // @@protoc_insertion_point(field_release:Pb.Audience.role_img)
  
  return role_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Audience::set_allocated_role_img(::std::string* role_img) {
  if (role_img != NULL) {
    
  } else {
    
  }
  role_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_img);
  // @@protoc_insertion_point(field_set_allocated:Pb.Audience.role_img)
}

// -------------------------------------------------------------------

// AcpcRoomCreate

// uint32 role_id = 1;
inline void AcpcRoomCreate::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoomCreate::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.role_id)
  return role_id_;
}
inline void AcpcRoomCreate::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.role_id)
}

// string role_name = 2;
inline void AcpcRoomCreate::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoomCreate::role_name() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.role_name)
  return role_name_.GetNoArena();
}
inline void AcpcRoomCreate::set_role_name(const ::std::string& value) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.role_name)
}
#if LANG_CXX11
inline void AcpcRoomCreate::set_role_name(::std::string&& value) {
  
  role_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoomCreate.role_name)
}
#endif
inline void AcpcRoomCreate::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoomCreate.role_name)
}
inline void AcpcRoomCreate::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoomCreate.role_name)
}
inline ::std::string* AcpcRoomCreate::mutable_role_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoomCreate.role_name)
  return role_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoomCreate::release_role_name() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoomCreate.role_name)
  
  return role_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoomCreate::set_allocated_role_name(::std::string* role_name) {
  if (role_name != NULL) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoomCreate.role_name)
}

// string room_name = 3;
inline void AcpcRoomCreate::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoomCreate::room_name() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.room_name)
  return room_name_.GetNoArena();
}
inline void AcpcRoomCreate::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.room_name)
}
#if LANG_CXX11
inline void AcpcRoomCreate::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoomCreate.room_name)
}
#endif
inline void AcpcRoomCreate::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoomCreate.room_name)
}
inline void AcpcRoomCreate::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoomCreate.room_name)
}
inline ::std::string* AcpcRoomCreate::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoomCreate.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoomCreate::release_room_name() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoomCreate.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoomCreate::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoomCreate.room_name)
}

// uint32 game_type = 4;
inline void AcpcRoomCreate::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoomCreate::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.game_type)
  return game_type_;
}
inline void AcpcRoomCreate::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.game_type)
}

// uint32 difficulty = 5;
inline void AcpcRoomCreate::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoomCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.difficulty)
  return difficulty_;
}
inline void AcpcRoomCreate::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.difficulty)
}

// string password = 6;
inline void AcpcRoomCreate::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoomCreate::password() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.password)
  return password_.GetNoArena();
}
inline void AcpcRoomCreate::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.password)
}
#if LANG_CXX11
inline void AcpcRoomCreate::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoomCreate.password)
}
#endif
inline void AcpcRoomCreate::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoomCreate.password)
}
inline void AcpcRoomCreate::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoomCreate.password)
}
inline ::std::string* AcpcRoomCreate::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoomCreate.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoomCreate::release_password() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoomCreate.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoomCreate::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoomCreate.password)
}

// string version = 7;
inline void AcpcRoomCreate::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoomCreate::version() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.version)
  return version_.GetNoArena();
}
inline void AcpcRoomCreate::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.version)
}
#if LANG_CXX11
inline void AcpcRoomCreate::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoomCreate.version)
}
#endif
inline void AcpcRoomCreate::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoomCreate.version)
}
inline void AcpcRoomCreate::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoomCreate.version)
}
inline ::std::string* AcpcRoomCreate::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoomCreate.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoomCreate::release_version() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoomCreate.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoomCreate::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoomCreate.version)
}

// string acpc_ip = 8;
inline void AcpcRoomCreate::clear_acpc_ip() {
  acpc_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoomCreate::acpc_ip() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.acpc_ip)
  return acpc_ip_.GetNoArena();
}
inline void AcpcRoomCreate::set_acpc_ip(const ::std::string& value) {
  
  acpc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.acpc_ip)
}
#if LANG_CXX11
inline void AcpcRoomCreate::set_acpc_ip(::std::string&& value) {
  
  acpc_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoomCreate.acpc_ip)
}
#endif
inline void AcpcRoomCreate::set_acpc_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  acpc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoomCreate.acpc_ip)
}
inline void AcpcRoomCreate::set_acpc_ip(const char* value, size_t size) {
  
  acpc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoomCreate.acpc_ip)
}
inline ::std::string* AcpcRoomCreate::mutable_acpc_ip() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoomCreate.acpc_ip)
  return acpc_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoomCreate::release_acpc_ip() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoomCreate.acpc_ip)
  
  return acpc_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoomCreate::set_allocated_acpc_ip(::std::string* acpc_ip) {
  if (acpc_ip != NULL) {
    
  } else {
    
  }
  acpc_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acpc_ip);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoomCreate.acpc_ip)
}

// uint32 acpc_port = 9;
inline void AcpcRoomCreate::clear_acpc_port() {
  acpc_port_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoomCreate::acpc_port() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.acpc_port)
  return acpc_port_;
}
inline void AcpcRoomCreate::set_acpc_port(::google::protobuf::uint32 value) {
  
  acpc_port_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.acpc_port)
}

// uint32 brain_id = 10;
inline void AcpcRoomCreate::clear_brain_id() {
  brain_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoomCreate::brain_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.brain_id)
  return brain_id_;
}
inline void AcpcRoomCreate::set_brain_id(::google::protobuf::uint32 value) {
  
  brain_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.brain_id)
}

// uint64 room_id = 11;
inline void AcpcRoomCreate::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcRoomCreate::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoomCreate.room_id)
  return room_id_;
}
inline void AcpcRoomCreate::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoomCreate.room_id)
}

// -------------------------------------------------------------------

// AcpcEnterRoomReq

// uint64 room_id = 1;
inline void AcpcEnterRoomReq::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcEnterRoomReq::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomReq.room_id)
  return room_id_;
}
inline void AcpcEnterRoomReq::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomReq.room_id)
}

// uint32 role_id = 2;
inline void AcpcEnterRoomReq::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomReq::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomReq.role_id)
  return role_id_;
}
inline void AcpcEnterRoomReq::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomReq.role_id)
}

// uint32 game_type = 3;
inline void AcpcEnterRoomReq::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomReq::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomReq.game_type)
  return game_type_;
}
inline void AcpcEnterRoomReq::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomReq.game_type)
}

// string sophia_name = 4;
inline void AcpcEnterRoomReq::clear_sophia_name() {
  sophia_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcEnterRoomReq::sophia_name() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomReq.sophia_name)
  return sophia_name_.GetNoArena();
}
inline void AcpcEnterRoomReq::set_sophia_name(const ::std::string& value) {
  
  sophia_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomReq.sophia_name)
}
#if LANG_CXX11
inline void AcpcEnterRoomReq::set_sophia_name(::std::string&& value) {
  
  sophia_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcEnterRoomReq.sophia_name)
}
#endif
inline void AcpcEnterRoomReq::set_sophia_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sophia_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcEnterRoomReq.sophia_name)
}
inline void AcpcEnterRoomReq::set_sophia_name(const char* value, size_t size) {
  
  sophia_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcEnterRoomReq.sophia_name)
}
inline ::std::string* AcpcEnterRoomReq::mutable_sophia_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomReq.sophia_name)
  return sophia_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcEnterRoomReq::release_sophia_name() {
  // @@protoc_insertion_point(field_release:Pb.AcpcEnterRoomReq.sophia_name)
  
  return sophia_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcEnterRoomReq::set_allocated_sophia_name(::std::string* sophia_name) {
  if (sophia_name != NULL) {
    
  } else {
    
  }
  sophia_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sophia_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcEnterRoomReq.sophia_name)
}

// string rm_test_param = 5;
inline void AcpcEnterRoomReq::clear_rm_test_param() {
  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcEnterRoomReq::rm_test_param() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomReq.rm_test_param)
  return rm_test_param_.GetNoArena();
}
inline void AcpcEnterRoomReq::set_rm_test_param(const ::std::string& value) {
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomReq.rm_test_param)
}
#if LANG_CXX11
inline void AcpcEnterRoomReq::set_rm_test_param(::std::string&& value) {
  
  rm_test_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcEnterRoomReq.rm_test_param)
}
#endif
inline void AcpcEnterRoomReq::set_rm_test_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcEnterRoomReq.rm_test_param)
}
inline void AcpcEnterRoomReq::set_rm_test_param(const char* value, size_t size) {
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcEnterRoomReq.rm_test_param)
}
inline ::std::string* AcpcEnterRoomReq::mutable_rm_test_param() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomReq.rm_test_param)
  return rm_test_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcEnterRoomReq::release_rm_test_param() {
  // @@protoc_insertion_point(field_release:Pb.AcpcEnterRoomReq.rm_test_param)
  
  return rm_test_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcEnterRoomReq::set_allocated_rm_test_param(::std::string* rm_test_param) {
  if (rm_test_param != NULL) {
    
  } else {
    
  }
  rm_test_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rm_test_param);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcEnterRoomReq.rm_test_param)
}

// uint32 join_type = 6;
inline void AcpcEnterRoomReq::clear_join_type() {
  join_type_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomReq::join_type() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomReq.join_type)
  return join_type_;
}
inline void AcpcEnterRoomReq::set_join_type(::google::protobuf::uint32 value) {
  
  join_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomReq.join_type)
}

// -------------------------------------------------------------------

// AcpcEnterRoomResp

// uint64 room_id = 1;
inline void AcpcEnterRoomResp::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcEnterRoomResp::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.room_id)
  return room_id_;
}
inline void AcpcEnterRoomResp::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomResp.room_id)
}

// uint32 role_id = 2;
inline void AcpcEnterRoomResp::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomResp::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.role_id)
  return role_id_;
}
inline void AcpcEnterRoomResp::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomResp.role_id)
}

// uint32 game_type = 3;
inline void AcpcEnterRoomResp::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomResp::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.game_type)
  return game_type_;
}
inline void AcpcEnterRoomResp::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomResp.game_type)
}

// uint32 self_role_pos = 4;
inline void AcpcEnterRoomResp::clear_self_role_pos() {
  self_role_pos_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomResp::self_role_pos() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.self_role_pos)
  return self_role_pos_;
}
inline void AcpcEnterRoomResp::set_self_role_pos(::google::protobuf::uint32 value) {
  
  self_role_pos_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomResp.self_role_pos)
}

// repeated .Pb.RoleInfo role_info = 5;
inline int AcpcEnterRoomResp::role_info_size() const {
  return role_info_.size();
}
inline const ::Pb::RoleInfo& AcpcEnterRoomResp::role_info(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.role_info)
  return role_info_.Get(index);
}
inline ::Pb::RoleInfo* AcpcEnterRoomResp::mutable_role_info(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomResp.role_info)
  return role_info_.Mutable(index);
}
inline ::Pb::RoleInfo* AcpcEnterRoomResp::add_role_info() {
  // @@protoc_insertion_point(field_add:Pb.AcpcEnterRoomResp.role_info)
  return role_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoleInfo >*
AcpcEnterRoomResp::mutable_role_info() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcEnterRoomResp.role_info)
  return &role_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoleInfo >&
AcpcEnterRoomResp::role_info() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcEnterRoomResp.role_info)
  return role_info_;
}

// repeated .Pb.Audience audience_list = 6;
inline int AcpcEnterRoomResp::audience_list_size() const {
  return audience_list_.size();
}
inline void AcpcEnterRoomResp::clear_audience_list() {
  audience_list_.Clear();
}
inline const ::Pb::Audience& AcpcEnterRoomResp::audience_list(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.audience_list)
  return audience_list_.Get(index);
}
inline ::Pb::Audience* AcpcEnterRoomResp::mutable_audience_list(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomResp.audience_list)
  return audience_list_.Mutable(index);
}
inline ::Pb::Audience* AcpcEnterRoomResp::add_audience_list() {
  // @@protoc_insertion_point(field_add:Pb.AcpcEnterRoomResp.audience_list)
  return audience_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::Audience >*
AcpcEnterRoomResp::mutable_audience_list() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcEnterRoomResp.audience_list)
  return &audience_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::Audience >&
AcpcEnterRoomResp::audience_list() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcEnterRoomResp.audience_list)
  return audience_list_;
}

// string rm_test_param = 7;
inline void AcpcEnterRoomResp::clear_rm_test_param() {
  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcEnterRoomResp::rm_test_param() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.rm_test_param)
  return rm_test_param_.GetNoArena();
}
inline void AcpcEnterRoomResp::set_rm_test_param(const ::std::string& value) {
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomResp.rm_test_param)
}
#if LANG_CXX11
inline void AcpcEnterRoomResp::set_rm_test_param(::std::string&& value) {
  
  rm_test_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcEnterRoomResp.rm_test_param)
}
#endif
inline void AcpcEnterRoomResp::set_rm_test_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcEnterRoomResp.rm_test_param)
}
inline void AcpcEnterRoomResp::set_rm_test_param(const char* value, size_t size) {
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcEnterRoomResp.rm_test_param)
}
inline ::std::string* AcpcEnterRoomResp::mutable_rm_test_param() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomResp.rm_test_param)
  return rm_test_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcEnterRoomResp::release_rm_test_param() {
  // @@protoc_insertion_point(field_release:Pb.AcpcEnterRoomResp.rm_test_param)
  
  return rm_test_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcEnterRoomResp::set_allocated_rm_test_param(::std::string* rm_test_param) {
  if (rm_test_param != NULL) {
    
  } else {
    
  }
  rm_test_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rm_test_param);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcEnterRoomResp.rm_test_param)
}

// uint32 hand_id = 8;
inline void AcpcEnterRoomResp::clear_hand_id() {
  hand_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomResp::hand_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomResp.hand_id)
  return hand_id_;
}
inline void AcpcEnterRoomResp::set_hand_id(::google::protobuf::uint32 value) {
  
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomResp.hand_id)
}

// -------------------------------------------------------------------

// AcpcEnterRoomBroad

// uint64 room_id = 1;
inline void AcpcEnterRoomBroad::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcEnterRoomBroad::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomBroad.room_id)
  return room_id_;
}
inline void AcpcEnterRoomBroad::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomBroad.room_id)
}

// uint32 role_id = 2;
inline void AcpcEnterRoomBroad::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcEnterRoomBroad::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomBroad.role_id)
  return role_id_;
}
inline void AcpcEnterRoomBroad::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomBroad.role_id)
}

// .Pb.RoleInfo enter_role_info = 3;
inline bool AcpcEnterRoomBroad::has_enter_role_info() const {
  return this != internal_default_instance() && enter_role_info_ != NULL;
}
inline const ::Pb::RoleInfo& AcpcEnterRoomBroad::enter_role_info() const {
  const ::Pb::RoleInfo* p = enter_role_info_;
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomBroad.enter_role_info)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::RoleInfo*>(
      &::Pb::_RoleInfo_default_instance_);
}
inline ::Pb::RoleInfo* AcpcEnterRoomBroad::release_enter_role_info() {
  // @@protoc_insertion_point(field_release:Pb.AcpcEnterRoomBroad.enter_role_info)
  
  ::Pb::RoleInfo* temp = enter_role_info_;
  enter_role_info_ = NULL;
  return temp;
}
inline ::Pb::RoleInfo* AcpcEnterRoomBroad::mutable_enter_role_info() {
  
  if (enter_role_info_ == NULL) {
    enter_role_info_ = new ::Pb::RoleInfo;
  }
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomBroad.enter_role_info)
  return enter_role_info_;
}
inline void AcpcEnterRoomBroad::set_allocated_enter_role_info(::Pb::RoleInfo* enter_role_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enter_role_info_);
  }
  if (enter_role_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enter_role_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enter_role_info, submessage_arena);
    }
    
  } else {
    
  }
  enter_role_info_ = enter_role_info;
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcEnterRoomBroad.enter_role_info)
}

// string rm_test_param = 4;
inline void AcpcEnterRoomBroad::clear_rm_test_param() {
  rm_test_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcEnterRoomBroad::rm_test_param() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcEnterRoomBroad.rm_test_param)
  return rm_test_param_.GetNoArena();
}
inline void AcpcEnterRoomBroad::set_rm_test_param(const ::std::string& value) {
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcEnterRoomBroad.rm_test_param)
}
#if LANG_CXX11
inline void AcpcEnterRoomBroad::set_rm_test_param(::std::string&& value) {
  
  rm_test_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcEnterRoomBroad.rm_test_param)
}
#endif
inline void AcpcEnterRoomBroad::set_rm_test_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcEnterRoomBroad.rm_test_param)
}
inline void AcpcEnterRoomBroad::set_rm_test_param(const char* value, size_t size) {
  
  rm_test_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcEnterRoomBroad.rm_test_param)
}
inline ::std::string* AcpcEnterRoomBroad::mutable_rm_test_param() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcEnterRoomBroad.rm_test_param)
  return rm_test_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcEnterRoomBroad::release_rm_test_param() {
  // @@protoc_insertion_point(field_release:Pb.AcpcEnterRoomBroad.rm_test_param)
  
  return rm_test_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcEnterRoomBroad::set_allocated_rm_test_param(::std::string* rm_test_param) {
  if (rm_test_param != NULL) {
    
  } else {
    
  }
  rm_test_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rm_test_param);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcEnterRoomBroad.rm_test_param)
}

// -------------------------------------------------------------------

// AcpcLeaveRoomReq

// uint32 role_id = 1;
inline void AcpcLeaveRoomReq::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcLeaveRoomReq::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomReq.role_id)
  return role_id_;
}
inline void AcpcLeaveRoomReq::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomReq.role_id)
}

// uint64 room_id = 2;
inline void AcpcLeaveRoomReq::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcLeaveRoomReq::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomReq.room_id)
  return room_id_;
}
inline void AcpcLeaveRoomReq::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomReq.room_id)
}

// -------------------------------------------------------------------

// AcpcLeaveRoomResp

// uint32 role_id = 1;
inline void AcpcLeaveRoomResp::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcLeaveRoomResp::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomResp.role_id)
  return role_id_;
}
inline void AcpcLeaveRoomResp::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomResp.role_id)
}

// uint64 room_id = 2;
inline void AcpcLeaveRoomResp::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcLeaveRoomResp::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomResp.room_id)
  return room_id_;
}
inline void AcpcLeaveRoomResp::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomResp.room_id)
}

// uint32 reason = 3;
inline void AcpcLeaveRoomResp::clear_reason() {
  reason_ = 0u;
}
inline ::google::protobuf::uint32 AcpcLeaveRoomResp::reason() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomResp.reason)
  return reason_;
}
inline void AcpcLeaveRoomResp::set_reason(::google::protobuf::uint32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomResp.reason)
}

// -------------------------------------------------------------------

// AcpcLeaveRoomBroad

// uint32 role_id = 1;
inline void AcpcLeaveRoomBroad::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcLeaveRoomBroad::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomBroad.role_id)
  return role_id_;
}
inline void AcpcLeaveRoomBroad::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomBroad.role_id)
}

// uint64 room_id = 2;
inline void AcpcLeaveRoomBroad::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcLeaveRoomBroad::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomBroad.room_id)
  return room_id_;
}
inline void AcpcLeaveRoomBroad::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomBroad.room_id)
}

// uint32 leave_role_id = 3;
inline void AcpcLeaveRoomBroad::clear_leave_role_id() {
  leave_role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcLeaveRoomBroad::leave_role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcLeaveRoomBroad.leave_role_id)
  return leave_role_id_;
}
inline void AcpcLeaveRoomBroad::set_leave_role_id(::google::protobuf::uint32 value) {
  
  leave_role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcLeaveRoomBroad.leave_role_id)
}

// -------------------------------------------------------------------

// AcpcQueryCanJoinRoom

// repeated .Pb.RoomCanJoin room_list = 1;
inline int AcpcQueryCanJoinRoom::room_list_size() const {
  return room_list_.size();
}
inline const ::Pb::RoomCanJoin& AcpcQueryCanJoinRoom::room_list(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcQueryCanJoinRoom.room_list)
  return room_list_.Get(index);
}
inline ::Pb::RoomCanJoin* AcpcQueryCanJoinRoom::mutable_room_list(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcQueryCanJoinRoom.room_list)
  return room_list_.Mutable(index);
}
inline ::Pb::RoomCanJoin* AcpcQueryCanJoinRoom::add_room_list() {
  // @@protoc_insertion_point(field_add:Pb.AcpcQueryCanJoinRoom.room_list)
  return room_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoomCanJoin >*
AcpcQueryCanJoinRoom::mutable_room_list() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcQueryCanJoinRoom.room_list)
  return &room_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoomCanJoin >&
AcpcQueryCanJoinRoom::room_list() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcQueryCanJoinRoom.room_list)
  return room_list_;
}

// -------------------------------------------------------------------

// AcpcReadyReq

// uint32 role_id = 1;
inline void AcpcReadyReq::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcReadyReq::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyReq.role_id)
  return role_id_;
}
inline void AcpcReadyReq::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyReq.role_id)
}

// uint64 room_id = 2;
inline void AcpcReadyReq::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcReadyReq::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyReq.room_id)
  return room_id_;
}
inline void AcpcReadyReq::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyReq.room_id)
}

// string cfr_model = 3;
inline void AcpcReadyReq::clear_cfr_model() {
  cfr_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcReadyReq::cfr_model() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyReq.cfr_model)
  return cfr_model_.GetNoArena();
}
inline void AcpcReadyReq::set_cfr_model(const ::std::string& value) {
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyReq.cfr_model)
}
#if LANG_CXX11
inline void AcpcReadyReq::set_cfr_model(::std::string&& value) {
  
  cfr_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcReadyReq.cfr_model)
}
#endif
inline void AcpcReadyReq::set_cfr_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcReadyReq.cfr_model)
}
inline void AcpcReadyReq::set_cfr_model(const char* value, size_t size) {
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcReadyReq.cfr_model)
}
inline ::std::string* AcpcReadyReq::mutable_cfr_model() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcReadyReq.cfr_model)
  return cfr_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcReadyReq::release_cfr_model() {
  // @@protoc_insertion_point(field_release:Pb.AcpcReadyReq.cfr_model)
  
  return cfr_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcReadyReq::set_allocated_cfr_model(::std::string* cfr_model) {
  if (cfr_model != NULL) {
    
  } else {
    
  }
  cfr_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfr_model);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcReadyReq.cfr_model)
}

// uint32 dealer_mode = 4;
inline void AcpcReadyReq::clear_dealer_mode() {
  dealer_mode_ = 0u;
}
inline ::google::protobuf::uint32 AcpcReadyReq::dealer_mode() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyReq.dealer_mode)
  return dealer_mode_;
}
inline void AcpcReadyReq::set_dealer_mode(::google::protobuf::uint32 value) {
  
  dealer_mode_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyReq.dealer_mode)
}

// -------------------------------------------------------------------

// AcpcReadyResp

// uint32 role_id = 1;
inline void AcpcReadyResp::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcReadyResp::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyResp.role_id)
  return role_id_;
}
inline void AcpcReadyResp::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyResp.role_id)
}

// uint32 dealer_mode = 2;
inline void AcpcReadyResp::clear_dealer_mode() {
  dealer_mode_ = 0u;
}
inline ::google::protobuf::uint32 AcpcReadyResp::dealer_mode() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyResp.dealer_mode)
  return dealer_mode_;
}
inline void AcpcReadyResp::set_dealer_mode(::google::protobuf::uint32 value) {
  
  dealer_mode_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyResp.dealer_mode)
}

// uint64 room_id = 3;
inline void AcpcReadyResp::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcReadyResp::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyResp.room_id)
  return room_id_;
}
inline void AcpcReadyResp::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyResp.room_id)
}

// -------------------------------------------------------------------

// AcpcReadyBroad

// uint32 role_id = 1;
inline void AcpcReadyBroad::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcReadyBroad::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyBroad.role_id)
  return role_id_;
}
inline void AcpcReadyBroad::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyBroad.role_id)
}

// uint32 ready_role_id = 2;
inline void AcpcReadyBroad::clear_ready_role_id() {
  ready_role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcReadyBroad::ready_role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyBroad.ready_role_id)
  return ready_role_id_;
}
inline void AcpcReadyBroad::set_ready_role_id(::google::protobuf::uint32 value) {
  
  ready_role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyBroad.ready_role_id)
}

// uint64 room_id = 3;
inline void AcpcReadyBroad::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcReadyBroad::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcReadyBroad.room_id)
  return room_id_;
}
inline void AcpcReadyBroad::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcReadyBroad.room_id)
}

// -------------------------------------------------------------------

// AcpcMatchStart

// uint64 room_id = 1;
inline void AcpcMatchStart::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcMatchStart::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchStart.room_id)
  return room_id_;
}
inline void AcpcMatchStart::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchStart.room_id)
}

// uint32 role_id = 2;
inline void AcpcMatchStart::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcMatchStart::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchStart.role_id)
  return role_id_;
}
inline void AcpcMatchStart::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchStart.role_id)
}

// uint32 hand_id = 3;
inline void AcpcMatchStart::clear_hand_id() {
  hand_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcMatchStart::hand_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchStart.hand_id)
  return hand_id_;
}
inline void AcpcMatchStart::set_hand_id(::google::protobuf::uint32 value) {
  
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchStart.hand_id)
}

// -------------------------------------------------------------------

// AcpcRoleAction

// uint32 role_id = 1;
inline void AcpcRoleAction::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoleAction::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoleAction.role_id)
  return role_id_;
}
inline void AcpcRoleAction::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoleAction.role_id)
}

// uint32 action = 2;
inline void AcpcRoleAction::clear_action() {
  action_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoleAction::action() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoleAction.action)
  return action_;
}
inline void AcpcRoleAction::set_action(::google::protobuf::uint32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoleAction.action)
}

// uint32 size = 3;
inline void AcpcRoleAction::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 AcpcRoleAction::size() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoleAction.size)
  return size_;
}
inline void AcpcRoleAction::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoleAction.size)
}

// string action_rate = 4;
inline void AcpcRoleAction::clear_action_rate() {
  action_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoleAction::action_rate() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoleAction.action_rate)
  return action_rate_.GetNoArena();
}
inline void AcpcRoleAction::set_action_rate(const ::std::string& value) {
  
  action_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoleAction.action_rate)
}
#if LANG_CXX11
inline void AcpcRoleAction::set_action_rate(::std::string&& value) {
  
  action_rate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoleAction.action_rate)
}
#endif
inline void AcpcRoleAction::set_action_rate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoleAction.action_rate)
}
inline void AcpcRoleAction::set_action_rate(const char* value, size_t size) {
  
  action_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoleAction.action_rate)
}
inline ::std::string* AcpcRoleAction::mutable_action_rate() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoleAction.action_rate)
  return action_rate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoleAction::release_action_rate() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoleAction.action_rate)
  
  return action_rate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoleAction::set_allocated_action_rate(::std::string* action_rate) {
  if (action_rate != NULL) {
    
  } else {
    
  }
  action_rate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_rate);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoleAction.action_rate)
}

// uint64 room_id = 5;
inline void AcpcRoleAction::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcRoleAction::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoleAction.room_id)
  return room_id_;
}
inline void AcpcRoleAction::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcRoleAction.room_id)
}

// string robot_cfr_model_param = 6;
inline void AcpcRoleAction::clear_robot_cfr_model_param() {
  robot_cfr_model_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcRoleAction::robot_cfr_model_param() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcRoleAction.robot_cfr_model_param)
  return robot_cfr_model_param_.GetNoArena();
}
inline void AcpcRoleAction::set_robot_cfr_model_param(const ::std::string& value) {
  
  robot_cfr_model_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcRoleAction.robot_cfr_model_param)
}
#if LANG_CXX11
inline void AcpcRoleAction::set_robot_cfr_model_param(::std::string&& value) {
  
  robot_cfr_model_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcRoleAction.robot_cfr_model_param)
}
#endif
inline void AcpcRoleAction::set_robot_cfr_model_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_cfr_model_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcRoleAction.robot_cfr_model_param)
}
inline void AcpcRoleAction::set_robot_cfr_model_param(const char* value, size_t size) {
  
  robot_cfr_model_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcRoleAction.robot_cfr_model_param)
}
inline ::std::string* AcpcRoleAction::mutable_robot_cfr_model_param() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcRoleAction.robot_cfr_model_param)
  return robot_cfr_model_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcRoleAction::release_robot_cfr_model_param() {
  // @@protoc_insertion_point(field_release:Pb.AcpcRoleAction.robot_cfr_model_param)
  
  return robot_cfr_model_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcRoleAction::set_allocated_robot_cfr_model_param(::std::string* robot_cfr_model_param) {
  if (robot_cfr_model_param != NULL) {
    
  } else {
    
  }
  robot_cfr_model_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_cfr_model_param);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcRoleAction.robot_cfr_model_param)
}

// -------------------------------------------------------------------

// AcpcBroadRoleAction

// uint32 role_id = 1;
inline void AcpcBroadRoleAction::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcBroadRoleAction::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcBroadRoleAction.role_id)
  return role_id_;
}
inline void AcpcBroadRoleAction::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcBroadRoleAction.role_id)
}

// uint32 action_role_id = 2;
inline void AcpcBroadRoleAction::clear_action_role_id() {
  action_role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcBroadRoleAction::action_role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcBroadRoleAction.action_role_id)
  return action_role_id_;
}
inline void AcpcBroadRoleAction::set_action_role_id(::google::protobuf::uint32 value) {
  
  action_role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcBroadRoleAction.action_role_id)
}

// uint32 action = 3;
inline void AcpcBroadRoleAction::clear_action() {
  action_ = 0u;
}
inline ::google::protobuf::uint32 AcpcBroadRoleAction::action() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcBroadRoleAction.action)
  return action_;
}
inline void AcpcBroadRoleAction::set_action(::google::protobuf::uint32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcBroadRoleAction.action)
}

// uint32 size = 4;
inline void AcpcBroadRoleAction::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 AcpcBroadRoleAction::size() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcBroadRoleAction.size)
  return size_;
}
inline void AcpcBroadRoleAction::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcBroadRoleAction.size)
}

// uint64 room_id = 5;
inline void AcpcBroadRoleAction::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcBroadRoleAction::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcBroadRoleAction.room_id)
  return room_id_;
}
inline void AcpcBroadRoleAction::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcBroadRoleAction.room_id)
}

// -------------------------------------------------------------------

// AcpcMatchState

// uint64 room_id = 1;
inline void AcpcMatchState::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcMatchState::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.room_id)
  return room_id_;
}
inline void AcpcMatchState::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchState.room_id)
}

// uint32 role_id = 2;
inline void AcpcMatchState::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcMatchState::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.role_id)
  return role_id_;
}
inline void AcpcMatchState::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchState.role_id)
}

// .Pb.AcpcState state = 3;
inline bool AcpcMatchState::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline const ::Pb::AcpcState& AcpcMatchState::state() const {
  const ::Pb::AcpcState* p = state_;
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.state)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::AcpcState*>(
      &::Pb::_AcpcState_default_instance_);
}
inline ::Pb::AcpcState* AcpcMatchState::release_state() {
  // @@protoc_insertion_point(field_release:Pb.AcpcMatchState.state)
  
  ::Pb::AcpcState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::Pb::AcpcState* AcpcMatchState::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::Pb::AcpcState;
  }
  // @@protoc_insertion_point(field_mutable:Pb.AcpcMatchState.state)
  return state_;
}
inline void AcpcMatchState::set_allocated_state(::Pb::AcpcState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcMatchState.state)
}

// .Pb.AcpcRoleAction robot_action = 4;
inline bool AcpcMatchState::has_robot_action() const {
  return this != internal_default_instance() && robot_action_ != NULL;
}
inline void AcpcMatchState::clear_robot_action() {
  if (GetArenaNoVirtual() == NULL && robot_action_ != NULL) {
    delete robot_action_;
  }
  robot_action_ = NULL;
}
inline const ::Pb::AcpcRoleAction& AcpcMatchState::robot_action() const {
  const ::Pb::AcpcRoleAction* p = robot_action_;
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.robot_action)
  return p != NULL ? *p : *reinterpret_cast<const ::Pb::AcpcRoleAction*>(
      &::Pb::_AcpcRoleAction_default_instance_);
}
inline ::Pb::AcpcRoleAction* AcpcMatchState::release_robot_action() {
  // @@protoc_insertion_point(field_release:Pb.AcpcMatchState.robot_action)
  
  ::Pb::AcpcRoleAction* temp = robot_action_;
  robot_action_ = NULL;
  return temp;
}
inline ::Pb::AcpcRoleAction* AcpcMatchState::mutable_robot_action() {
  
  if (robot_action_ == NULL) {
    robot_action_ = new ::Pb::AcpcRoleAction;
  }
  // @@protoc_insertion_point(field_mutable:Pb.AcpcMatchState.robot_action)
  return robot_action_;
}
inline void AcpcMatchState::set_allocated_robot_action(::Pb::AcpcRoleAction* robot_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete robot_action_;
  }
  if (robot_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot_action, submessage_arena);
    }
    
  } else {
    
  }
  robot_action_ = robot_action;
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcMatchState.robot_action)
}

// string cfr_model = 5;
inline void AcpcMatchState::clear_cfr_model() {
  cfr_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcMatchState::cfr_model() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.cfr_model)
  return cfr_model_.GetNoArena();
}
inline void AcpcMatchState::set_cfr_model(const ::std::string& value) {
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchState.cfr_model)
}
#if LANG_CXX11
inline void AcpcMatchState::set_cfr_model(::std::string&& value) {
  
  cfr_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcMatchState.cfr_model)
}
#endif
inline void AcpcMatchState::set_cfr_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcMatchState.cfr_model)
}
inline void AcpcMatchState::set_cfr_model(const char* value, size_t size) {
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcMatchState.cfr_model)
}
inline ::std::string* AcpcMatchState::mutable_cfr_model() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcMatchState.cfr_model)
  return cfr_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcMatchState::release_cfr_model() {
  // @@protoc_insertion_point(field_release:Pb.AcpcMatchState.cfr_model)
  
  return cfr_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcMatchState::set_allocated_cfr_model(::std::string* cfr_model) {
  if (cfr_model != NULL) {
    
  } else {
    
  }
  cfr_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfr_model);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcMatchState.cfr_model)
}

// uint32 robot_delay_flag = 6;
inline void AcpcMatchState::clear_robot_delay_flag() {
  robot_delay_flag_ = 0u;
}
inline ::google::protobuf::uint32 AcpcMatchState::robot_delay_flag() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.robot_delay_flag)
  return robot_delay_flag_;
}
inline void AcpcMatchState::set_robot_delay_flag(::google::protobuf::uint32 value) {
  
  robot_delay_flag_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchState.robot_delay_flag)
}

// string robot_cfr_model_param = 7;
inline void AcpcMatchState::clear_robot_cfr_model_param() {
  robot_cfr_model_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcMatchState::robot_cfr_model_param() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchState.robot_cfr_model_param)
  return robot_cfr_model_param_.GetNoArena();
}
inline void AcpcMatchState::set_robot_cfr_model_param(const ::std::string& value) {
  
  robot_cfr_model_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchState.robot_cfr_model_param)
}
#if LANG_CXX11
inline void AcpcMatchState::set_robot_cfr_model_param(::std::string&& value) {
  
  robot_cfr_model_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcMatchState.robot_cfr_model_param)
}
#endif
inline void AcpcMatchState::set_robot_cfr_model_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_cfr_model_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcMatchState.robot_cfr_model_param)
}
inline void AcpcMatchState::set_robot_cfr_model_param(const char* value, size_t size) {
  
  robot_cfr_model_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcMatchState.robot_cfr_model_param)
}
inline ::std::string* AcpcMatchState::mutable_robot_cfr_model_param() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcMatchState.robot_cfr_model_param)
  return robot_cfr_model_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcMatchState::release_robot_cfr_model_param() {
  // @@protoc_insertion_point(field_release:Pb.AcpcMatchState.robot_cfr_model_param)
  
  return robot_cfr_model_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcMatchState::set_allocated_robot_cfr_model_param(::std::string* robot_cfr_model_param) {
  if (robot_cfr_model_param != NULL) {
    
  } else {
    
  }
  robot_cfr_model_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_cfr_model_param);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcMatchState.robot_cfr_model_param)
}

// -------------------------------------------------------------------

// AcpcMatchScore

// uint64 room_id = 1;
inline void AcpcMatchScore::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcpcMatchScore::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchScore.room_id)
  return room_id_;
}
inline void AcpcMatchScore::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchScore.room_id)
}

// uint32 role_id = 2;
inline void AcpcMatchScore::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 AcpcMatchScore::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchScore.role_id)
  return role_id_;
}
inline void AcpcMatchScore::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcMatchScore.role_id)
}

// repeated .Pb.RoleScore role_scores = 3;
inline int AcpcMatchScore::role_scores_size() const {
  return role_scores_.size();
}
inline const ::Pb::RoleScore& AcpcMatchScore::role_scores(int index) const {
  // @@protoc_insertion_point(field_get:Pb.AcpcMatchScore.role_scores)
  return role_scores_.Get(index);
}
inline ::Pb::RoleScore* AcpcMatchScore::mutable_role_scores(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.AcpcMatchScore.role_scores)
  return role_scores_.Mutable(index);
}
inline ::Pb::RoleScore* AcpcMatchScore::add_role_scores() {
  // @@protoc_insertion_point(field_add:Pb.AcpcMatchScore.role_scores)
  return role_scores_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoleScore >*
AcpcMatchScore::mutable_role_scores() {
  // @@protoc_insertion_point(field_mutable_list:Pb.AcpcMatchScore.role_scores)
  return &role_scores_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoleScore >&
AcpcMatchScore::role_scores() const {
  // @@protoc_insertion_point(field_list:Pb.AcpcMatchScore.role_scores)
  return role_scores_;
}

// -------------------------------------------------------------------

// AcpcForTest

// string password = 1;
inline void AcpcForTest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcpcForTest::password() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcForTest.password)
  return password_.GetNoArena();
}
inline void AcpcForTest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.AcpcForTest.password)
}
#if LANG_CXX11
inline void AcpcForTest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.AcpcForTest.password)
}
#endif
inline void AcpcForTest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.AcpcForTest.password)
}
inline void AcpcForTest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.AcpcForTest.password)
}
inline ::std::string* AcpcForTest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Pb.AcpcForTest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcpcForTest::release_password() {
  // @@protoc_insertion_point(field_release:Pb.AcpcForTest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcpcForTest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Pb.AcpcForTest.password)
}

// uint32 robot_cnt = 2;
inline void AcpcForTest::clear_robot_cnt() {
  robot_cnt_ = 0u;
}
inline ::google::protobuf::uint32 AcpcForTest::robot_cnt() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcForTest.robot_cnt)
  return robot_cnt_;
}
inline void AcpcForTest::set_robot_cnt(::google::protobuf::uint32 value) {
  
  robot_cnt_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcForTest.robot_cnt)
}

// uint32 game_type = 3;
inline void AcpcForTest::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 AcpcForTest::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.AcpcForTest.game_type)
  return game_type_;
}
inline void AcpcForTest::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.AcpcForTest.game_type)
}

// -------------------------------------------------------------------

// CheckRoomTimeout

// uint64 room_id = 1;
inline void CheckRoomTimeout::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CheckRoomTimeout::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.CheckRoomTimeout.room_id)
  return room_id_;
}
inline void CheckRoomTimeout::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.CheckRoomTimeout.room_id)
}

// -------------------------------------------------------------------

// SetDealerMode

// uint64 room_id = 1;
inline void SetDealerMode::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetDealerMode::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.SetDealerMode.room_id)
  return room_id_;
}
inline void SetDealerMode::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.SetDealerMode.room_id)
}

// uint32 role_id = 2;
inline void SetDealerMode::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 SetDealerMode::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.SetDealerMode.role_id)
  return role_id_;
}
inline void SetDealerMode::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.SetDealerMode.role_id)
}

// uint32 dealer_mode = 3;
inline void SetDealerMode::clear_dealer_mode() {
  dealer_mode_ = 0u;
}
inline ::google::protobuf::uint32 SetDealerMode::dealer_mode() const {
  // @@protoc_insertion_point(field_get:Pb.SetDealerMode.dealer_mode)
  return dealer_mode_;
}
inline void SetDealerMode::set_dealer_mode(::google::protobuf::uint32 value) {
  
  dealer_mode_ = value;
  // @@protoc_insertion_point(field_set:Pb.SetDealerMode.dealer_mode)
}

// -------------------------------------------------------------------

// RoleState

// uint32 spent = 1;
inline void RoleState::clear_spent() {
  spent_ = 0u;
}
inline ::google::protobuf::uint32 RoleState::spent() const {
  // @@protoc_insertion_point(field_get:Pb.RoleState.spent)
  return spent_;
}
inline void RoleState::set_spent(::google::protobuf::uint32 value) {
  
  spent_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleState.spent)
}

// uint32 fold = 2;
inline void RoleState::clear_fold() {
  fold_ = 0u;
}
inline ::google::protobuf::uint32 RoleState::fold() const {
  // @@protoc_insertion_point(field_get:Pb.RoleState.fold)
  return fold_;
}
inline void RoleState::set_fold(::google::protobuf::uint32 value) {
  
  fold_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleState.fold)
}

// repeated .Pb.AcpcCard hole_cards = 3;
inline int RoleState::hole_cards_size() const {
  return hole_cards_.size();
}
inline const ::Pb::AcpcCard& RoleState::hole_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RoleState.hole_cards)
  return hole_cards_.Get(index);
}
inline ::Pb::AcpcCard* RoleState::mutable_hole_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RoleState.hole_cards)
  return hole_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* RoleState::add_hole_cards() {
  // @@protoc_insertion_point(field_add:Pb.RoleState.hole_cards)
  return hole_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
RoleState::mutable_hole_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RoleState.hole_cards)
  return &hole_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
RoleState::hole_cards() const {
  // @@protoc_insertion_point(field_list:Pb.RoleState.hole_cards)
  return hole_cards_;
}

// int32 Score = 4;
inline void RoleState::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 RoleState::score() const {
  // @@protoc_insertion_point(field_get:Pb.RoleState.Score)
  return score_;
}
inline void RoleState::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleState.Score)
}

// int32 turn = 5;
inline void RoleState::clear_turn() {
  turn_ = 0;
}
inline ::google::protobuf::int32 RoleState::turn() const {
  // @@protoc_insertion_point(field_get:Pb.RoleState.turn)
  return turn_;
}
inline void RoleState::set_turn(::google::protobuf::int32 value) {
  
  turn_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleState.turn)
}

// -------------------------------------------------------------------

// RoleAction

// uint32 seat = 1;
inline void RoleAction::clear_seat() {
  seat_ = 0u;
}
inline ::google::protobuf::uint32 RoleAction::seat() const {
  // @@protoc_insertion_point(field_get:Pb.RoleAction.seat)
  return seat_;
}
inline void RoleAction::set_seat(::google::protobuf::uint32 value) {
  
  seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleAction.seat)
}

// uint32 round = 2;
inline void RoleAction::clear_round() {
  round_ = 0u;
}
inline ::google::protobuf::uint32 RoleAction::round() const {
  // @@protoc_insertion_point(field_get:Pb.RoleAction.round)
  return round_;
}
inline void RoleAction::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleAction.round)
}

// uint32 type = 3;
inline void RoleAction::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 RoleAction::type() const {
  // @@protoc_insertion_point(field_get:Pb.RoleAction.type)
  return type_;
}
inline void RoleAction::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleAction.type)
}

// int32 size = 4;
inline void RoleAction::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 RoleAction::size() const {
  // @@protoc_insertion_point(field_get:Pb.RoleAction.size)
  return size_;
}
inline void RoleAction::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Pb.RoleAction.size)
}

// -------------------------------------------------------------------

// QueryMatchStateReq

// uint32 role_id = 1;
inline void QueryMatchStateReq::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateReq::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateReq.role_id)
  return role_id_;
}
inline void QueryMatchStateReq::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateReq.role_id)
}

// -------------------------------------------------------------------

// QueryMatchStateResp

// uint64 room_id = 1;
inline void QueryMatchStateResp::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QueryMatchStateResp::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.room_id)
  return room_id_;
}
inline void QueryMatchStateResp::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.room_id)
}

// uint32 dealer_role_id = 2;
inline void QueryMatchStateResp::clear_dealer_role_id() {
  dealer_role_id_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateResp::dealer_role_id() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.dealer_role_id)
  return dealer_role_id_;
}
inline void QueryMatchStateResp::set_dealer_role_id(::google::protobuf::uint32 value) {
  
  dealer_role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.dealer_role_id)
}

// uint32 role_id = 3;
inline void QueryMatchStateResp::clear_role_id() {
  role_id_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateResp::role_id() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.role_id)
  return role_id_;
}
inline void QueryMatchStateResp::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.role_id)
}

// uint32 hand_id = 4;
inline void QueryMatchStateResp::clear_hand_id() {
  hand_id_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateResp::hand_id() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.hand_id)
  return hand_id_;
}
inline void QueryMatchStateResp::set_hand_id(::google::protobuf::uint32 value) {
  
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.hand_id)
}

// uint32 round = 5;
inline void QueryMatchStateResp::clear_round() {
  round_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateResp::round() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.round)
  return round_;
}
inline void QueryMatchStateResp::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.round)
}

// uint32 finished = 6;
inline void QueryMatchStateResp::clear_finished() {
  finished_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateResp::finished() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.finished)
  return finished_;
}
inline void QueryMatchStateResp::set_finished(::google::protobuf::uint32 value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.finished)
}

// uint32 max_spent = 7;
inline void QueryMatchStateResp::clear_max_spent() {
  max_spent_ = 0u;
}
inline ::google::protobuf::uint32 QueryMatchStateResp::max_spent() const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.max_spent)
  return max_spent_;
}
inline void QueryMatchStateResp::set_max_spent(::google::protobuf::uint32 value) {
  
  max_spent_ = value;
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.max_spent)
}

// repeated .Pb.AcpcCard board_cards = 8;
inline int QueryMatchStateResp::board_cards_size() const {
  return board_cards_.size();
}
inline const ::Pb::AcpcCard& QueryMatchStateResp::board_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.board_cards)
  return board_cards_.Get(index);
}
inline ::Pb::AcpcCard* QueryMatchStateResp::mutable_board_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.QueryMatchStateResp.board_cards)
  return board_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* QueryMatchStateResp::add_board_cards() {
  // @@protoc_insertion_point(field_add:Pb.QueryMatchStateResp.board_cards)
  return board_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
QueryMatchStateResp::mutable_board_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.QueryMatchStateResp.board_cards)
  return &board_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
QueryMatchStateResp::board_cards() const {
  // @@protoc_insertion_point(field_list:Pb.QueryMatchStateResp.board_cards)
  return board_cards_;
}

// repeated uint32 allow_raise = 9;
inline int QueryMatchStateResp::allow_raise_size() const {
  return allow_raise_.size();
}
inline void QueryMatchStateResp::clear_allow_raise() {
  allow_raise_.Clear();
}
inline ::google::protobuf::uint32 QueryMatchStateResp::allow_raise(int index) const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.allow_raise)
  return allow_raise_.Get(index);
}
inline void QueryMatchStateResp::set_allow_raise(int index, ::google::protobuf::uint32 value) {
  allow_raise_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.QueryMatchStateResp.allow_raise)
}
inline void QueryMatchStateResp::add_allow_raise(::google::protobuf::uint32 value) {
  allow_raise_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.QueryMatchStateResp.allow_raise)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryMatchStateResp::allow_raise() const {
  // @@protoc_insertion_point(field_list:Pb.QueryMatchStateResp.allow_raise)
  return allow_raise_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryMatchStateResp::mutable_allow_raise() {
  // @@protoc_insertion_point(field_mutable_list:Pb.QueryMatchStateResp.allow_raise)
  return &allow_raise_;
}

// repeated .Pb.RoleState role_state = 10;
inline int QueryMatchStateResp::role_state_size() const {
  return role_state_.size();
}
inline void QueryMatchStateResp::clear_role_state() {
  role_state_.Clear();
}
inline const ::Pb::RoleState& QueryMatchStateResp::role_state(int index) const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.role_state)
  return role_state_.Get(index);
}
inline ::Pb::RoleState* QueryMatchStateResp::mutable_role_state(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.QueryMatchStateResp.role_state)
  return role_state_.Mutable(index);
}
inline ::Pb::RoleState* QueryMatchStateResp::add_role_state() {
  // @@protoc_insertion_point(field_add:Pb.QueryMatchStateResp.role_state)
  return role_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoleState >*
QueryMatchStateResp::mutable_role_state() {
  // @@protoc_insertion_point(field_mutable_list:Pb.QueryMatchStateResp.role_state)
  return &role_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoleState >&
QueryMatchStateResp::role_state() const {
  // @@protoc_insertion_point(field_list:Pb.QueryMatchStateResp.role_state)
  return role_state_;
}

// repeated .Pb.RoleAction role_action = 11;
inline int QueryMatchStateResp::role_action_size() const {
  return role_action_.size();
}
inline void QueryMatchStateResp::clear_role_action() {
  role_action_.Clear();
}
inline const ::Pb::RoleAction& QueryMatchStateResp::role_action(int index) const {
  // @@protoc_insertion_point(field_get:Pb.QueryMatchStateResp.role_action)
  return role_action_.Get(index);
}
inline ::Pb::RoleAction* QueryMatchStateResp::mutable_role_action(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.QueryMatchStateResp.role_action)
  return role_action_.Mutable(index);
}
inline ::Pb::RoleAction* QueryMatchStateResp::add_role_action() {
  // @@protoc_insertion_point(field_add:Pb.QueryMatchStateResp.role_action)
  return role_action_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoleAction >*
QueryMatchStateResp::mutable_role_action() {
  // @@protoc_insertion_point(field_mutable_list:Pb.QueryMatchStateResp.role_action)
  return &role_action_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoleAction >&
QueryMatchStateResp::role_action() const {
  // @@protoc_insertion_point(field_list:Pb.QueryMatchStateResp.role_action)
  return role_action_;
}

// -------------------------------------------------------------------

// RedisRoomBase

// uint64 room_id = 1;
inline void RedisRoomBase::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RedisRoomBase::room_id() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.room_id)
  return room_id_;
}
inline void RedisRoomBase::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.room_id)
}

// uint32 game_type = 2;
inline void RedisRoomBase::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomBase::game_type() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.game_type)
  return game_type_;
}
inline void RedisRoomBase::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.game_type)
}

// string robot_param = 3;
inline void RedisRoomBase::clear_robot_param() {
  robot_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedisRoomBase::robot_param() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.robot_param)
  return robot_param_.GetNoArena();
}
inline void RedisRoomBase::set_robot_param(const ::std::string& value) {
  
  robot_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.robot_param)
}
#if LANG_CXX11
inline void RedisRoomBase::set_robot_param(::std::string&& value) {
  
  robot_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RedisRoomBase.robot_param)
}
#endif
inline void RedisRoomBase::set_robot_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RedisRoomBase.robot_param)
}
inline void RedisRoomBase::set_robot_param(const char* value, size_t size) {
  
  robot_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RedisRoomBase.robot_param)
}
inline ::std::string* RedisRoomBase::mutable_robot_param() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomBase.robot_param)
  return robot_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisRoomBase::release_robot_param() {
  // @@protoc_insertion_point(field_release:Pb.RedisRoomBase.robot_param)
  
  return robot_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisRoomBase::set_allocated_robot_param(::std::string* robot_param) {
  if (robot_param != NULL) {
    
  } else {
    
  }
  robot_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_param);
  // @@protoc_insertion_point(field_set_allocated:Pb.RedisRoomBase.robot_param)
}

// string sophia_name = 4;
inline void RedisRoomBase::clear_sophia_name() {
  sophia_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedisRoomBase::sophia_name() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.sophia_name)
  return sophia_name_.GetNoArena();
}
inline void RedisRoomBase::set_sophia_name(const ::std::string& value) {
  
  sophia_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.sophia_name)
}
#if LANG_CXX11
inline void RedisRoomBase::set_sophia_name(::std::string&& value) {
  
  sophia_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RedisRoomBase.sophia_name)
}
#endif
inline void RedisRoomBase::set_sophia_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sophia_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RedisRoomBase.sophia_name)
}
inline void RedisRoomBase::set_sophia_name(const char* value, size_t size) {
  
  sophia_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RedisRoomBase.sophia_name)
}
inline ::std::string* RedisRoomBase::mutable_sophia_name() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomBase.sophia_name)
  return sophia_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisRoomBase::release_sophia_name() {
  // @@protoc_insertion_point(field_release:Pb.RedisRoomBase.sophia_name)
  
  return sophia_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisRoomBase::set_allocated_sophia_name(::std::string* sophia_name) {
  if (sophia_name != NULL) {
    
  } else {
    
  }
  sophia_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sophia_name);
  // @@protoc_insertion_point(field_set_allocated:Pb.RedisRoomBase.sophia_name)
}

// uint32 dealer_mode = 5;
inline void RedisRoomBase::clear_dealer_mode() {
  dealer_mode_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomBase::dealer_mode() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.dealer_mode)
  return dealer_mode_;
}
inline void RedisRoomBase::set_dealer_mode(::google::protobuf::uint32 value) {
  
  dealer_mode_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.dealer_mode)
}

// uint32 alloc_seat = 6;
inline void RedisRoomBase::clear_alloc_seat() {
  alloc_seat_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomBase::alloc_seat() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.alloc_seat)
  return alloc_seat_;
}
inline void RedisRoomBase::set_alloc_seat(::google::protobuf::uint32 value) {
  
  alloc_seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.alloc_seat)
}

// uint32 expire_time = 7;
inline void RedisRoomBase::clear_expire_time() {
  expire_time_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomBase::expire_time() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomBase.expire_time)
  return expire_time_;
}
inline void RedisRoomBase::set_expire_time(::google::protobuf::uint32 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomBase.expire_time)
}

// -------------------------------------------------------------------

// RedisRoomAction

// int32 hand_id = 1;
inline void RedisRoomAction::clear_hand_id() {
  hand_id_ = 0;
}
inline ::google::protobuf::int32 RedisRoomAction::hand_id() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.hand_id)
  return hand_id_;
}
inline void RedisRoomAction::set_hand_id(::google::protobuf::int32 value) {
  
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.hand_id)
}

// int32 max_spent = 2;
inline void RedisRoomAction::clear_max_spent() {
  max_spent_ = 0;
}
inline ::google::protobuf::int32 RedisRoomAction::max_spent() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.max_spent)
  return max_spent_;
}
inline void RedisRoomAction::set_max_spent(::google::protobuf::int32 value) {
  
  max_spent_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.max_spent)
}

// int32 min_nolimit_raise_to = 3;
inline void RedisRoomAction::clear_min_nolimit_raise_to() {
  min_nolimit_raise_to_ = 0;
}
inline ::google::protobuf::int32 RedisRoomAction::min_nolimit_raise_to() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.min_nolimit_raise_to)
  return min_nolimit_raise_to_;
}
inline void RedisRoomAction::set_min_nolimit_raise_to(::google::protobuf::int32 value) {
  
  min_nolimit_raise_to_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.min_nolimit_raise_to)
}

// repeated int32 spent = 4;
inline int RedisRoomAction::spent_size() const {
  return spent_.size();
}
inline void RedisRoomAction::clear_spent() {
  spent_.Clear();
}
inline ::google::protobuf::int32 RedisRoomAction::spent(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.spent)
  return spent_.Get(index);
}
inline void RedisRoomAction::set_spent(int index, ::google::protobuf::int32 value) {
  spent_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.spent)
}
inline void RedisRoomAction::add_spent(::google::protobuf::int32 value) {
  spent_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.RedisRoomAction.spent)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RedisRoomAction::spent() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomAction.spent)
  return spent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RedisRoomAction::mutable_spent() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomAction.spent)
  return &spent_;
}

// repeated .Pb.AcpcRound round_actions = 5;
inline int RedisRoomAction::round_actions_size() const {
  return round_actions_.size();
}
inline const ::Pb::AcpcRound& RedisRoomAction::round_actions(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.round_actions)
  return round_actions_.Get(index);
}
inline ::Pb::AcpcRound* RedisRoomAction::mutable_round_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomAction.round_actions)
  return round_actions_.Mutable(index);
}
inline ::Pb::AcpcRound* RedisRoomAction::add_round_actions() {
  // @@protoc_insertion_point(field_add:Pb.RedisRoomAction.round_actions)
  return round_actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >*
RedisRoomAction::mutable_round_actions() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomAction.round_actions)
  return &round_actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcRound >&
RedisRoomAction::round_actions() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomAction.round_actions)
  return round_actions_;
}

// int32 round = 6;
inline void RedisRoomAction::clear_round() {
  round_ = 0;
}
inline ::google::protobuf::int32 RedisRoomAction::round() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.round)
  return round_;
}
inline void RedisRoomAction::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.round)
}

// int32 finished = 7;
inline void RedisRoomAction::clear_finished() {
  finished_ = 0;
}
inline ::google::protobuf::int32 RedisRoomAction::finished() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.finished)
  return finished_;
}
inline void RedisRoomAction::set_finished(::google::protobuf::int32 value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.finished)
}

// repeated int32 fold_players = 8;
inline int RedisRoomAction::fold_players_size() const {
  return fold_players_.size();
}
inline void RedisRoomAction::clear_fold_players() {
  fold_players_.Clear();
}
inline ::google::protobuf::int32 RedisRoomAction::fold_players(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.fold_players)
  return fold_players_.Get(index);
}
inline void RedisRoomAction::set_fold_players(int index, ::google::protobuf::int32 value) {
  fold_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.fold_players)
}
inline void RedisRoomAction::add_fold_players(::google::protobuf::int32 value) {
  fold_players_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.RedisRoomAction.fold_players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RedisRoomAction::fold_players() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomAction.fold_players)
  return fold_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RedisRoomAction::mutable_fold_players() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomAction.fold_players)
  return &fold_players_;
}

// repeated .Pb.AcpcCard board_cards = 9;
inline int RedisRoomAction::board_cards_size() const {
  return board_cards_.size();
}
inline const ::Pb::AcpcCard& RedisRoomAction::board_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.board_cards)
  return board_cards_.Get(index);
}
inline ::Pb::AcpcCard* RedisRoomAction::mutable_board_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomAction.board_cards)
  return board_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* RedisRoomAction::add_board_cards() {
  // @@protoc_insertion_point(field_add:Pb.RedisRoomAction.board_cards)
  return board_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
RedisRoomAction::mutable_board_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomAction.board_cards)
  return &board_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
RedisRoomAction::board_cards() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomAction.board_cards)
  return board_cards_;
}

// repeated .Pb.AcpcCard hole_cards = 10;
inline int RedisRoomAction::hole_cards_size() const {
  return hole_cards_.size();
}
inline const ::Pb::AcpcCard& RedisRoomAction::hole_cards(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.hole_cards)
  return hole_cards_.Get(index);
}
inline ::Pb::AcpcCard* RedisRoomAction::mutable_hole_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomAction.hole_cards)
  return hole_cards_.Mutable(index);
}
inline ::Pb::AcpcCard* RedisRoomAction::add_hole_cards() {
  // @@protoc_insertion_point(field_add:Pb.RedisRoomAction.hole_cards)
  return hole_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >*
RedisRoomAction::mutable_hole_cards() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomAction.hole_cards)
  return &hole_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::AcpcCard >&
RedisRoomAction::hole_cards() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomAction.hole_cards)
  return hole_cards_;
}

// repeated int32 round_spent = 11;
inline int RedisRoomAction::round_spent_size() const {
  return round_spent_.size();
}
inline void RedisRoomAction::clear_round_spent() {
  round_spent_.Clear();
}
inline ::google::protobuf::int32 RedisRoomAction::round_spent(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.round_spent)
  return round_spent_.Get(index);
}
inline void RedisRoomAction::set_round_spent(int index, ::google::protobuf::int32 value) {
  round_spent_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.round_spent)
}
inline void RedisRoomAction::add_round_spent(::google::protobuf::int32 value) {
  round_spent_.Add(value);
  // @@protoc_insertion_point(field_add:Pb.RedisRoomAction.round_spent)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RedisRoomAction::round_spent() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomAction.round_spent)
  return round_spent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RedisRoomAction::mutable_round_spent() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomAction.round_spent)
  return &round_spent_;
}

// uint32 dealer_round = 12;
inline void RedisRoomAction::clear_dealer_round() {
  dealer_round_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomAction::dealer_round() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.dealer_round)
  return dealer_round_;
}
inline void RedisRoomAction::set_dealer_round(::google::protobuf::uint32 value) {
  
  dealer_round_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.dealer_round)
}

// uint32 action_time = 13;
inline void RedisRoomAction::clear_action_time() {
  action_time_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomAction::action_time() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.action_time)
  return action_time_;
}
inline void RedisRoomAction::set_action_time(::google::protobuf::uint32 value) {
  
  action_time_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.action_time)
}

// string action_rate = 14;
inline void RedisRoomAction::clear_action_rate() {
  action_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedisRoomAction::action_rate() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.action_rate)
  return action_rate_.GetNoArena();
}
inline void RedisRoomAction::set_action_rate(const ::std::string& value) {
  
  action_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.action_rate)
}
#if LANG_CXX11
inline void RedisRoomAction::set_action_rate(::std::string&& value) {
  
  action_rate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RedisRoomAction.action_rate)
}
#endif
inline void RedisRoomAction::set_action_rate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RedisRoomAction.action_rate)
}
inline void RedisRoomAction::set_action_rate(const char* value, size_t size) {
  
  action_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RedisRoomAction.action_rate)
}
inline ::std::string* RedisRoomAction::mutable_action_rate() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomAction.action_rate)
  return action_rate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisRoomAction::release_action_rate() {
  // @@protoc_insertion_point(field_release:Pb.RedisRoomAction.action_rate)
  
  return action_rate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisRoomAction::set_allocated_action_rate(::std::string* action_rate) {
  if (action_rate != NULL) {
    
  } else {
    
  }
  action_rate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_rate);
  // @@protoc_insertion_point(field_set_allocated:Pb.RedisRoomAction.action_rate)
}

// string report_logs = 15;
inline void RedisRoomAction::clear_report_logs() {
  report_logs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedisRoomAction::report_logs() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomAction.report_logs)
  return report_logs_.GetNoArena();
}
inline void RedisRoomAction::set_report_logs(const ::std::string& value) {
  
  report_logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomAction.report_logs)
}
#if LANG_CXX11
inline void RedisRoomAction::set_report_logs(::std::string&& value) {
  
  report_logs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RedisRoomAction.report_logs)
}
#endif
inline void RedisRoomAction::set_report_logs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  report_logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RedisRoomAction.report_logs)
}
inline void RedisRoomAction::set_report_logs(const char* value, size_t size) {
  
  report_logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RedisRoomAction.report_logs)
}
inline ::std::string* RedisRoomAction::mutable_report_logs() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomAction.report_logs)
  return report_logs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisRoomAction::release_report_logs() {
  // @@protoc_insertion_point(field_release:Pb.RedisRoomAction.report_logs)
  
  return report_logs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisRoomAction::set_allocated_report_logs(::std::string* report_logs) {
  if (report_logs != NULL) {
    
  } else {
    
  }
  report_logs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_logs);
  // @@protoc_insertion_point(field_set_allocated:Pb.RedisRoomAction.report_logs)
}

// -------------------------------------------------------------------

// RedisRoomReady

// repeated .Pb.RoomRole role_info = 1;
inline int RedisRoomReady::role_info_size() const {
  return role_info_.size();
}
inline const ::Pb::RoomRole& RedisRoomReady::role_info(int index) const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomReady.role_info)
  return role_info_.Get(index);
}
inline ::Pb::RoomRole* RedisRoomReady::mutable_role_info(int index) {
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomReady.role_info)
  return role_info_.Mutable(index);
}
inline ::Pb::RoomRole* RedisRoomReady::add_role_info() {
  // @@protoc_insertion_point(field_add:Pb.RedisRoomReady.role_info)
  return role_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >*
RedisRoomReady::mutable_role_info() {
  // @@protoc_insertion_point(field_mutable_list:Pb.RedisRoomReady.role_info)
  return &role_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pb::RoomRole >&
RedisRoomReady::role_info() const {
  // @@protoc_insertion_point(field_list:Pb.RedisRoomReady.role_info)
  return role_info_;
}

// bool is_running = 2;
inline void RedisRoomReady::clear_is_running() {
  is_running_ = false;
}
inline bool RedisRoomReady::is_running() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomReady.is_running)
  return is_running_;
}
inline void RedisRoomReady::set_is_running(bool value) {
  
  is_running_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomReady.is_running)
}

// uint32 game_time = 3;
inline void RedisRoomReady::clear_game_time() {
  game_time_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomReady::game_time() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomReady.game_time)
  return game_time_;
}
inline void RedisRoomReady::set_game_time(::google::protobuf::uint32 value) {
  
  game_time_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomReady.game_time)
}

// uint32 p0seat = 4;
inline void RedisRoomReady::clear_p0seat() {
  p0seat_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomReady::p0seat() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomReady.p0seat)
  return p0seat_;
}
inline void RedisRoomReady::set_p0seat(::google::protobuf::uint32 value) {
  
  p0seat_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomReady.p0seat)
}

// uint32 tcards_index = 5;
inline void RedisRoomReady::clear_tcards_index() {
  tcards_index_ = 0u;
}
inline ::google::protobuf::uint32 RedisRoomReady::tcards_index() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomReady.tcards_index)
  return tcards_index_;
}
inline void RedisRoomReady::set_tcards_index(::google::protobuf::uint32 value) {
  
  tcards_index_ = value;
  // @@protoc_insertion_point(field_set:Pb.RedisRoomReady.tcards_index)
}

// string cfr_model = 6;
inline void RedisRoomReady::clear_cfr_model() {
  cfr_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedisRoomReady::cfr_model() const {
  // @@protoc_insertion_point(field_get:Pb.RedisRoomReady.cfr_model)
  return cfr_model_.GetNoArena();
}
inline void RedisRoomReady::set_cfr_model(const ::std::string& value) {
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pb.RedisRoomReady.cfr_model)
}
#if LANG_CXX11
inline void RedisRoomReady::set_cfr_model(::std::string&& value) {
  
  cfr_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pb.RedisRoomReady.cfr_model)
}
#endif
inline void RedisRoomReady::set_cfr_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pb.RedisRoomReady.cfr_model)
}
inline void RedisRoomReady::set_cfr_model(const char* value, size_t size) {
  
  cfr_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pb.RedisRoomReady.cfr_model)
}
inline ::std::string* RedisRoomReady::mutable_cfr_model() {
  
  // @@protoc_insertion_point(field_mutable:Pb.RedisRoomReady.cfr_model)
  return cfr_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisRoomReady::release_cfr_model() {
  // @@protoc_insertion_point(field_release:Pb.RedisRoomReady.cfr_model)
  
  return cfr_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisRoomReady::set_allocated_cfr_model(::std::string* cfr_model) {
  if (cfr_model != NULL) {
    
  } else {
    
  }
  cfr_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfr_model);
  // @@protoc_insertion_point(field_set_allocated:Pb.RedisRoomReady.cfr_model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_acpc_2eproto__INCLUDED
