/* file   : tpa.proto
*  brief  : 第三方平台接入AI对战的协议描述
*  not    : 各命令字、错误码、业务协议的定义,只能新增,不能修改和删除  
*/

syntax = "proto3";
package Pb;

//命令字
enum TPA_CMD
{
    CMD_TPA_NOT_DEFINE                  = 0;
    CMD_TPA_MIN                         = 90000;     // 最小命令
    CMD_TPA_REGISTER                    = 90001;     // 服务登录验证
    CMD_TPA_KEEP_ALIVE                  = 90002;     // 服务连接心跳
    
    CMD_TPA_ENTER_ROOM                  = 90011;     // 玩家加入房间
    CMD_TPA_AI_ENTER_ROOM               = 90012;     // 机器人加入房间
    CMD_TPA_LEAVE_ROOM                  = 90014;     // 玩家退出房间
    CMD_TPA_DESTROY_ROOM                = 90015;     // 销毁房间通知
    CMD_TPA_SET_PLAYER_STATE            = 90017;     // 设置玩家状态(就绪)
    CMD_TPA_SET_DEALER                  = 90018;     // 设置庄家
    
    CMD_TPA_QUERY_MATCH_CARDS           = 90021;     // 查询游戏扑克信息
    CMD_TPA_QUERY_ALLOW_ACTION          = 90022;     // 查询允许加注信息
    CMD_TPA_QUERY_MATCH_STATE           = 90023;     // 查询游戏状态信息
    CMD_TPA_QUERY_AI_ACTION             = 90024;     // 查询机器人决策
    CMD_TPA_REPORT_ACTION_TOKEN         = 90025;     // 上报决策行动指示 
    CMD_TPA_REPORT_PLAYER_ACTION        = 90026;     // 上报玩家决策结果

    CMD_TPA_MAX                         = 90900;     // 最大命令    
}

//错误码
enum TPA_ERRCODE
{
    TPA_OK                              = 0;          // 成功
    ERR_TPA_AUTH_SERVERID_INVALID       = 229001;     // 非法的ServerID
    ERR_TPA_AUTH_SERVERID_IP            = 229002;     // ServerID和IP不匹配
    ERR_TPA_AUTH_TOKEN                  = 229003;     // Token认证失败
    ERR_TPA_CONN_ID_INVALID             = 229004;     // 无效的链接ID
    
    //错误定义
    ERR_TPA_ENTER_ROOM                  = 229010;     // 玩家加入房间
    ERR_TPA_AI_ENTER_ROOM               = 229020;     // 机器人加入房间
    ERR_TPA_LEAVE_ROOM                  = 229030;     // 玩家退出房间
    ERR_TPA_DESTROY_ROOM                = 229040;     // 销毁房间通知
    ERR_TPA_SET_PLAYER_STATE            = 229050;     // 设置玩家状态(就绪)
    ERR_TPA_SET_DEALER                  = 229060;     // 设置庄家
    
    ERR_TPA_QUERY_MATCH_CARDS           = 229070;     // 查询游戏牌
    ERR_TPA_QUERY_ALLOW_ACTION          = 229080;     // 查询游戏可加注信息
    ERR_TPA_QUERY_MATCH_STATE           = 229090;     // 查询游戏状态
    ERR_TPA_QUERY_AI_ACTION             = 229110;     // 查询机器人决策
    ERR_TPA_REPORT_ACTION_TOKEN         = 229120;     // 上报决策行动指示 
    ERR_TPA_REPORT_PLAYER_ACTION        = 229130;     // 上报玩家决策结果
}

// --------------- start 公共结构体   ---------------------
//玩家信息
message TPAPlayer
{
    uint64 player_id	                = 1;    // 用户标识	
    int32  seat	                        = 2;    // 玩家位置	值范围(0 - [n-1])
    int32  is_ready                     = 3;    // 就绪状态 0:未就绪 1:已就绪
    int32  money                        = 4;    // 筹码
}


//玩家状态
message TPAPlayerState
{
    uint64 player_id	                = 1;    // 用户标识	
    int32  seat                         = 2;    // 玩家位置	值范围(0 - [n-1])
    uint32 spent                        = 3;    // 总下注值
    uint32 fold                         = 4;    // 弃牌标记 0:未弃牌 1:弃牌 
    repeated int32 hole_cards           = 5;    // 私牌 (finished!=1时仅有被通知玩家的私牌为有效值)
}

//玩家动作
message TPAPlayerAction
{
    uint64 player_id	                = 1;    // 用户标识	
    int32  seat                         = 2;    // 玩家位置	值范围(0 - [n-1])
    int32  round                        = 3;    // 所在的轮次
    uint32 type                         = 4;    // 类型 0:弃牌  1:跟注或过牌  2:加注
    int32  size                         = 5;    // 筹码大小
}

//玩家牌信息
message TPAPlayerCards
{
    uint64 player_id	                = 1;    // 用户标识	
    repeated int32 hole_cards           = 2;    // 私牌
}

// ---------------  end 公共结构体    ----------------------
   
//服务注册 -- CMD_TPA_REGISTER
message TpaRegisterReq
{
    string token                        = 1;    // 登录密钥
    uint32 server_id                    = 2;    // 服务ID
}
message TpaRegisterResp
{
    uint32 ai_server_id                 = 1;    // AI服务ID
    uint64 conn_unique_id               = 2;    // 链接唯一ID [链接后续的请求，都需要赋值包头的conn_unique_id字段。否则当做非法请求，关闭链接]
}

//心跳 -- CMD_TPA_KEEP_ALIVE
message TpaKeepAliveReq
{
    uint32 server_id                    = 1;    // 服务ID
    uint32 timestamp                    = 2;    // 上报时间
}

message TpaKeepAliveResp
{
    uint32 ai_server_id                 = 1;    // AI服务ID
}

//玩家加入房间 -- CMD_TPA_ENTER_ROOM
message TpaEnterRoomReq
{
    uint32 room_id                      = 1;    // 房间标识	
    uint32 game_type                    = 2;    // 游戏类型 201:两人桌[松] 202:两人桌[紧]  203:两人桌[凶]  204:两人桌[弱]
    repeated TPAPlayer player_list      = 3;    // 玩家列表
}

message TpaEnterRoomResp
{
    uint32 room_id                      = 1;    // 房间标识	
    uint32 game_type                    = 2;    // 游戏类型 201:两人桌[松] 202:两人桌[紧]  203:两人桌[凶]  204:两人桌[弱]
    repeated TPAPlayer player_list      = 3;    // 玩家列表
}
// --------------------------



//机器人加入房间 CMD_TPA_AI_ENTER_ROOM
message TpaAIEnterRoomReq
{
    uint32 room_id                      = 1;    // 房间标识	
    uint32 game_type                    = 2;    // 游戏类型 201:两人桌[松] 202:两人桌[紧]  203:两人桌[凶]  204:两人桌[弱]
    repeated TPAPlayer player_list      = 3;    // AI的玩家列表
    string constant_token               = 4;    // 透穿参数
}

message TpaAIEnterRoomResp
{
    uint32 room_id                      = 1;    // 房间标识 
    uint32 game_type                    = 2;    // 游戏类型
    repeated TPAPlayer player_list      = 3;    // 玩家列表 (包括机器人和玩家)
    string constant_token               = 4;    // 透穿参数[与请求一致]
}
// --------------------------



//玩家退出房间 -- CMD_TPA_LEAVE_ROOM
message TpaLeaveRoomReq
{
    uint32 room_id                      = 1;    // 房间标识	
    repeated TPAPlayer player_list      = 2;    // 玩家列表
}

message TpaLeaveRoomResp
{
    uint32 room_id                      = 1;    // 房间标识	
    repeated TPAPlayer player_list      = 2;    // 玩家列表	
}
// --------------------------



//销毁房间通知 -- CMD_TPA_DESTROY_ROOM
message TpaNotifyDestroyRoom
{
    uint32 room_id                      = 1;    // 房间标识	
    uint32 reason                       = 2;    // 原因   1:强制退出 2:超时退出 3:机器人异常退出 4:数据异常退出
}
// --------------------------



//设置玩家状态 -- CMD_TPA_SET_PLAYER_STATE
message TpaSetPlayerStateReq
{
    uint32 room_id                      = 1;    // 房间标识	
    repeated TPAPlayer player_list      = 2;    // 玩家列表
}

message TpaSetPlayerStateResp
{
    uint32 room_id                      = 1;    // 房间标识	
    repeated TPAPlayer player_list      = 2;    // 玩家列表
}
// --------------------------



//设置庄家 -- CMD_TPA_SET_DEALER
message TpaSetDealerReq
{
    uint32 room_id                      = 1;    // 房间标识	
    uint64 dealer_player_id             = 2;    // 庄家用户标识	
    int32  dealer_seat                  = 3;    // 庄家位置
}

message TpaSetDealerResp
{
    uint32 room_id                      = 1;    // 房间标识	
    uint64 dealer_player_id             = 2;    // 庄家用户标识
    uint32 hand_id                      = 3;    // 局数ID
    uint32 max_spent                    = 4;    // 局数ID
    repeated TPAPlayerState player_state= 5;    // 所有玩家的状态
}
// --------------------------


//查询游戏扑克信息 -- CMD_TPA_QUERY_MATCH_CARDS
message TpaQueryCardsReq
{
    uint32 room_id                      = 1;    // 房间标识 
    int32  round                        = 2;    // 当前轮数
}

message TpaQueryCardsResp
{
    uint32 room_id                      = 1;    // 房间标识	
    int32  round                        = 2;    // 当前轮 0:preflop 1:flop 2:turn 3:river
    uint32 finished                     = 3;    // 是否结束 0:未结束  1:结束
    repeated int32 flop_cards           = 4;    // flop公牌
    repeated int32 turn_cards           = 5;    // turn公牌
    
    repeated int32 river_cards          = 6;    // river公牌
    repeated TPAPlayerCards player_cards= 7;    // 玩家私牌
    uint64 dealer_player_id             = 8;    // 庄家标识
}
// --------------------------


//查询允许加注信息 -- CMD_TPA_QUERY_ALLOW_ACTION
message TpaQueryAllowActionReq
{
    uint32 room_id                      = 1;    // 房间标识	
    uint64 player_id                    = 2;    // 玩家标识
}

message TpaQueryAllowActionResp
{
    uint32 room_id                      = 1;    // 房间标识	
    uint64 player_id                    = 2;    // 玩家标识
    repeated uint32 allow_raise         = 3;    // 下次允许的加注值
}
// --------------------------


//查询游戏状态信息 -- CMD_TPA_QUERY_MATCH_STATE
message TpaQueryMatchStateReq
{
    uint32 room_id                      = 1;    // 房间标识	
    int32  round                        = 2;    // 轮 0:preflop 1:flop 2:turn 3:river  -1:全量
}

message TpaQueryMatchStateResp
{
    uint32 room_id                      = 1;    // 房间标识	
    uint64 dealer_player_id             = 2;    // 庄家的用户标识
    uint32 hand_id                      = 3;    // 场次ID
    int32  round                        = 4;    // 当前轮 0:preflop 1:flop 2:turn 3:river
    uint32 finished                     = 5;    // 是否结束 0:未结束  1:结束
    
    uint32 max_spent                    = 6;    // 最大加注
    repeated int32 flop_cards           = 7;    // flop公牌
    repeated int32 turn_cards           = 8;    // turn公牌
    repeated int32 river_cards          = 9;    // river公牌
    repeated uint32 allow_raise         = 10;   // 下次允许的加注值
    
    repeated TPAPlayerState player_state  = 11; // 所有玩家的状态 (按位置顺序存储)
    repeated TPAPlayerAction player_action= 12; // 所有玩家的动作信息
    
    uint64 turn_player_id               = 13;    // 轮到该玩家下注
}
// --------------------------


//上报决策行动指示 -- CMD_TPA_REPORT_ACTION_TOKEN
message TpaReportActionTokenReq
{
    uint32 room_id                      = 1;    // 房间标识
    uint64 player_id                    = 2;    // 出手玩家的用户标识
}

message TpaReportActionTokenResp
{
    uint32 room_id                      = 1;    // 房间标识
    uint64 player_id                    = 2;    // 出手玩家的用户标识
}  
// --------------------


//上报玩家决策结果 -- CMD_TPA_REPORT_PLAYER_ACTION
message TpaReportPlayerActionReq
{
    uint32 room_id                      = 1;    // 房间标识
    uint64 player_id                    = 2;    // 用户标识
    uint32 action_type                  = 3;    // 操作类型  0:弃牌 1:跟注或过牌 2:加注
    uint32 size                         = 4;    // 筹码大小(加注到)  注:每次的加注值，由最后一个“查询游戏状态”或“玩家执行游戏动作”或“请求机器人的游戏动作”命令的应答结果指定
}

message TpaReportPlayerActionResp
{
    uint32 room_id                      = 1;    // 房间标识
    uint64 player_id                    = 2;    // 用户标识
    uint32 action_type                  = 3;    // 操作类型  0:弃牌 1:跟注或过牌 2:加注
    uint32 size                         = 4;    // 筹码大小(加注到)
    repeated uint32 allow_raise         = 5;    // 下次允许的加注值
}
// --------------------

//查询机器人决策 -- CMD_TPA_QUERY_AI_ACTION
message TpaQueryAIActionReq
{
    uint32 room_id                      = 1;    // 房间标识
    uint64 player_id                    = 2;    // [机器人的]用户标识
}

message TpaQueryAIActionResp
{
    uint32 room_id                      = 1;    // 房间标识
    uint64 player_id                    = 2;    // 用户标识
    uint32 action_type                  = 3;    // 操作类型  0:弃牌 1:跟注或过牌 2:加注
    uint32 size                         = 4;    // 筹码大小(加注到)
    repeated uint32 allow_raise         = 5;    // 下次允许的加注值
}

// --------------------

//
//
//
//
